
LM75A_TEMP_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d894  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800d9a8  0800d9a8  0000e9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de5c  0800de5c  0000f344  2**0
                  CONTENTS
  4 .ARM          00000008  0800de5c  0800de5c  0000ee5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de64  0800de64  0000f344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de64  0800de64  0000ee64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de68  0800de68  0000ee68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800de6c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  20000344  0800e1b0  0000f344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001728  0800e1b0  0000f728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ea4  00000000  00000000  0000f36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003618  00000000  00000000  00022211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00025830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c74  00000000  00000000  000268a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b01d  00000000  00000000  00027514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016730  00000000  00000000  00042531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b309  00000000  00000000  00058c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3f6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  000e3fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e96a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d98c 	.word	0x0800d98c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800d98c 	.word	0x0800d98c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000be0:	f043 0320 	orr.w	r3, r3, #32
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0320 	and.w	r3, r3, #32
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <MX_GPIO_Init+0x58>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000

08000c30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <MX_I2C1_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_I2C1_Init+0x50>)
 8000c6e:	f000 fe01 	bl	8001874 <HAL_I2C_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 f912 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000360 	.word	0x20000360
 8000c84:	40005400 	.word	0x40005400
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <HAL_I2C_MspInit+0x70>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d123      	bne.n	8000cf4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc4:	23c0      	movs	r3, #192	@ 0xc0
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc8:	2312      	movs	r3, #18
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <HAL_I2C_MspInit+0x78>)
 8000cd8:	f000 fc48 	bl	800156c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce6:	61d3      	str	r3, [r2, #28]
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_I2C_MspInit+0x74>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010c00 	.word	0x40010c00

08000d08 <LM75AReadTemperature>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
float LM75AReadTemperature(I2C_HandleTypeDef *hi2c1)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af04      	add	r7, sp, #16
 8000d0e:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[2];
	HAL_I2C_Mem_Read(hi2c1, LM75A_ADDRESS, LM75A_TEMP_REGISTER, I2C_MEMADD_SIZE_8BIT, temp_data, 2, HAL_MAX_DELAY);
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	2302      	movs	r3, #2
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	2200      	movs	r2, #0
 8000d24:	2190      	movs	r1, #144	@ 0x90
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 fee8 	bl	8001afc <HAL_I2C_Mem_Read>

	int16_t temp_raw = (temp_data[0] << 8) | temp_data[1];
 8000d2c:	7b3b      	ldrb	r3, [r7, #12]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	82fb      	strh	r3, [r7, #22]
	temp_raw >>= 5;
 8000d3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d3e:	115b      	asrs	r3, r3, #5
 8000d40:	82fb      	strh	r3, [r7, #22]

	float temperature = temp_raw * 0.125;
 8000d42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb5c 	bl	8000404 <__aeabi_i2d>
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8000d54:	f7ff fbc0 	bl	80004d8 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff feb2 	bl	8000ac8 <__aeabi_d2f>
 8000d64:	4603      	mov	r3, r0
 8000d66:	613b      	str	r3, [r7, #16]

	return temperature;
 8000d68:	693b      	ldr	r3, [r7, #16]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <SendTemperatureOverUsb>:

void SendTemperatureOverUsb(float temperature)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b090      	sub	sp, #64	@ 0x40
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	char buffer[50];
	int len = sprintf(buffer,"Temperature: %.2f °C\r\n", temperature);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fb53 	bl	8000428 <__aeabi_f2d>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	f107 0008 	add.w	r0, r7, #8
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <SendTemperatureOverUsb+0x38>)
 8000d8c:	f009 f912 	bl	8009fb4 <siprintf>
 8000d90:	63f8      	str	r0, [r7, #60]	@ 0x3c
	CDC_Transmit_FS((uint8_t*)buffer, len);
 8000d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f007 febf 	bl	8008b20 <CDC_Transmit_FS>
}
 8000da2:	bf00      	nop
 8000da4:	3740      	adds	r7, #64	@ 0x40
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800d9a8 	.word	0x0800d9a8

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f000 fa45 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f817 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbe:	f7ff ff09 	bl	8000bd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dc2:	f7ff ff35 	bl	8000c30 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dc6:	f000 f9a1 	bl	800110c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000dca:	f007 fdeb 	bl	80089a4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float temperature = LM75AReadTemperature(&hi2c1);
 8000dce:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <main+0x38>)
 8000dd0:	f7ff ff9a 	bl	8000d08 <LM75AReadTemperature>
 8000dd4:	6078      	str	r0, [r7, #4]
	  SendTemperatureOverUsb(temperature);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffcc 	bl	8000d74 <SendTemperatureOverUsb>
	  HAL_Delay(1000);
 8000ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000de0:	f000 fa92 	bl	8001308 <HAL_Delay>
  {
 8000de4:	bf00      	nop
 8000de6:	e7f2      	b.n	8000dce <main+0x1e>
 8000de8:	20000360 	.word	0x20000360

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	@ 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df6:	2228      	movs	r2, #40	@ 0x28
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00a f84a 	bl	800ae94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e38:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 f904 	bl	8004050 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4e:	f000 f827 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fb70 	bl	8004554 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e7a:	f000 f811 	bl	8000ea0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fcf1 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e94:	f000 f804 	bl	8000ea0 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3750      	adds	r7, #80	@ 0x50
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <HAL_MspInit+0x5c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_MspInit+0x5c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <HAL_MspInit+0x5c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <HAL_MspInit+0x5c>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_MspInit+0x60>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_MspInit+0x60>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <NMI_Handler+0x4>

08000f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <MemManage_Handler+0x4>

08000f28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 f9b6 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f6e:	f001 fc27 	bl	80027c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200010cc 	.word	0x200010cc

08000f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <_kill>:

int _kill(int pid, int sig)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f94:	f009 ff8a 	bl	800aeac <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2216      	movs	r2, #22
 8000f9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_exit>:

void _exit (int status)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fb2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffe7 	bl	8000f8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <_exit+0x12>

08000fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fd2:	f3af 8000 	nop.w
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
  }

  return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e009      	b.n	8001020 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf1      	blt.n	800100c <_write+0x12>
  }
  return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_close>:

int _close(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001058:	605a      	str	r2, [r3, #4]
  return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <_isatty>:

int _isatty(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800107a:	b480      	push	{r7}
 800107c:	b085      	sub	sp, #20
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
	...

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f009 fef2 	bl	800aeac <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20005000 	.word	0x20005000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	200003b4 	.word	0x200003b4
 80010fc:	20001728 	.word	0x20001728

08001100 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <MX_USART1_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001144:	f003 fc4a 	bl	80049dc <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f7ff fea7 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200003b8 	.word	0x200003b8
 800115c:	40013800 	.word	0x40013800

08001160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <HAL_UART_MspInit+0x8c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d131      	bne.n	80011e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <HAL_UART_MspInit+0x90>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a1a      	ldr	r2, [pc, #104]	@ (80011f0 <HAL_UART_MspInit+0x90>)
 8001186:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <HAL_UART_MspInit+0x90>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_UART_MspInit+0x90>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <HAL_UART_MspInit+0x90>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_UART_MspInit+0x90>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <HAL_UART_MspInit+0x94>)
 80011c6:	f000 f9d1 	bl	800156c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <HAL_UART_MspInit+0x94>)
 80011e0:	f000 f9c4 	bl	800156c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010800 	.word	0x40010800

080011f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f8:	f7ff ff82 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480b      	ldr	r0, [pc, #44]	@ (800122c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011fe:	490c      	ldr	r1, [pc, #48]	@ (8001230 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001200:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001214:	4c09      	ldr	r4, [pc, #36]	@ (800123c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f009 fe49 	bl	800aeb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001226:	f7ff fdc3 	bl	8000db0 <main>
  bx lr
 800122a:	4770      	bx	lr
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001234:	0800de6c 	.word	0x0800de6c
  ldr r2, =_sbss
 8001238:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 800123c:	20001728 	.word	0x20001728

08001240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC1_2_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <HAL_Init+0x28>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	@ (800126c <HAL_Init+0x28>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f947 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	200f      	movs	r0, #15
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fe24 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f95f 	bl	8001552 <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012ac:	f000 f927 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	@ (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_IncTick+0x1c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_IncTick+0x20>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a03      	ldr	r2, [pc, #12]	@ (80012f0 <HAL_IncTick+0x20>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000400 	.word	0x20000400

080012f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b02      	ldr	r3, [pc, #8]	@ (8001304 <HAL_GetTick+0x10>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000400 	.word	0x20000400

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff fff0 	bl	80012f4 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffe0 	bl	80012f4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4906      	ldr	r1, [pc, #24]	@ (80013e8 <__NVIC_EnableIRQ+0x34>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	@ (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	@ (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	@ 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014c8:	f7ff ff90 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff2d 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff42 	bl	8001398 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff35 	bl	80013b4 <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b08b      	sub	sp, #44	@ 0x2c
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	e169      	b.n	8001854 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001580:	2201      	movs	r2, #1
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8158 	bne.w	800184e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a9a      	ldr	r2, [pc, #616]	@ (800180c <HAL_GPIO_Init+0x2a0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d05e      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015a8:	4a98      	ldr	r2, [pc, #608]	@ (800180c <HAL_GPIO_Init+0x2a0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d875      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ae:	4a98      	ldr	r2, [pc, #608]	@ (8001810 <HAL_GPIO_Init+0x2a4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d058      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015b4:	4a96      	ldr	r2, [pc, #600]	@ (8001810 <HAL_GPIO_Init+0x2a4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d86f      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ba:	4a96      	ldr	r2, [pc, #600]	@ (8001814 <HAL_GPIO_Init+0x2a8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d052      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015c0:	4a94      	ldr	r2, [pc, #592]	@ (8001814 <HAL_GPIO_Init+0x2a8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d869      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015c6:	4a94      	ldr	r2, [pc, #592]	@ (8001818 <HAL_GPIO_Init+0x2ac>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d04c      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015cc:	4a92      	ldr	r2, [pc, #584]	@ (8001818 <HAL_GPIO_Init+0x2ac>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d863      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015d2:	4a92      	ldr	r2, [pc, #584]	@ (800181c <HAL_GPIO_Init+0x2b0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d046      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015d8:	4a90      	ldr	r2, [pc, #576]	@ (800181c <HAL_GPIO_Init+0x2b0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d85d      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d82a      	bhi.n	8001638 <HAL_GPIO_Init+0xcc>
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d859      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015e6:	a201      	add	r2, pc, #4	@ (adr r2, 80015ec <HAL_GPIO_Init+0x80>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001641 	.word	0x08001641
 80015f4:	08001653 	.word	0x08001653
 80015f8:	08001695 	.word	0x08001695
 80015fc:	0800169b 	.word	0x0800169b
 8001600:	0800169b 	.word	0x0800169b
 8001604:	0800169b 	.word	0x0800169b
 8001608:	0800169b 	.word	0x0800169b
 800160c:	0800169b 	.word	0x0800169b
 8001610:	0800169b 	.word	0x0800169b
 8001614:	0800169b 	.word	0x0800169b
 8001618:	0800169b 	.word	0x0800169b
 800161c:	0800169b 	.word	0x0800169b
 8001620:	0800169b 	.word	0x0800169b
 8001624:	0800169b 	.word	0x0800169b
 8001628:	0800169b 	.word	0x0800169b
 800162c:	0800169b 	.word	0x0800169b
 8001630:	08001649 	.word	0x08001649
 8001634:	0800165d 	.word	0x0800165d
 8001638:	4a79      	ldr	r2, [pc, #484]	@ (8001820 <HAL_GPIO_Init+0x2b4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163e:	e02c      	b.n	800169a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e029      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	3304      	adds	r3, #4
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e024      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	3308      	adds	r3, #8
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e01f      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	330c      	adds	r3, #12
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e01a      	b.n	800169c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166e:	2304      	movs	r3, #4
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e013      	b.n	800169c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167c:	2308      	movs	r3, #8
 800167e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	611a      	str	r2, [r3, #16]
          break;
 8001686:	e009      	b.n	800169c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	615a      	str	r2, [r3, #20]
          break;
 8001692:	e003      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x130>
          break;
 800169a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	@ 0xff
 80016a0:	d801      	bhi.n	80016a6 <HAL_GPIO_Init+0x13a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_Init+0x13e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2bff      	cmp	r3, #255	@ 0xff
 80016b0:	d802      	bhi.n	80016b8 <HAL_GPIO_Init+0x14c>
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x152>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	3b08      	subs	r3, #8
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	210f      	movs	r1, #15
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80b1 	beq.w	800184e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001824 <HAL_GPIO_Init+0x2b8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001824 <HAL_GPIO_Init+0x2b8>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001824 <HAL_GPIO_Init+0x2b8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001704:	4a48      	ldr	r2, [pc, #288]	@ (8001828 <HAL_GPIO_Init+0x2bc>)
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a40      	ldr	r2, [pc, #256]	@ (800182c <HAL_GPIO_Init+0x2c0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d013      	beq.n	8001758 <HAL_GPIO_Init+0x1ec>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3f      	ldr	r2, [pc, #252]	@ (8001830 <HAL_GPIO_Init+0x2c4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d00d      	beq.n	8001754 <HAL_GPIO_Init+0x1e8>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a3e      	ldr	r2, [pc, #248]	@ (8001834 <HAL_GPIO_Init+0x2c8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x1e4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a3d      	ldr	r2, [pc, #244]	@ (8001838 <HAL_GPIO_Init+0x2cc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_GPIO_Init+0x1e0>
 8001748:	2303      	movs	r3, #3
 800174a:	e006      	b.n	800175a <HAL_GPIO_Init+0x1ee>
 800174c:	2304      	movs	r3, #4
 800174e:	e004      	b.n	800175a <HAL_GPIO_Init+0x1ee>
 8001750:	2302      	movs	r3, #2
 8001752:	e002      	b.n	800175a <HAL_GPIO_Init+0x1ee>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_GPIO_Init+0x1ee>
 8001758:	2300      	movs	r3, #0
 800175a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175c:	f002 0203 	and.w	r2, r2, #3
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	4093      	lsls	r3, r2
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800176a:	492f      	ldr	r1, [pc, #188]	@ (8001828 <HAL_GPIO_Init+0x2bc>)
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001784:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	492c      	ldr	r1, [pc, #176]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001792:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	4928      	ldr	r1, [pc, #160]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ac:	4b23      	ldr	r3, [pc, #140]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	4922      	ldr	r1, [pc, #136]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	491e      	ldr	r1, [pc, #120]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4918      	ldr	r1, [pc, #96]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4914      	ldr	r1, [pc, #80]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d021      	beq.n	8001840 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	490e      	ldr	r1, [pc, #56]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e021      	b.n	800184e <HAL_GPIO_Init+0x2e2>
 800180a:	bf00      	nop
 800180c:	10320000 	.word	0x10320000
 8001810:	10310000 	.word	0x10310000
 8001814:	10220000 	.word	0x10220000
 8001818:	10210000 	.word	0x10210000
 800181c:	10120000 	.word	0x10120000
 8001820:	10110000 	.word	0x10110000
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000
 800182c:	40010800 	.word	0x40010800
 8001830:	40010c00 	.word	0x40010c00
 8001834:	40011000 	.word	0x40011000
 8001838:	40011400 	.word	0x40011400
 800183c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_GPIO_Init+0x304>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	43db      	mvns	r3, r3
 8001848:	4909      	ldr	r1, [pc, #36]	@ (8001870 <HAL_GPIO_Init+0x304>)
 800184a:	4013      	ands	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	3301      	adds	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	f47f ae8e 	bne.w	8001580 <HAL_GPIO_Init+0x14>
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	372c      	adds	r7, #44	@ 0x2c
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e12b      	b.n	8001ade <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff f9f6 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	@ 0x24
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018d8:	f002 ff84 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a81      	ldr	r2, [pc, #516]	@ (8001ae8 <HAL_I2C_Init+0x274>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d807      	bhi.n	80018f8 <HAL_I2C_Init+0x84>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a80      	ldr	r2, [pc, #512]	@ (8001aec <HAL_I2C_Init+0x278>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	bf94      	ite	ls
 80018f0:	2301      	movls	r3, #1
 80018f2:	2300      	movhi	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	e006      	b.n	8001906 <HAL_I2C_Init+0x92>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4a7d      	ldr	r2, [pc, #500]	@ (8001af0 <HAL_I2C_Init+0x27c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	bf94      	ite	ls
 8001900:	2301      	movls	r3, #1
 8001902:	2300      	movhi	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0e7      	b.n	8001ade <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4a78      	ldr	r2, [pc, #480]	@ (8001af4 <HAL_I2C_Init+0x280>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae8 <HAL_I2C_Init+0x274>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d802      	bhi.n	8001948 <HAL_I2C_Init+0xd4>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3301      	adds	r3, #1
 8001946:	e009      	b.n	800195c <HAL_I2C_Init+0xe8>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4a69      	ldr	r2, [pc, #420]	@ (8001af8 <HAL_I2C_Init+0x284>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	3301      	adds	r3, #1
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	430b      	orrs	r3, r1
 8001962:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800196e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	495c      	ldr	r1, [pc, #368]	@ (8001ae8 <HAL_I2C_Init+0x274>)
 8001978:	428b      	cmp	r3, r1
 800197a:	d819      	bhi.n	80019b0 <HAL_I2C_Init+0x13c>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1e59      	subs	r1, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fbb1 f3f3 	udiv	r3, r1, r3
 800198a:	1c59      	adds	r1, r3, #1
 800198c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001990:	400b      	ands	r3, r1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <HAL_I2C_Init+0x138>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1e59      	subs	r1, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a4:	3301      	adds	r3, #1
 80019a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019aa:	e051      	b.n	8001a50 <HAL_I2C_Init+0x1dc>
 80019ac:	2304      	movs	r3, #4
 80019ae:	e04f      	b.n	8001a50 <HAL_I2C_Init+0x1dc>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d111      	bne.n	80019dc <HAL_I2C_Init+0x168>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1e58      	subs	r0, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	440b      	add	r3, r1
 80019c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e012      	b.n	8001a02 <HAL_I2C_Init+0x18e>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e58      	subs	r0, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	0099      	lsls	r1, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Init+0x196>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e022      	b.n	8001a50 <HAL_I2C_Init+0x1dc>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10e      	bne.n	8001a30 <HAL_I2C_Init+0x1bc>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1e58      	subs	r0, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6859      	ldr	r1, [r3, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	440b      	add	r3, r1
 8001a20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a2e:	e00f      	b.n	8001a50 <HAL_I2C_Init+0x1dc>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	0099      	lsls	r1, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	6809      	ldr	r1, [r1, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6911      	ldr	r1, [r2, #16]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68d2      	ldr	r2, [r2, #12]
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	000186a0 	.word	0x000186a0
 8001aec:	001e847f 	.word	0x001e847f
 8001af0:	003d08ff 	.word	0x003d08ff
 8001af4:	431bde83 	.word	0x431bde83
 8001af8:	10624dd3 	.word	0x10624dd3

08001afc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	@ 0x30
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	817b      	strh	r3, [r7, #10]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	813b      	strh	r3, [r7, #8]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b1a:	f7ff fbeb 	bl	80012f4 <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	f040 8244 	bne.w	8001fb6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2319      	movs	r3, #25
 8001b34:	2201      	movs	r2, #1
 8001b36:	4982      	ldr	r1, [pc, #520]	@ (8001d40 <HAL_I2C_Mem_Read+0x244>)
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fb2f 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	e237      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_I2C_Mem_Read+0x5a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e230      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d007      	beq.n	8001b7c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2222      	movs	r2, #34	@ 0x22
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2240      	movs	r2, #64	@ 0x40
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4a62      	ldr	r2, [pc, #392]	@ (8001d44 <HAL_I2C_Mem_Read+0x248>)
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bbe:	88f8      	ldrh	r0, [r7, #6]
 8001bc0:	893a      	ldrh	r2, [r7, #8]
 8001bc2:	8979      	ldrh	r1, [r7, #10]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4603      	mov	r3, r0
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f9fc 	bl	8001fcc <I2C_RequestMemoryRead>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1ec      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d113      	bne.n	8001c0e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e1c0      	b.n	8001f90 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d11e      	bne.n	8001c54 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c26:	b672      	cpsid	i
}
 8001c28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c50:	b662      	cpsie	i
}
 8001c52:	e035      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d11e      	bne.n	8001c9a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c96:	b662      	cpsie	i
}
 8001c98:	e012      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ca8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001cc0:	e166      	b.n	8001f90 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	f200 811f 	bhi.w	8001f0a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d123      	bne.n	8001d1c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 fbc1 	bl	8002460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e167      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d1a:	e139      	b.n	8001f90 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d152      	bne.n	8001dca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4906      	ldr	r1, [pc, #24]	@ (8001d48 <HAL_I2C_Mem_Read+0x24c>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fa34 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e13c      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
 8001d3e:	bf00      	nop
 8001d40:	00100002 	.word	0x00100002
 8001d44:	ffff0000 	.word	0xffff0000
 8001d48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d92:	b662      	cpsie	i
}
 8001d94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dc8:	e0e2      	b.n	8001f90 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	497b      	ldr	r1, [pc, #492]	@ (8001fc0 <HAL_I2C_Mem_Read+0x4c4>)
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f9e1 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0e9      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001df2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e2a:	4b66      	ldr	r3, [pc, #408]	@ (8001fc4 <HAL_I2C_Mem_Read+0x4c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	08db      	lsrs	r3, r3, #3
 8001e30:	4a65      	ldr	r2, [pc, #404]	@ (8001fc8 <HAL_I2C_Mem_Read+0x4cc>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0a1a      	lsrs	r2, r3, #8
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00da      	lsls	r2, r3, #3
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d118      	bne.n	8001e82 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f043 0220 	orr.w	r2, r3, #32
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e72:	b662      	cpsie	i
}
 8001e74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e09a      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d1d9      	bne.n	8001e44 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed2:	b662      	cpsie	i
}
 8001ed4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f08:	e042      	b.n	8001f90 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 faa6 	bl	8002460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e04c      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d118      	bne.n	8001f90 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f47f ae94 	bne.w	8001cc2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3728      	adds	r7, #40	@ 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	00010004 	.word	0x00010004
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	14f8b589 	.word	0x14f8b589

08001fcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002004:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	2200      	movs	r2, #0
 800200e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f8c2 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800202c:	d103      	bne.n	8002036 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0aa      	b.n	8002190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002048:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	4952      	ldr	r1, [pc, #328]	@ (8002198 <I2C_RequestMemoryRead+0x1cc>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f91d 	bl	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e097      	b.n	8002190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f9a8 	bl	80023d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	2b04      	cmp	r3, #4
 800208c:	d107      	bne.n	800209e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e076      	b.n	8002190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020a8:	893b      	ldrh	r3, [r7, #8]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	e021      	b.n	80020f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020b4:	893b      	ldrh	r3, [r7, #8]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c4:	6a39      	ldr	r1, [r7, #32]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f982 	bl	80023d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00d      	beq.n	80020ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d107      	bne.n	80020ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e050      	b.n	8002190 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ee:	893b      	ldrh	r3, [r7, #8]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fa:	6a39      	ldr	r1, [r7, #32]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f967 	bl	80023d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	2b04      	cmp	r3, #4
 800210e:	d107      	bne.n	8002120 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800211e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e035      	b.n	8002190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002132:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	2200      	movs	r2, #0
 800213c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f82b 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800215a:	d103      	bne.n	8002164 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e013      	b.n	8002190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002168:	897b      	ldrh	r3, [r7, #10]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	6a3a      	ldr	r2, [r7, #32]
 800217c:	4906      	ldr	r1, [pc, #24]	@ (8002198 <I2C_RequestMemoryRead+0x1cc>)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f886 	bl	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	00010002 	.word	0x00010002

0800219c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ac:	e048      	b.n	8002240 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021b4:	d044      	beq.n	8002240 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b6:	f7ff f89d 	bl	80012f4 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d139      	bne.n	8002240 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10d      	bne.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	43da      	mvns	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4013      	ands	r3, r2
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	e00c      	b.n	800220c <I2C_WaitOnFlagUntilTimeout+0x70>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	43da      	mvns	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4013      	ands	r3, r2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	429a      	cmp	r2, r3
 8002210:	d116      	bne.n	8002240 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e023      	b.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10d      	bne.n	8002266 <I2C_WaitOnFlagUntilTimeout+0xca>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	43da      	mvns	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4013      	ands	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	e00c      	b.n	8002280 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	43da      	mvns	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4013      	ands	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	429a      	cmp	r2, r3
 8002284:	d093      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229e:	e071      	b.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ae:	d123      	bne.n	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	f043 0204 	orr.w	r2, r3, #4
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e067      	b.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022fe:	d041      	beq.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002300:	f7fe fff8 	bl	80012f4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d302      	bcc.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d136      	bne.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10c      	bne.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	e00b      	b.n	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	43da      	mvns	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e021      	b.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10c      	bne.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e00b      	b.n	80023c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4013      	ands	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f af6d 	bne.w	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	e034      	b.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f89b 	bl	800251a <I2C_IsAcknowledgeFailed>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e034      	b.n	8002458 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023f4:	d028      	beq.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f6:	f7fe ff7d 	bl	80012f4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d11d      	bne.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002416:	2b80      	cmp	r3, #128	@ 0x80
 8002418:	d016      	beq.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e007      	b.n	8002458 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002452:	2b80      	cmp	r3, #128	@ 0x80
 8002454:	d1c3      	bne.n	80023de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800246c:	e049      	b.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b10      	cmp	r3, #16
 800247a:	d119      	bne.n	80024b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0210 	mvn.w	r2, #16
 8002484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e030      	b.n	8002512 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b0:	f7fe ff20 	bl	80012f4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d302      	bcc.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d11d      	bne.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d0:	2b40      	cmp	r3, #64	@ 0x40
 80024d2:	d016      	beq.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f043 0220 	orr.w	r2, r3, #32
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e007      	b.n	8002512 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250c:	2b40      	cmp	r3, #64	@ 0x40
 800250e:	d1ae      	bne.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002530:	d11b      	bne.n	800256a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800253a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f043 0204 	orr.w	r2, r3, #4
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002578:	b08b      	sub	sp, #44	@ 0x2c
 800257a:	af06      	add	r7, sp, #24
 800257c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0f1      	b.n	800276c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f006 fbf3 	bl	8008d88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 fb18 	bl	8004be4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	687e      	ldr	r6, [r7, #4]
 80025bc:	466d      	mov	r5, sp
 80025be:	f106 0410 	add.w	r4, r6, #16
 80025c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	602b      	str	r3, [r5, #0]
 80025ca:	1d33      	adds	r3, r6, #4
 80025cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ce:	6838      	ldr	r0, [r7, #0]
 80025d0:	f002 fae2 	bl	8004b98 <USB_CoreInit>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2202      	movs	r2, #2
 80025de:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0c2      	b.n	800276c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 fb13 	bl	8004c18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e040      	b.n	800267a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	3301      	adds	r3, #1
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	3303      	adds	r3, #3
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	3338      	adds	r3, #56	@ 0x38
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	333c      	adds	r3, #60	@ 0x3c
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	3340      	adds	r3, #64	@ 0x40
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	3301      	adds	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d3b9      	bcc.n	80025f8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e044      	b.n	8002714 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	3301      	adds	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d3b5      	bcc.n	800268a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	687e      	ldr	r6, [r7, #4]
 8002726:	466d      	mov	r5, sp
 8002728:	f106 0410 	add.w	r4, r6, #16
 800272c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	1d33      	adds	r3, r6, #4
 8002736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002738:	6838      	ldr	r0, [r7, #0]
 800273a:	f002 fa79 	bl	8004c30 <USB_DevInit>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e00d      	b.n	800276c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f004 fcfa 	bl	800715e <USB_DevDisconnect>

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002774 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_PCD_Start+0x16>
 8002786:	2302      	movs	r3, #2
 8002788:	e016      	b.n	80027b8 <HAL_PCD_Start+0x44>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f002 fa0e 	bl	8004bb8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800279c:	2101      	movs	r1, #1
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f006 fd65 	bl	800926e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 fcce 	bl	800714a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 fcd0 	bl	8007172 <USB_ReadInterrupts>
 80027d2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fb1b 	bl	8002e1a <PCD_EP_ISR_Handler>

    return;
 80027e4:	e119      	b.n	8002a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002802:	b292      	uxth	r2, r2
 8002804:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f006 fb38 	bl	8008e7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800280e:	2100      	movs	r1, #0
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f905 	bl	8002a20 <HAL_PCD_SetAddress>

    return;
 8002816:	e100      	b.n	8002a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002834:	b292      	uxth	r2, r2
 8002836:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800283a:	e0ee      	b.n	8002a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002858:	b292      	uxth	r2, r2
 800285a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800285e:	e0dc      	b.n	8002a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d027      	beq.n	80028ba <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002872:	b29a      	uxth	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0204 	bic.w	r2, r2, #4
 800287c:	b292      	uxth	r2, r2
 800287e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0208 	bic.w	r2, r2, #8
 8002894:	b292      	uxth	r2, r2
 8002896:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f006 fb28 	bl	8008ef0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028b2:	b292      	uxth	r2, r2
 80028b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028b8:	e0af      	b.n	8002a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8083 	beq.w	80029cc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	77fb      	strb	r3, [r7, #31]
 80028ca:	e010      	b.n	80028ee <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	7ffb      	ldrb	r3, [r7, #31]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	441a      	add	r2, r3
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	8812      	ldrh	r2, [r2, #0]
 80028dc:	b292      	uxth	r2, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	3320      	adds	r3, #32
 80028e2:	443b      	add	r3, r7
 80028e4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80028e8:	7ffb      	ldrb	r3, [r7, #31]
 80028ea:	3301      	adds	r3, #1
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	7ffb      	ldrb	r3, [r7, #31]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d9eb      	bls.n	80028cc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	b292      	uxth	r2, r2
 8002908:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002914:	b29a      	uxth	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	b292      	uxth	r2, r2
 8002920:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002924:	bf00      	nop
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800292e:	b29b      	uxth	r3, r3
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f6      	beq.n	8002926 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294a:	b292      	uxth	r2, r2
 800294c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	77fb      	strb	r3, [r7, #31]
 8002954:	e00f      	b.n	8002976 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002956:	7ffb      	ldrb	r3, [r7, #31]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4611      	mov	r1, r2
 800295e:	7ffa      	ldrb	r2, [r7, #31]
 8002960:	0092      	lsls	r2, r2, #2
 8002962:	440a      	add	r2, r1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	3320      	adds	r3, #32
 8002968:	443b      	add	r3, r7
 800296a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800296e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002970:	7ffb      	ldrb	r3, [r7, #31]
 8002972:	3301      	adds	r3, #1
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	2b07      	cmp	r3, #7
 800297a:	d9ec      	bls.n	8002956 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002984:	b29a      	uxth	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0208 	orr.w	r2, r2, #8
 800298e:	b292      	uxth	r2, r2
 8002990:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029a6:	b292      	uxth	r2, r2
 80029a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0204 	orr.w	r2, r2, #4
 80029be:	b292      	uxth	r2, r2
 80029c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f006 fa79 	bl	8008ebc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029ca:	e026      	b.n	8002a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00f      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029e8:	b292      	uxth	r2, r2
 80029ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f006 fa37 	bl	8008e62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029f4:	e011      	b.n	8002a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a12:	b292      	uxth	r2, r2
 8002a14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a18:	bf00      	nop
  }
}
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_PCD_SetAddress+0x1a>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e013      	b.n	8002a62 <HAL_PCD_SetAddress+0x42>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fb66 	bl	8007124 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	4608      	mov	r0, r1
 8002a74:	4611      	mov	r1, r2
 8002a76:	461a      	mov	r2, r3
 8002a78:	4603      	mov	r3, r0
 8002a7a:	70fb      	strb	r3, [r7, #3]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	803b      	strh	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da0e      	bge.n	8002aae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	705a      	strb	r2, [r3, #1]
 8002aac:	e00e      	b.n	8002acc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 0207 	and.w	r2, r3, #7
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ad8:	883a      	ldrh	r2, [r7, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	78ba      	ldrb	r2, [r7, #2]
 8002ae2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ae4:	78bb      	ldrb	r3, [r7, #2]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d102      	bne.n	8002af0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_PCD_EP_Open+0x94>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e00e      	b.n	8002b1c <HAL_PCD_EP_Open+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 f8af 	bl	8004c70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da0e      	bge.n	8002b56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	705a      	strb	r2, [r3, #1]
 8002b54:	e00e      	b.n	8002b74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 0207 	and.w	r2, r3, #7
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_EP_Close+0x6a>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e00e      	b.n	8002bac <HAL_PCD_EP_Close+0x88>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fc27 	bl	80053f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	f003 0207 	and.w	r2, r3, #7
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6979      	ldr	r1, [r7, #20]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 fdde 	bl	80057c8 <USB_EPStartXfer>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f003 0207 	and.w	r2, r3, #7
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002c38:	681b      	ldr	r3, [r3, #0]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	460b      	mov	r3, r1
 8002c52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	7afb      	ldrb	r3, [r7, #11]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c90:	7afb      	ldrb	r3, [r7, #11]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6979      	ldr	r1, [r7, #20]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 fd90 	bl	80057c8 <USB_EPStartXfer>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	f003 0207 	and.w	r2, r3, #7
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d901      	bls.n	8002cd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04c      	b.n	8002d6a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	da0e      	bge.n	8002cf6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	705a      	strb	r2, [r3, #1]
 8002cf4:	e00c      	b.n	8002d10 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_PCD_EP_SetStall+0x7e>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e01c      	b.n	8002d6a <HAL_PCD_EP_SetStall+0xb8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68f9      	ldr	r1, [r7, #12]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 f8f3 	bl	8006f2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f004 fa18 	bl	8007190 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 020f 	and.w	r2, r3, #15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d901      	bls.n	8002d90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e040      	b.n	8002e12 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	da0e      	bge.n	8002db6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	705a      	strb	r2, [r3, #1]
 8002db4:	e00e      	b.n	8002dd4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 0207 	and.w	r2, r3, #7
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_PCD_EP_ClrStall+0x82>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e00e      	b.n	8002e12 <HAL_PCD_EP_ClrStall+0xa0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 f8e1 	bl	8006fca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b096      	sub	sp, #88	@ 0x58
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e22:	e3be      	b.n	80035a2 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002e3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f040 8178 	bne.w	8003138 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d151      	bne.n	8002ef8 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e64:	81fb      	strh	r3, [r7, #14]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3328      	adds	r3, #40	@ 0x28
 8002e7c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	3302      	adds	r3, #2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002eb8:	2100      	movs	r1, #0
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f005 ffb7 	bl	8008e2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 836a 	beq.w	80035a2 <PCD_EP_ISR_Handler+0x788>
 8002ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 8365 	bne.w	80035a2 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ef6:	e354      	b.n	80035a2 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002efe:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d034      	beq.n	8002f80 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3306      	adds	r3, #6
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f40:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f52:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f004 f96b 	bl	8007230 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f66:	4013      	ands	r3, r2
 8002f68:	823b      	strh	r3, [r7, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	8a3a      	ldrh	r2, [r7, #16]
 8002f70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f74:	b292      	uxth	r2, r2
 8002f76:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f005 ff2b 	bl	8008dd4 <HAL_PCD_SetupStageCallback>
 8002f7e:	e310      	b.n	80035a2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f80:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f280 830c 	bge.w	80035a2 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f96:	4013      	ands	r3, r2
 8002f98:	83fb      	strh	r3, [r7, #30]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	8bfa      	ldrh	r2, [r7, #30]
 8002fa0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fa4:	b292      	uxth	r2, r2
 8002fa6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3306      	adds	r3, #6
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d019      	beq.n	8003010 <PCD_EP_ISR_Handler+0x1f6>
 8002fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d015      	beq.n	8003010 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fea:	6959      	ldr	r1, [r3, #20]
 8002fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f004 f91b 	bl	8007230 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	441a      	add	r2, r3
 8003004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003006:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003008:	2100      	movs	r1, #0
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f005 fef4 	bl	8008df8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800301a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800301e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 82bd 	bne.w	80035a2 <PCD_EP_ISR_Handler+0x788>
 8003028:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800302c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003030:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003034:	f000 82b5 	beq.w	80035a2 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003046:	b29b      	uxth	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4413      	add	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003062:	b29a      	uxth	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b3e      	cmp	r3, #62	@ 0x3e
 800306e:	d91d      	bls.n	80030ac <PCD_EP_ISR_Handler+0x292>
 8003070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	647b      	str	r3, [r7, #68]	@ 0x44
 8003078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2b00      	cmp	r3, #0
 8003082:	d102      	bne.n	800308a <PCD_EP_ISR_Handler+0x270>
 8003084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003086:	3b01      	subs	r3, #1
 8003088:	647b      	str	r3, [r7, #68]	@ 0x44
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29a      	uxth	r2, r3
 8003090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003092:	b29b      	uxth	r3, r3
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	b29b      	uxth	r3, r3
 8003098:	4313      	orrs	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	e026      	b.n	80030fa <PCD_EP_ISR_Handler+0x2e0>
 80030ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <PCD_EP_ISR_Handler+0x2b0>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e017      	b.n	80030fa <PCD_EP_ISR_Handler+0x2e0>
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <PCD_EP_ISR_Handler+0x2ca>
 80030de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e0:	3301      	adds	r3, #1
 80030e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	029b      	lsls	r3, r3, #10
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800310a:	827b      	strh	r3, [r7, #18]
 800310c:	8a7b      	ldrh	r3, [r7, #18]
 800310e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003112:	827b      	strh	r3, [r7, #18]
 8003114:	8a7b      	ldrh	r3, [r7, #18]
 8003116:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800311a:	827b      	strh	r3, [r7, #18]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	8a7b      	ldrh	r3, [r7, #18]
 8003122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800312a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800312e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003132:	b29b      	uxth	r3, r3
 8003134:	8013      	strh	r3, [r2, #0]
 8003136:	e234      	b.n	80035a2 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800314c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003150:	2b00      	cmp	r3, #0
 8003152:	f280 80fc 	bge.w	800334e <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29a      	uxth	r2, r3
 8003168:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800316c:	4013      	ands	r3, r2
 800316e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003184:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003188:	b292      	uxth	r2, r2
 800318a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800318c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80031a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a4:	7b1b      	ldrb	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d125      	bne.n	80031f6 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	3306      	adds	r3, #6
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80031d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8092 	beq.w	8003304 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e6:	6959      	ldr	r1, [r3, #20]
 80031e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ea:	88da      	ldrh	r2, [r3, #6]
 80031ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031f0:	f004 f81e 	bl	8007230 <USB_ReadPMA>
 80031f4:	e086      	b.n	8003304 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f8:	78db      	ldrb	r3, [r3, #3]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d10a      	bne.n	8003214 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003202:	461a      	mov	r2, r3
 8003204:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9d9 	bl	80035be <HAL_PCD_EP_DB_Receive>
 800320c:	4603      	mov	r3, r0
 800320e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003212:	e077      	b.n	8003304 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800322a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800324c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003250:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003254:	b29b      	uxth	r3, r3
 8003256:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d024      	beq.n	80032bc <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800327a:	b29b      	uxth	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	3302      	adds	r3, #2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800329a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800329e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02e      	beq.n	8003304 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ac:	6959      	ldr	r1, [r3, #20]
 80032ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b0:	891a      	ldrh	r2, [r3, #8]
 80032b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032b6:	f003 ffbb 	bl	8007230 <USB_ReadPMA>
 80032ba:	e023      	b.n	8003304 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	3306      	adds	r3, #6
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80032e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f6:	6959      	ldr	r1, [r3, #20]
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	895a      	ldrh	r2, [r3, #10]
 80032fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003300:	f003 ff96 	bl	8007230 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800330c:	441a      	add	r2, r3
 800330e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003310:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800331a:	441a      	add	r2, r3
 800331c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <PCD_EP_ISR_Handler+0x51a>
 8003328:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800332c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d206      	bcs.n	8003342 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f005 fd5c 	bl	8008df8 <HAL_PCD_DataOutStageCallback>
 8003340:	e005      	b.n	800334e <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003348:	4618      	mov	r0, r3
 800334a:	f002 fa3d 	bl	80057c8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800334e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8123 	beq.w	80035a2 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 800335c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80033a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80033ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ae:	78db      	ldrb	r3, [r3, #3]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	f040 80a2 	bne.w	80034fa <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80033b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80033bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033be:	7b1b      	ldrb	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8093 	beq.w	80034ec <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d046      	beq.n	8003460 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d126      	bne.n	8003428 <PCD_EP_ISR_Handler+0x60e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	4413      	add	r3, r2
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	011a      	lsls	r2, r3, #4
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	4413      	add	r3, r2
 80033fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340c:	b29a      	uxth	r2, r3
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003420:	b29a      	uxth	r2, r3
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	801a      	strh	r2, [r3, #0]
 8003426:	e061      	b.n	80034ec <PCD_EP_ISR_Handler+0x6d2>
 8003428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d15d      	bne.n	80034ec <PCD_EP_ISR_Handler+0x6d2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003444:	4413      	add	r3, r2
 8003446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	011a      	lsls	r2, r3, #4
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	4413      	add	r3, r2
 8003452:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	2200      	movs	r2, #0
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	e045      	b.n	80034ec <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d126      	bne.n	80034bc <PCD_EP_ISR_Handler+0x6a2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	637b      	str	r3, [r7, #52]	@ 0x34
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	4413      	add	r3, r2
 8003484:	637b      	str	r3, [r7, #52]	@ 0x34
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	011a      	lsls	r2, r3, #4
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	4413      	add	r3, r2
 8003490:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b8:	801a      	strh	r2, [r3, #0]
 80034ba:	e017      	b.n	80034ec <PCD_EP_ISR_Handler+0x6d2>
 80034bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034be:	785b      	ldrb	r3, [r3, #1]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d113      	bne.n	80034ec <PCD_EP_ISR_Handler+0x6d2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d2:	4413      	add	r3, r2
 80034d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	011a      	lsls	r2, r3, #4
 80034dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034de:	4413      	add	r3, r2
 80034e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e8:	2200      	movs	r2, #0
 80034ea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f005 fc9b 	bl	8008e2e <HAL_PCD_DataInStageCallback>
 80034f8:	e053      	b.n	80035a2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d146      	bne.n	8003594 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	3302      	adds	r3, #2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800352e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800353a:	429a      	cmp	r2, r3
 800353c:	d907      	bls.n	800354e <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 800353e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003546:	1ad2      	subs	r2, r2, r3
 8003548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354a:	619a      	str	r2, [r3, #24]
 800354c:	e002      	b.n	8003554 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	2200      	movs	r2, #0
 8003552:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800355c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f005 fc63 	bl	8008e2e <HAL_PCD_DataInStageCallback>
 8003568:	e01b      	b.n	80035a2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800356a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003572:	441a      	add	r2, r3
 8003574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003576:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003580:	441a      	add	r2, r3
 8003582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003584:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800358c:	4618      	mov	r0, r3
 800358e:	f002 f91b 	bl	80057c8 <USB_EPStartXfer>
 8003592:	e006      	b.n	80035a2 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003594:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003598:	461a      	mov	r2, r3
 800359a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f91b 	bl	80037d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f6ff ac38 	blt.w	8002e24 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3758      	adds	r7, #88	@ 0x58
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b088      	sub	sp, #32
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d07e      	beq.n	80036d4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035de:	b29b      	uxth	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	3302      	adds	r3, #2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	8b7b      	ldrh	r3, [r7, #26]
 8003606:	429a      	cmp	r2, r3
 8003608:	d306      	bcc.n	8003618 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	8b7b      	ldrh	r3, [r7, #26]
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	619a      	str	r2, [r3, #24]
 8003616:	e002      	b.n	800361e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d123      	bne.n	800366e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800363c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003640:	833b      	strh	r3, [r7, #24]
 8003642:	8b3b      	ldrh	r3, [r7, #24]
 8003644:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003648:	833b      	strh	r3, [r7, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	441a      	add	r2, r3
 8003658:	8b3b      	ldrh	r3, [r7, #24]
 800365a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800365e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800366a:	b29b      	uxth	r3, r3
 800366c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01f      	beq.n	80036b8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800368e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003692:	82fb      	strh	r3, [r7, #22]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	8afb      	ldrh	r3, [r7, #22]
 80036a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036b8:	8b7b      	ldrh	r3, [r7, #26]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8087 	beq.w	80037ce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6959      	ldr	r1, [r3, #20]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	891a      	ldrh	r2, [r3, #8]
 80036cc:	8b7b      	ldrh	r3, [r7, #26]
 80036ce:	f003 fdaf 	bl	8007230 <USB_ReadPMA>
 80036d2:	e07c      	b.n	80037ce <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	3306      	adds	r3, #6
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	8b7b      	ldrh	r3, [r7, #26]
 8003704:	429a      	cmp	r2, r3
 8003706:	d306      	bcc.n	8003716 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	8b7b      	ldrh	r3, [r7, #26]
 800370e:	1ad2      	subs	r2, r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	619a      	str	r2, [r3, #24]
 8003714:	e002      	b.n	800371c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d123      	bne.n	800376c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29b      	uxth	r3, r3
 8003736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800373a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800373e:	83fb      	strh	r3, [r7, #30]
 8003740:	8bfb      	ldrh	r3, [r7, #30]
 8003742:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003746:	83fb      	strh	r3, [r7, #30]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	8bfb      	ldrh	r3, [r7, #30]
 8003758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800375c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003768:	b29b      	uxth	r3, r3
 800376a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11f      	bne.n	80037b6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800378c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003790:	83bb      	strh	r3, [r7, #28]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	441a      	add	r2, r3
 80037a0:	8bbb      	ldrh	r3, [r7, #28]
 80037a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037b6:	8b7b      	ldrh	r3, [r7, #26]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6959      	ldr	r1, [r3, #20]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	895a      	ldrh	r2, [r3, #10]
 80037c8:	8b7b      	ldrh	r3, [r7, #26]
 80037ca:	f003 fd31 	bl	8007230 <USB_ReadPMA>
    }
  }

  return count;
 80037ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b0a4      	sub	sp, #144	@ 0x90
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 81dd 	beq.w	8003bac <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	3302      	adds	r3, #2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003826:	429a      	cmp	r2, r3
 8003828:	d907      	bls.n	800383a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003832:	1ad2      	subs	r2, r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	619a      	str	r2, [r3, #24]
 8003838:	e002      	b.n	8003840 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2200      	movs	r2, #0
 800383e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 80b9 	bne.w	80039bc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d126      	bne.n	80038a0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003860:	b29b      	uxth	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003866:	4413      	add	r3, r2
 8003868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	011a      	lsls	r2, r3, #4
 8003870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003872:	4413      	add	r3, r2
 8003874:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003884:	b29a      	uxth	r2, r3
 8003886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003898:	b29a      	uxth	r2, r3
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	e01a      	b.n	80038d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d116      	bne.n	80038d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038bc:	4413      	add	r3, r2
 80038be:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	011a      	lsls	r2, r3, #4
 80038c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c8:	4413      	add	r3, r2
 80038ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80038d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d126      	bne.n	8003932 <HAL_PCD_EP_DB_Transmit+0x15a>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	011a      	lsls	r2, r3, #4
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003916:	b29a      	uxth	r2, r3
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	801a      	strh	r2, [r3, #0]
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	b29b      	uxth	r3, r3
 8003922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392a:	b29a      	uxth	r2, r3
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	e017      	b.n	8003962 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d113      	bne.n	8003962 <HAL_PCD_EP_DB_Transmit+0x18a>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	4413      	add	r3, r2
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	011a      	lsls	r2, r3, #4
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	4413      	add	r3, r2
 8003956:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800395a:	623b      	str	r3, [r7, #32]
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	2200      	movs	r2, #0
 8003960:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	4619      	mov	r1, r3
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f005 fa60 	bl	8008e2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 82fc 	beq.w	8003f72 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003994:	82fb      	strh	r3, [r7, #22]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8013      	strh	r3, [r2, #0]
 80039ba:	e2da      	b.n	8003f72 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d021      	beq.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80039f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f040 82ae 	bne.w	8003f72 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a1e:	441a      	add	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a2c:	441a      	add	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d30b      	bcc.n	8003a56 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	621a      	str	r2, [r3, #32]
 8003a54:	e017      	b.n	8003a86 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003a5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a6e:	e00a      	b.n	8003a86 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d165      	bne.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x382>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa2:	4413      	add	r3, r2
 8003aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	011a      	lsls	r2, r3, #4
 8003aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aae:	4413      	add	r3, r2
 8003ab0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aca:	2b3e      	cmp	r3, #62	@ 0x3e
 8003acc:	d91d      	bls.n	8003b0a <HAL_PCD_EP_DB_Transmit+0x332>
 8003ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x310>
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	e044      	b.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <HAL_PCD_EP_DB_Transmit+0x350>
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b24:	801a      	strh	r2, [r3, #0]
 8003b26:	e035      	b.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b3e:	3301      	adds	r3, #1
 8003b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	029b      	lsls	r3, r3, #10
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4313      	orrs	r3, r2
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	e01c      	b.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d118      	bne.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b76:	4413      	add	r3, r2
 8003b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	011a      	lsls	r2, r3, #4
 8003b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b82:	4413      	add	r3, r2
 8003b84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b92:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6959      	ldr	r1, [r3, #20]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	891a      	ldrh	r2, [r3, #8]
 8003ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f003 fafe 	bl	80071a6 <USB_WritePMA>
 8003baa:	e1e2      	b.n	8003f72 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3306      	adds	r3, #6
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	699a      	ldr	r2, [r3, #24]
 8003bdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d307      	bcc.n	8003bf4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bec:	1ad2      	subs	r2, r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	619a      	str	r2, [r3, #24]
 8003bf2:	e002      	b.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 80c0 	bne.w	8003d84 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	785b      	ldrb	r3, [r3, #1]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d126      	bne.n	8003c5a <HAL_PCD_EP_DB_Transmit+0x482>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c20:	4413      	add	r3, r2
 8003c22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	011a      	lsls	r2, r3, #4
 8003c2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c42:	801a      	strh	r2, [r3, #0]
 8003c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c56:	801a      	strh	r2, [r3, #0]
 8003c58:	e01a      	b.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d116      	bne.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c76:	4413      	add	r3, r2
 8003c78:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	011a      	lsls	r2, r3, #4
 8003c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c82:	4413      	add	r3, r2
 8003c84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	785b      	ldrb	r3, [r3, #1]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d12b      	bne.n	8003cf6 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb2:	4413      	add	r3, r2
 8003cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	011a      	lsls	r2, r3, #4
 8003cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003cc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	e017      	b.n	8003d26 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	785b      	ldrb	r3, [r3, #1]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d113      	bne.n	8003d26 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d0c:	4413      	add	r3, r2
 8003d0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	011a      	lsls	r2, r3, #4
 8003d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d18:	4413      	add	r3, r2
 8003d1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d22:	2200      	movs	r2, #0
 8003d24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f005 f87e 	bl	8008e2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 811a 	bne.w	8003f72 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d58:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	441a      	add	r2, r3
 8003d6a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	8013      	strh	r3, [r2, #0]
 8003d82:	e0f6      	b.n	8003f72 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d121      	bne.n	8003dd2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	441a      	add	r2, r3
 8003dba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 80ca 	bne.w	8003f72 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003de6:	441a      	add	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003df4:	441a      	add	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6a1a      	ldr	r2, [r3, #32]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d30b      	bcc.n	8003e1e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	621a      	str	r2, [r3, #32]
 8003e1c:	e017      	b.n	8003e4e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003e26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e36:	e00a      	b.n	8003e4e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	785b      	ldrb	r3, [r3, #1]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d165      	bne.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x750>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e70:	4413      	add	r3, r2
 8003e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	011a      	lsls	r2, r3, #4
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e98:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e9a:	d91d      	bls.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x700>
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003eb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	029b      	lsls	r3, r3, #10
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ed4:	801a      	strh	r2, [r3, #0]
 8003ed6:	e041      	b.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x784>
 8003ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003ee0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	e032      	b.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x784>
 8003ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_PCD_EP_DB_Transmit+0x738>
 8003f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	029b      	lsls	r3, r3, #10
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e019      	b.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x784>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	785b      	ldrb	r3, [r3, #1]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d115      	bne.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x784>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3e:	4413      	add	r3, r2
 8003f40:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	011a      	lsls	r2, r3, #4
 8003f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f50:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f5a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	6959      	ldr	r1, [r3, #20]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	895a      	ldrh	r2, [r3, #10]
 8003f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f003 f91a 	bl	80071a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f8c:	82bb      	strh	r3, [r7, #20]
 8003f8e:	8abb      	ldrh	r3, [r7, #20]
 8003f90:	f083 0310 	eor.w	r3, r3, #16
 8003f94:	82bb      	strh	r3, [r7, #20]
 8003f96:	8abb      	ldrh	r3, [r7, #20]
 8003f98:	f083 0320 	eor.w	r3, r3, #32
 8003f9c:	82bb      	strh	r3, [r7, #20]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	8abb      	ldrh	r3, [r7, #20]
 8003fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3790      	adds	r7, #144	@ 0x90
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e009      	b.n	8004016 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004002:	897a      	ldrh	r2, [r7, #10]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004016:	893b      	ldrh	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	b29a      	uxth	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	80da      	strh	r2, [r3, #6]
 800402a:	e00b      	b.n	8004044 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2201      	movs	r2, #1
 8004030:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	b29a      	uxth	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	b29a      	uxth	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e272      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8087 	beq.w	800417e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004070:	4b92      	ldr	r3, [pc, #584]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b04      	cmp	r3, #4
 800407a:	d00c      	beq.n	8004096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800407c:	4b8f      	ldr	r3, [pc, #572]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b08      	cmp	r3, #8
 8004086:	d112      	bne.n	80040ae <HAL_RCC_OscConfig+0x5e>
 8004088:	4b8c      	ldr	r3, [pc, #560]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d10b      	bne.n	80040ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004096:	4b89      	ldr	r3, [pc, #548]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d06c      	beq.n	800417c <HAL_RCC_OscConfig+0x12c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d168      	bne.n	800417c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e24c      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x76>
 80040b8:	4b80      	ldr	r3, [pc, #512]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a7f      	ldr	r2, [pc, #508]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e02e      	b.n	8004124 <HAL_RCC_OscConfig+0xd4>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x98>
 80040ce:	4b7b      	ldr	r3, [pc, #492]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7a      	ldr	r2, [pc, #488]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b78      	ldr	r3, [pc, #480]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a77      	ldr	r2, [pc, #476]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e01d      	b.n	8004124 <HAL_RCC_OscConfig+0xd4>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0xbc>
 80040f2:	4b72      	ldr	r3, [pc, #456]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a71      	ldr	r2, [pc, #452]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4b6f      	ldr	r3, [pc, #444]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6e      	ldr	r2, [pc, #440]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0xd4>
 800410c:	4b6b      	ldr	r3, [pc, #428]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6a      	ldr	r2, [pc, #424]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	4b68      	ldr	r3, [pc, #416]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a67      	ldr	r2, [pc, #412]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800411e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fd f8e2 	bl	80012f4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fd f8de 	bl	80012f4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e200      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b5d      	ldr	r3, [pc, #372]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0xe4>
 8004152:	e014      	b.n	800417e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd f8ce 	bl	80012f4 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd f8ca 	bl	80012f4 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	@ 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e1ec      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x10c>
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d063      	beq.n	8004252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800418a:	4b4c      	ldr	r3, [pc, #304]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004196:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d11c      	bne.n	80041dc <HAL_RCC_OscConfig+0x18c>
 80041a2:	4b46      	ldr	r3, [pc, #280]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d116      	bne.n	80041dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ae:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_RCC_OscConfig+0x176>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d001      	beq.n	80041c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e1c0      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c6:	4b3d      	ldr	r3, [pc, #244]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4939      	ldr	r1, [pc, #228]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	e03a      	b.n	8004252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d020      	beq.n	8004226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e4:	4b36      	ldr	r3, [pc, #216]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7fd f883 	bl	80012f4 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f2:	f7fd f87f 	bl	80012f4 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e1a1      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	4b2d      	ldr	r3, [pc, #180]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b2a      	ldr	r3, [pc, #168]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4927      	ldr	r1, [pc, #156]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
 8004224:	e015      	b.n	8004252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004226:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd f862 	bl	80012f4 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004234:	f7fd f85e 	bl	80012f4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e180      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	4b1d      	ldr	r3, [pc, #116]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03a      	beq.n	80042d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d019      	beq.n	800429a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004266:	4b17      	ldr	r3, [pc, #92]	@ (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004268:	2201      	movs	r2, #1
 800426a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426c:	f7fd f842 	bl	80012f4 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004274:	f7fd f83e 	bl	80012f4 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e160      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004292:	2001      	movs	r0, #1
 8004294:	f000 face 	bl	8004834 <RCC_Delay>
 8004298:	e01c      	b.n	80042d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429a:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <HAL_RCC_OscConfig+0x274>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a0:	f7fd f828 	bl	80012f4 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a6:	e00f      	b.n	80042c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a8:	f7fd f824 	bl	80012f4 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d908      	bls.n	80042c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e146      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	42420000 	.word	0x42420000
 80042c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	4b92      	ldr	r3, [pc, #584]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e9      	bne.n	80042a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a6 	beq.w	800442e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4b88      	ldr	r3, [pc, #544]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4a87      	ldr	r2, [pc, #540]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	61d3      	str	r3, [r2, #28]
 80042fe:	4b85      	ldr	r3, [pc, #532]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b82      	ldr	r3, [pc, #520]	@ (8004518 <HAL_RCC_OscConfig+0x4c8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431a:	4b7f      	ldr	r3, [pc, #508]	@ (8004518 <HAL_RCC_OscConfig+0x4c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7e      	ldr	r2, [pc, #504]	@ (8004518 <HAL_RCC_OscConfig+0x4c8>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004326:	f7fc ffe5 	bl	80012f4 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432e:	f7fc ffe1 	bl	80012f4 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b64      	cmp	r3, #100	@ 0x64
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e103      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b75      	ldr	r3, [pc, #468]	@ (8004518 <HAL_RCC_OscConfig+0x4c8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x312>
 8004354:	4b6f      	ldr	r3, [pc, #444]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4a6e      	ldr	r2, [pc, #440]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6213      	str	r3, [r2, #32]
 8004360:	e02d      	b.n	80043be <HAL_RCC_OscConfig+0x36e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x334>
 800436a:	4b6a      	ldr	r3, [pc, #424]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a69      	ldr	r2, [pc, #420]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	4b67      	ldr	r3, [pc, #412]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a66      	ldr	r2, [pc, #408]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	6213      	str	r3, [r2, #32]
 8004382:	e01c      	b.n	80043be <HAL_RCC_OscConfig+0x36e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d10c      	bne.n	80043a6 <HAL_RCC_OscConfig+0x356>
 800438c:	4b61      	ldr	r3, [pc, #388]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4a60      	ldr	r2, [pc, #384]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004392:	f043 0304 	orr.w	r3, r3, #4
 8004396:	6213      	str	r3, [r2, #32]
 8004398:	4b5e      	ldr	r3, [pc, #376]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	4a5d      	ldr	r2, [pc, #372]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6213      	str	r3, [r2, #32]
 80043a4:	e00b      	b.n	80043be <HAL_RCC_OscConfig+0x36e>
 80043a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6213      	str	r3, [r2, #32]
 80043b2:	4b58      	ldr	r3, [pc, #352]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4a57      	ldr	r2, [pc, #348]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d015      	beq.n	80043f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fc ff95 	bl	80012f4 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fc ff91 	bl	80012f4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0b1      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ee      	beq.n	80043ce <HAL_RCC_OscConfig+0x37e>
 80043f0:	e014      	b.n	800441c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fc ff7f 	bl	80012f4 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fc ff7b 	bl	80012f4 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e09b      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004410:	4b40      	ldr	r3, [pc, #256]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ee      	bne.n	80043fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d105      	bne.n	800442e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004422:	4b3c      	ldr	r3, [pc, #240]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4a3b      	ldr	r2, [pc, #236]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800442c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8087 	beq.w	8004546 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004438:	4b36      	ldr	r3, [pc, #216]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d061      	beq.n	8004508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d146      	bne.n	80044da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444c:	4b33      	ldr	r3, [pc, #204]	@ (800451c <HAL_RCC_OscConfig+0x4cc>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fc ff4f 	bl	80012f4 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445a:	f7fc ff4b 	bl	80012f4 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e06d      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446c:	4b29      	ldr	r3, [pc, #164]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004480:	d108      	bne.n	8004494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004482:	4b24      	ldr	r3, [pc, #144]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4921      	ldr	r1, [pc, #132]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004494:	4b1f      	ldr	r3, [pc, #124]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a19      	ldr	r1, [r3, #32]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	430b      	orrs	r3, r1
 80044a6:	491b      	ldr	r1, [pc, #108]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ac:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x4cc>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fc ff1f 	bl	80012f4 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ba:	f7fc ff1b 	bl	80012f4 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e03d      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044cc:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x46a>
 80044d8:	e035      	b.n	8004546 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b10      	ldr	r3, [pc, #64]	@ (800451c <HAL_RCC_OscConfig+0x4cc>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fc ff08 	bl	80012f4 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fc ff04 	bl	80012f4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e026      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x498>
 8004506:	e01e      	b.n	8004546 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e019      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
 8004514:	40021000 	.word	0x40021000
 8004518:	40007000 	.word	0x40007000
 800451c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <HAL_RCC_OscConfig+0x500>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	429a      	cmp	r2, r3
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000

08004554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0d0      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	4b6a      	ldr	r3, [pc, #424]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d910      	bls.n	8004598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b67      	ldr	r3, [pc, #412]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0207 	bic.w	r2, r3, #7
 800457e:	4965      	ldr	r1, [pc, #404]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b63      	ldr	r3, [pc, #396]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0b8      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b0:	4b59      	ldr	r3, [pc, #356]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a58      	ldr	r2, [pc, #352]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c8:	4b53      	ldr	r3, [pc, #332]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a52      	ldr	r2, [pc, #328]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b50      	ldr	r3, [pc, #320]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	494d      	ldr	r1, [pc, #308]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d040      	beq.n	8004674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b47      	ldr	r3, [pc, #284]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d115      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07f      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004612:	4b41      	ldr	r3, [pc, #260]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e073      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004622:	4b3d      	ldr	r3, [pc, #244]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e06b      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004632:	4b39      	ldr	r3, [pc, #228]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f023 0203 	bic.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4936      	ldr	r1, [pc, #216]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	4313      	orrs	r3, r2
 8004642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004644:	f7fc fe56 	bl	80012f4 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	e00a      	b.n	8004662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fc fe52 	bl	80012f4 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e053      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	4b2d      	ldr	r3, [pc, #180]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 020c 	and.w	r2, r3, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	429a      	cmp	r2, r3
 8004672:	d1eb      	bne.n	800464c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004674:	4b27      	ldr	r3, [pc, #156]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d210      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b24      	ldr	r3, [pc, #144]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 0207 	bic.w	r2, r3, #7
 800468a:	4922      	ldr	r1, [pc, #136]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e032      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4916      	ldr	r1, [pc, #88]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ce:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	490e      	ldr	r1, [pc, #56]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046e2:	f000 f821 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	490a      	ldr	r1, [pc, #40]	@ (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	4a09      	ldr	r2, [pc, #36]	@ (8004720 <HAL_RCC_ClockConfig+0x1cc>)
 80046fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046fe:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <HAL_RCC_ClockConfig+0x1d0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fdb4 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40022000 	.word	0x40022000
 8004718:	40021000 	.word	0x40021000
 800471c:	0800da08 	.word	0x0800da08
 8004720:	20000000 	.word	0x20000000
 8004724:	20000004 	.word	0x20000004

08004728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004742:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d002      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x30>
 8004752:	2b08      	cmp	r3, #8
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x36>
 8004756:	e027      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004758:	4b19      	ldr	r3, [pc, #100]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800475a:	613b      	str	r3, [r7, #16]
      break;
 800475c:	e027      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	0c9b      	lsrs	r3, r3, #18
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	4a17      	ldr	r2, [pc, #92]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004768:	5cd3      	ldrb	r3, [r2, r3]
 800476a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004776:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	0c5b      	lsrs	r3, r3, #17
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	4a11      	ldr	r2, [pc, #68]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004782:	5cd3      	ldrb	r3, [r2, r3]
 8004784:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a0d      	ldr	r2, [pc, #52]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800478a:	fb03 f202 	mul.w	r2, r3, r2
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e004      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a0c      	ldr	r2, [pc, #48]	@ (80047cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	613b      	str	r3, [r7, #16]
      break;
 80047a6:	e002      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80047aa:	613b      	str	r3, [r7, #16]
      break;
 80047ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ae:	693b      	ldr	r3, [r7, #16]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	007a1200 	.word	0x007a1200
 80047c4:	0800da20 	.word	0x0800da20
 80047c8:	0800da30 	.word	0x0800da30
 80047cc:	003d0900 	.word	0x003d0900

080047d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b02      	ldr	r3, [pc, #8]	@ (80047e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	20000000 	.word	0x20000000

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047e8:	f7ff fff2 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	@ (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	0800da18 	.word	0x0800da18

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004810:	f7ff ffde 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	0adb      	lsrs	r3, r3, #11
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4903      	ldr	r1, [pc, #12]	@ (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000
 8004830:	0800da18 	.word	0x0800da18

08004834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800483c:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <RCC_Delay+0x34>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a0a      	ldr	r2, [pc, #40]	@ (800486c <RCC_Delay+0x38>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	0a5b      	lsrs	r3, r3, #9
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	fb02 f303 	mul.w	r3, r2, r3
 800484e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004850:	bf00      	nop
  }
  while (Delay --);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	60fa      	str	r2, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f9      	bne.n	8004850 <RCC_Delay+0x1c>
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	20000000 	.word	0x20000000
 800486c:	10624dd3 	.word	0x10624dd3

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d07d      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800488c:	2300      	movs	r3, #0
 800488e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004890:	4b4f      	ldr	r3, [pc, #316]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10d      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	4b4c      	ldr	r3, [pc, #304]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	4a4b      	ldr	r2, [pc, #300]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	61d3      	str	r3, [r2, #28]
 80048a8:	4b49      	ldr	r3, [pc, #292]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b4:	2301      	movs	r3, #1
 80048b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b8:	4b46      	ldr	r3, [pc, #280]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d118      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c4:	4b43      	ldr	r3, [pc, #268]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a42      	ldr	r2, [pc, #264]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d0:	f7fc fd10 	bl	80012f4 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	e008      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d8:	f7fc fd0c 	bl	80012f4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	@ 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e06d      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ea:	4b3a      	ldr	r3, [pc, #232]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048f6:	4b36      	ldr	r3, [pc, #216]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02e      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	429a      	cmp	r2, r3
 8004912:	d027      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004914:	4b2e      	ldr	r3, [pc, #184]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800491e:	4b2e      	ldr	r3, [pc, #184]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004924:	4b2c      	ldr	r3, [pc, #176]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800492a:	4a29      	ldr	r2, [pc, #164]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d014      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493a:	f7fc fcdb 	bl	80012f4 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	e00a      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc fcd7 	bl	80012f4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e036      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004958:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0ee      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004964:	4b1a      	ldr	r3, [pc, #104]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4917      	ldr	r1, [pc, #92]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	4313      	orrs	r3, r2
 8004974:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004976:	7dfb      	ldrb	r3, [r7, #23]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d105      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497c:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4a13      	ldr	r2, [pc, #76]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004986:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004994:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	490b      	ldr	r1, [pc, #44]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b2:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4904      	ldr	r1, [pc, #16]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40007000 	.word	0x40007000
 80049d8:	42420440 	.word	0x42420440

080049dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e042      	b.n	8004a74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc fbac 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2224      	movs	r2, #36	@ 0x24
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f82b 	bl	8004a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ab6:	f023 030c 	bic.w	r3, r3, #12
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2c      	ldr	r2, [pc, #176]	@ (8004b90 <UART_SetConfig+0x114>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d103      	bne.n	8004aec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7ff fe92 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	e002      	b.n	8004af2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004aec:	f7ff fe7a 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8004af0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	441a      	add	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	4a22      	ldr	r2, [pc, #136]	@ (8004b94 <UART_SetConfig+0x118>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	0119      	lsls	r1, r3, #4
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b28:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <UART_SetConfig+0x118>)
 8004b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2064      	movs	r0, #100	@ 0x64
 8004b32:	fb00 f303 	mul.w	r3, r0, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	3332      	adds	r3, #50	@ 0x32
 8004b3c:	4a15      	ldr	r2, [pc, #84]	@ (8004b94 <UART_SetConfig+0x118>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b48:	4419      	add	r1, r3
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009a      	lsls	r2, r3, #2
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <UART_SetConfig+0x118>)
 8004b62:	fba3 0302 	umull	r0, r3, r3, r2
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	2064      	movs	r0, #100	@ 0x64
 8004b6a:	fb00 f303 	mul.w	r3, r0, r3
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	3332      	adds	r3, #50	@ 0x32
 8004b74:	4a07      	ldr	r2, [pc, #28]	@ (8004b94 <UART_SetConfig+0x118>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	f003 020f 	and.w	r2, r3, #15
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	440a      	add	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40013800 	.word	0x40013800
 8004b94:	51eb851f 	.word	0x51eb851f

08004b98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b98:	b084      	sub	sp, #16
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	f107 0014 	add.w	r0, r7, #20
 8004ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	b004      	add	sp, #16
 8004bb6:	4770      	bx	lr

08004bb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bc8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004bcc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bec:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004bf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	4013      	ands	r3, r2
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c30:	b084      	sub	sp, #16
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	f107 0014 	add.w	r0, r7, #20
 8004c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	b004      	add	sp, #16
 8004c6e:	4770      	bx	lr

08004c70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b09d      	sub	sp, #116	@ 0x74
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c96:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	78db      	ldrb	r3, [r3, #3]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d81f      	bhi.n	8004ce2 <USB_ActivateEndpoint+0x72>
 8004ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca8 <USB_ActivateEndpoint+0x38>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004ceb 	.word	0x08004ceb
 8004cb4:	08004cc7 	.word	0x08004cc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004cc4:	e012      	b.n	8004cec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004cce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004cd2:	e00b      	b.n	8004cec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004cd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cdc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004ce0:	e004      	b.n	8004cec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004ce8:	e000      	b.n	8004cec <USB_ActivateEndpoint+0x7c>
      break;
 8004cea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	7812      	ldrb	r2, [r2, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	7b1b      	ldrb	r3, [r3, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 8178 	bne.w	800504c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8084 	beq.w	8004e6e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	4413      	add	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	011a      	lsls	r2, r3, #4
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	88db      	ldrh	r3, [r3, #6]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	827b      	strh	r3, [r7, #18]
 8004da8:	8a7b      	ldrh	r3, [r7, #18]
 8004daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01b      	beq.n	8004dea <USB_ActivateEndpoint+0x17a>
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc8:	823b      	strh	r3, [r7, #16]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8a3b      	ldrh	r3, [r7, #16]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d020      	beq.n	8004e34 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e08:	81bb      	strh	r3, [r7, #12]
 8004e0a:	89bb      	ldrh	r3, [r7, #12]
 8004e0c:	f083 0320 	eor.w	r3, r3, #32
 8004e10:	81bb      	strh	r3, [r7, #12]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	89bb      	ldrh	r3, [r7, #12]
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]
 8004e32:	e2d5      	b.n	80053e0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e4a:	81fb      	strh	r3, [r7, #14]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	8013      	strh	r3, [r2, #0]
 8004e6c:	e2b8      	b.n	80053e0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7e:	4413      	add	r3, r2
 8004e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	011a      	lsls	r2, r3, #4
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	88db      	ldrh	r3, [r3, #6]
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	4413      	add	r3, r2
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	011a      	lsls	r2, r3, #4
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b3e      	cmp	r3, #62	@ 0x3e
 8004edc:	d91d      	bls.n	8004f1a <USB_ActivateEndpoint+0x2aa>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <USB_ActivateEndpoint+0x288>
 8004ef2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	029b      	lsls	r3, r3, #10
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	e026      	b.n	8004f68 <USB_ActivateEndpoint+0x2f8>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <USB_ActivateEndpoint+0x2c8>
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	e017      	b.n	8004f68 <USB_ActivateEndpoint+0x2f8>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <USB_ActivateEndpoint+0x2e2>
 8004f4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f4e:	3301      	adds	r3, #1
 8004f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	4313      	orrs	r3, r2
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004f76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01b      	beq.n	8004fb8 <USB_ActivateEndpoint+0x348>
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	843b      	strh	r3, [r7, #32]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	8c3b      	ldrh	r3, [r7, #32]
 8004fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d124      	bne.n	800500a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd6:	83bb      	strh	r3, [r7, #28]
 8004fd8:	8bbb      	ldrh	r3, [r7, #28]
 8004fda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fde:	83bb      	strh	r3, [r7, #28]
 8004fe0:	8bbb      	ldrh	r3, [r7, #28]
 8004fe2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fe6:	83bb      	strh	r3, [r7, #28]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	8bbb      	ldrh	r3, [r7, #28]
 8004ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005004:	b29b      	uxth	r3, r3
 8005006:	8013      	strh	r3, [r2, #0]
 8005008:	e1ea      	b.n	80053e0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800501c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005020:	83fb      	strh	r3, [r7, #30]
 8005022:	8bfb      	ldrh	r3, [r7, #30]
 8005024:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005028:	83fb      	strh	r3, [r7, #30]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	8bfb      	ldrh	r3, [r7, #30]
 8005036:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800503a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800503e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005046:	b29b      	uxth	r3, r3
 8005048:	8013      	strh	r3, [r2, #0]
 800504a:	e1c9      	b.n	80053e0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	78db      	ldrb	r3, [r3, #3]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d11e      	bne.n	8005092 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	441a      	add	r2, r3
 8005078:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005084:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
 8005090:	e01d      	b.n	80050ce <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80050a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80050ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050de:	4413      	add	r3, r2
 80050e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	011a      	lsls	r2, r3, #4
 80050e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	891b      	ldrh	r3, [r3, #8]
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	657b      	str	r3, [r7, #84]	@ 0x54
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800510c:	b29b      	uxth	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005112:	4413      	add	r3, r2
 8005114:	657b      	str	r3, [r7, #84]	@ 0x54
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	011a      	lsls	r2, r3, #4
 800511c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511e:	4413      	add	r3, r2
 8005120:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005124:	653b      	str	r3, [r7, #80]	@ 0x50
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	895b      	ldrh	r3, [r3, #10]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	b29b      	uxth	r3, r3
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005134:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 8093 	bne.w	8005266 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005150:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01b      	beq.n	8005194 <USB_ActivateEndpoint+0x524>
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800516e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005172:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005188:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800518c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80051a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80051a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <USB_ActivateEndpoint+0x574>
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80051d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80051fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80051fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005202:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005204:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005206:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800520a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800521c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800523e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005242:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
 8005264:	e0bc      	b.n	80053e0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800527a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01d      	beq.n	80052be <USB_ActivateEndpoint+0x64e>
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005298:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80052ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80052d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01d      	beq.n	8005316 <USB_ActivateEndpoint+0x6a6>
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	441a      	add	r2, r3
 80052fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800530e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	78db      	ldrb	r3, [r3, #3]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d024      	beq.n	8005368 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005334:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005338:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800533c:	f083 0320 	eor.w	r3, r3, #32
 8005340:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800535a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800535e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]
 8005366:	e01d      	b.n	80053a4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800537e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800539c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80053e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3774      	adds	r7, #116	@ 0x74
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop

080053f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b08d      	sub	sp, #52	@ 0x34
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	7b1b      	ldrb	r3, [r3, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f040 808e 	bne.w	8005520 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d044      	beq.n	8005496 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	81bb      	strh	r3, [r7, #12]
 800541a:	89bb      	ldrh	r3, [r7, #12]
 800541c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <USB_DeactivateEndpoint+0x6c>
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543a:	817b      	strh	r3, [r7, #10]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	441a      	add	r2, r3
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800544c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005454:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005458:	b29b      	uxth	r3, r3
 800545a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005472:	813b      	strh	r3, [r7, #8]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	893b      	ldrh	r3, [r7, #8]
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]
 8005494:	e192      	b.n	80057bc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	827b      	strh	r3, [r7, #18]
 80054a4:	8a7b      	ldrh	r3, [r7, #18]
 80054a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01b      	beq.n	80054e6 <USB_DeactivateEndpoint+0xf6>
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	823b      	strh	r3, [r7, #16]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8a3b      	ldrh	r3, [r7, #16]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fc:	81fb      	strh	r3, [r7, #14]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	89fb      	ldrh	r3, [r7, #14]
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]
 800551e:	e14d      	b.n	80057bc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 80a5 	bne.w	8005674 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	843b      	strh	r3, [r7, #32]
 8005538:	8c3b      	ldrh	r3, [r7, #32]
 800553a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01b      	beq.n	800557a <USB_DeactivateEndpoint+0x18a>
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005558:	83fb      	strh	r3, [r7, #30]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	8bfb      	ldrh	r3, [r7, #30]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	83bb      	strh	r3, [r7, #28]
 8005588:	8bbb      	ldrh	r3, [r7, #28]
 800558a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01b      	beq.n	80055ca <USB_DeactivateEndpoint+0x1da>
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a8:	837b      	strh	r3, [r7, #26]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	8b7b      	ldrh	r3, [r7, #26]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e0:	833b      	strh	r3, [r7, #24]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	441a      	add	r2, r3
 80055ec:	8b3b      	ldrh	r3, [r7, #24]
 80055ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005618:	82fb      	strh	r3, [r7, #22]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	8afb      	ldrh	r3, [r7, #22]
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800564c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005650:	82bb      	strh	r3, [r7, #20]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	8abb      	ldrh	r3, [r7, #20]
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800566a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]
 8005672:	e0a3      	b.n	80057bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005682:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01b      	beq.n	80056c4 <USB_DeactivateEndpoint+0x2d4>
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80056d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01b      	beq.n	8005714 <USB_DeactivateEndpoint+0x324>
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800570c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005710:	b29b      	uxth	r3, r3
 8005712:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005740:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800575e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005762:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	441a      	add	r2, r3
 800576e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800577c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80057a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3734      	adds	r7, #52	@ 0x34
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b0c2      	sub	sp, #264	@ 0x108
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d6:	6018      	str	r0, [r3, #0]
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	f040 86b7 	bne.w	8006562 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	429a      	cmp	r2, r3
 800580e:	d908      	bls.n	8005822 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005820:	e007      	b.n	8005832 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	7b1b      	ldrb	r3, [r3, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d13a      	bne.n	80058b8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6959      	ldr	r1, [r3, #20]
 800584e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	88da      	ldrh	r2, [r3, #6]
 800585a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585e:	b29b      	uxth	r3, r3
 8005860:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005864:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005868:	6800      	ldr	r0, [r0, #0]
 800586a:	f001 fc9c 	bl	80071a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800586e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	011a      	lsls	r2, r3, #4
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4413      	add	r3, r2
 80058a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	f000 be1f 	b.w	80064f6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	78db      	ldrb	r3, [r3, #3]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	f040 8462 	bne.w	800618e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6a1a      	ldr	r2, [r3, #32]
 80058d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	f240 83df 	bls.w	80060a6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800590a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005938:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800593c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005954:	1ad2      	subs	r2, r2, r3
 8005956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005966:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 81c7 	beq.w	8005d18 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800598a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d177      	bne.n	8005a96 <USB_EPStartXfer+0x2ce>
 80059a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	4413      	add	r3, r2
 80059c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	011a      	lsls	r2, r3, #4
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	4413      	add	r3, r2
 80059dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80059f8:	d921      	bls.n	8005a3e <USB_EPStartXfer+0x276>
 80059fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a08:	f003 031f 	and.w	r3, r3, #31
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <USB_EPStartXfer+0x252>
 8005a10:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a14:	3b01      	subs	r3, #1
 8005a16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	029b      	lsls	r3, r3, #10
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	801a      	strh	r2, [r3, #0]
 8005a3c:	e050      	b.n	8005ae0 <USB_EPStartXfer+0x318>
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <USB_EPStartXfer+0x294>
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	e041      	b.n	8005ae0 <USB_EPStartXfer+0x318>
 8005a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <USB_EPStartXfer+0x2b4>
 8005a72:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a76:	3301      	adds	r3, #1
 8005a78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	e024      	b.n	8005ae0 <USB_EPStartXfer+0x318>
 8005a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d11c      	bne.n	8005ae0 <USB_EPStartXfer+0x318>
 8005aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	4413      	add	r3, r2
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	011a      	lsls	r2, r3, #4
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	4413      	add	r3, r2
 8005ad0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	895b      	ldrh	r3, [r3, #10]
 8005aec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6959      	ldr	r1, [r3, #20]
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b0e:	6800      	ldr	r0, [r0, #0]
 8005b10:	f001 fb49 	bl	80071a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b24:	441a      	add	r2, r3
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6a1a      	ldr	r2, [r3, #32]
 8005b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d90f      	bls.n	8005b6e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a1a      	ldr	r2, [r3, #32]
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	621a      	str	r2, [r3, #32]
 8005b6c:	e00e      	b.n	8005b8c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d177      	bne.n	8005c8c <USB_EPStartXfer+0x4c4>
 8005b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	011a      	lsls	r2, r3, #4
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bec:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bee:	d921      	bls.n	8005c34 <USB_EPStartXfer+0x46c>
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <USB_EPStartXfer+0x448>
 8005c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	4313      	orrs	r3, r2
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e056      	b.n	8005ce2 <USB_EPStartXfer+0x51a>
 8005c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <USB_EPStartXfer+0x48a>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e047      	b.n	8005ce2 <USB_EPStartXfer+0x51a>
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <USB_EPStartXfer+0x4aa>
 8005c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	029b      	lsls	r3, r3, #10
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	e02a      	b.n	8005ce2 <USB_EPStartXfer+0x51a>
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d122      	bne.n	8005ce2 <USB_EPStartXfer+0x51a>
 8005c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	623b      	str	r3, [r7, #32]
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	623b      	str	r3, [r7, #32]
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	011a      	lsls	r2, r3, #4
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cd6:	61fb      	str	r3, [r7, #28]
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	891b      	ldrh	r3, [r3, #8]
 8005cee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6959      	ldr	r1, [r3, #20]
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d08:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d0c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d10:	6800      	ldr	r0, [r0, #0]
 8005d12:	f001 fa48 	bl	80071a6 <USB_WritePMA>
 8005d16:	e3ee      	b.n	80064f6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d177      	bne.n	8005e18 <USB_EPStartXfer+0x650>
 8005d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d48:	4413      	add	r3, r2
 8005d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	011a      	lsls	r2, r3, #4
 8005d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d78:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d7a:	d921      	bls.n	8005dc0 <USB_EPStartXfer+0x5f8>
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <USB_EPStartXfer+0x5d4>
 8005d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d96:	3b01      	subs	r3, #1
 8005d98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4313      	orrs	r3, r2
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e056      	b.n	8005e6e <USB_EPStartXfer+0x6a6>
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <USB_EPStartXfer+0x616>
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	e047      	b.n	8005e6e <USB_EPStartXfer+0x6a6>
 8005dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <USB_EPStartXfer+0x636>
 8005df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005df8:	3301      	adds	r3, #1
 8005dfa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e02a      	b.n	8005e6e <USB_EPStartXfer+0x6a6>
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d122      	bne.n	8005e6e <USB_EPStartXfer+0x6a6>
 8005e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e48:	4413      	add	r3, r2
 8005e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	011a      	lsls	r2, r3, #4
 8005e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	891b      	ldrh	r3, [r3, #8]
 8005e7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6959      	ldr	r1, [r3, #20]
 8005e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e94:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e98:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e9c:	6800      	ldr	r0, [r0, #0]
 8005e9e:	f001 f982 	bl	80071a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb2:	441a      	add	r2, r3
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6a1a      	ldr	r2, [r3, #32]
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d90f      	bls.n	8005efc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6a1a      	ldr	r2, [r3, #32]
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eec:	1ad2      	subs	r2, r2, r3
 8005eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	621a      	str	r2, [r3, #32]
 8005efa:	e00e      	b.n	8005f1a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d177      	bne.n	8006026 <USB_EPStartXfer+0x85e>
 8005f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f56:	4413      	add	r3, r2
 8005f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	011a      	lsls	r2, r3, #4
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f86:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f88:	d921      	bls.n	8005fce <USB_EPStartXfer+0x806>
 8005f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <USB_EPStartXfer+0x7e2>
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	029b      	lsls	r3, r3, #10
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	e050      	b.n	8006070 <USB_EPStartXfer+0x8a8>
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <USB_EPStartXfer+0x824>
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e041      	b.n	8006070 <USB_EPStartXfer+0x8a8>
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d004      	beq.n	800600c <USB_EPStartXfer+0x844>
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006006:	3301      	adds	r3, #1
 8006008:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29a      	uxth	r2, r3
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006016:	b29b      	uxth	r3, r3
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	b29b      	uxth	r3, r3
 800601c:	4313      	orrs	r3, r2
 800601e:	b29a      	uxth	r2, r3
 8006020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e024      	b.n	8006070 <USB_EPStartXfer+0x8a8>
 8006026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d11c      	bne.n	8006070 <USB_EPStartXfer+0x8a8>
 8006036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800604a:	4413      	add	r3, r2
 800604c:	643b      	str	r3, [r7, #64]	@ 0x40
 800604e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	011a      	lsls	r2, r3, #4
 800605c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800605e:	4413      	add	r3, r2
 8006060:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606a:	b29a      	uxth	r2, r3
 800606c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	895b      	ldrh	r3, [r3, #10]
 800607c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6959      	ldr	r1, [r3, #20]
 800608c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006090:	b29b      	uxth	r3, r3
 8006092:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006096:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800609a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800609e:	6800      	ldr	r0, [r0, #0]
 80060a0:	f001 f881 	bl	80071a6 <USB_WritePMA>
 80060a4:	e227      	b.n	80064f6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80060a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80060d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060dc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80060e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800610a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800611e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612c:	b29b      	uxth	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006132:	4413      	add	r3, r2
 8006134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	011a      	lsls	r2, r3, #4
 8006144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006146:	4413      	add	r3, r2
 8006148:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800614c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	b29a      	uxth	r2, r3
 8006154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006156:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	891b      	ldrh	r3, [r3, #8]
 8006164:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6959      	ldr	r1, [r3, #20]
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006178:	b29b      	uxth	r3, r3
 800617a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800617e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006182:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006186:	6800      	ldr	r0, [r0, #0]
 8006188:	f001 f80d 	bl	80071a6 <USB_WritePMA>
 800618c:	e1b3      	b.n	80064f6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800618e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619e:	1ad2      	subs	r2, r2, r3
 80061a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80c6 	beq.w	8006360 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	673b      	str	r3, [r7, #112]	@ 0x70
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d177      	bne.n	80062e0 <USB_EPStartXfer+0xb18>
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006210:	4413      	add	r3, r2
 8006212:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	011a      	lsls	r2, r3, #4
 8006222:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006224:	4413      	add	r3, r2
 8006226:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800622a:	667b      	str	r3, [r7, #100]	@ 0x64
 800622c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006236:	b29a      	uxth	r2, r3
 8006238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006240:	2b3e      	cmp	r3, #62	@ 0x3e
 8006242:	d921      	bls.n	8006288 <USB_EPStartXfer+0xac0>
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <USB_EPStartXfer+0xa9c>
 800625a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800625e:	3b01      	subs	r3, #1
 8006260:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800626e:	b29b      	uxth	r3, r3
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	b29b      	uxth	r3, r3
 8006274:	4313      	orrs	r3, r2
 8006276:	b29b      	uxth	r3, r3
 8006278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006280:	b29a      	uxth	r2, r3
 8006282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e050      	b.n	800632a <USB_EPStartXfer+0xb62>
 8006288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <USB_EPStartXfer+0xade>
 8006290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e041      	b.n	800632a <USB_EPStartXfer+0xb62>
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <USB_EPStartXfer+0xafe>
 80062bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062c0:	3301      	adds	r3, #1
 80062c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b29a      	uxth	r2, r3
 80062da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e024      	b.n	800632a <USB_EPStartXfer+0xb62>
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d11c      	bne.n	800632a <USB_EPStartXfer+0xb62>
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006304:	4413      	add	r3, r2
 8006306:	673b      	str	r3, [r7, #112]	@ 0x70
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	011a      	lsls	r2, r3, #4
 8006316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006318:	4413      	add	r3, r2
 800631a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800631e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	b29a      	uxth	r2, r3
 8006326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006328:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	895b      	ldrh	r3, [r3, #10]
 8006336:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800633a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6959      	ldr	r1, [r3, #20]
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634a:	b29b      	uxth	r3, r3
 800634c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006350:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006354:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006358:	6800      	ldr	r0, [r0, #0]
 800635a:	f000 ff24 	bl	80071a6 <USB_WritePMA>
 800635e:	e0ca      	b.n	80064f6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d177      	bne.n	8006460 <USB_EPStartXfer+0xc98>
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800637c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800638a:	b29b      	uxth	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006390:	4413      	add	r3, r2
 8006392:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	011a      	lsls	r2, r3, #4
 80063a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80063c2:	d921      	bls.n	8006408 <USB_EPStartXfer+0xc40>
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <USB_EPStartXfer+0xc1c>
 80063da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80063de:	3b01      	subs	r3, #1
 80063e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4313      	orrs	r3, r2
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	e05c      	b.n	80064c2 <USB_EPStartXfer+0xcfa>
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <USB_EPStartXfer+0xc5e>
 8006410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641e:	b29a      	uxth	r2, r3
 8006420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e04d      	b.n	80064c2 <USB_EPStartXfer+0xcfa>
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <USB_EPStartXfer+0xc7e>
 800643c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006440:	3301      	adds	r3, #1
 8006442:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29a      	uxth	r2, r3
 800644c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006450:	b29b      	uxth	r3, r3
 8006452:	029b      	lsls	r3, r3, #10
 8006454:	b29b      	uxth	r3, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	b29a      	uxth	r2, r3
 800645a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	e030      	b.n	80064c2 <USB_EPStartXfer+0xcfa>
 8006460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d128      	bne.n	80064c2 <USB_EPStartXfer+0xcfa>
 8006470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648c:	b29b      	uxth	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006494:	4413      	add	r3, r2
 8006496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	011a      	lsls	r2, r3, #4
 80064a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064ac:	4413      	add	r3, r2
 80064ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	891b      	ldrh	r3, [r3, #8]
 80064ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6959      	ldr	r1, [r3, #20]
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064f0:	6800      	ldr	r0, [r0, #0]
 80064f2:	f000 fe58 	bl	80071a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	897b      	ldrh	r3, [r7, #10]
 8006520:	f083 0310 	eor.w	r3, r3, #16
 8006524:	817b      	strh	r3, [r7, #10]
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	f083 0320 	eor.w	r3, r3, #32
 800652c:	817b      	strh	r3, [r7, #10]
 800652e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	897b      	ldrh	r3, [r7, #10]
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]
 800655e:	f000 bcde 	b.w	8006f1e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	7b1b      	ldrb	r3, [r3, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 80bb 	bne.w	80066ea <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699a      	ldr	r2, [r3, #24]
 8006580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	429a      	cmp	r2, r3
 800658e:	d917      	bls.n	80065c0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b0:	1ad2      	subs	r2, r2, r3
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	619a      	str	r2, [r3, #24]
 80065be:	e00e      	b.n	80065de <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80065c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80065d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80065de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006602:	4413      	add	r3, r2
 8006604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800661a:	4413      	add	r3, r2
 800661c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006630:	b29a      	uxth	r2, r3
 8006632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663c:	2b3e      	cmp	r3, #62	@ 0x3e
 800663e:	d924      	bls.n	800668a <USB_EPStartXfer+0xec2>
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <USB_EPStartXfer+0xe98>
 8006656:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800665a:	3b01      	subs	r3, #1
 800665c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29a      	uxth	r2, r3
 8006668:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800666c:	b29b      	uxth	r3, r3
 800666e:	029b      	lsls	r3, r3, #10
 8006670:	b29b      	uxth	r3, r3
 8006672:	4313      	orrs	r3, r2
 8006674:	b29b      	uxth	r3, r3
 8006676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667e:	b29a      	uxth	r2, r3
 8006680:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	f000 bc10 	b.w	8006eaa <USB_EPStartXfer+0x16e2>
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10c      	bne.n	80066ac <USB_EPStartXfer+0xee4>
 8006692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e3fe      	b.n	8006eaa <USB_EPStartXfer+0x16e2>
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <USB_EPStartXfer+0xf04>
 80066c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066c6:	3301      	adds	r3, #1
 80066c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066d8:	b29b      	uxth	r3, r3
 80066da:	029b      	lsls	r3, r3, #10
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4313      	orrs	r3, r2
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	e3df      	b.n	8006eaa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80066ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	78db      	ldrb	r3, [r3, #3]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	f040 8218 	bne.w	8006b2c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f040 809d 	bne.w	8006848 <USB_EPStartXfer+0x1080>
 800670e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800671c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672a:	b29b      	uxth	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006732:	4413      	add	r3, r2
 8006734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	011a      	lsls	r2, r3, #4
 8006746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800674a:	4413      	add	r3, r2
 800674c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b3e      	cmp	r3, #62	@ 0x3e
 8006776:	d92b      	bls.n	80067d0 <USB_EPStartXfer+0x1008>
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <USB_EPStartXfer+0xfe0>
 800679e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a2:	3b01      	subs	r3, #1
 80067a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b29b      	uxth	r3, r3
 80067be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e070      	b.n	80068b2 <USB_EPStartXfer+0x10ea>
 80067d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10c      	bne.n	80067fa <USB_EPStartXfer+0x1032>
 80067e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067f6:	801a      	strh	r2, [r3, #0]
 80067f8:	e05b      	b.n	80068b2 <USB_EPStartXfer+0x10ea>
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	085b      	lsrs	r3, r3, #1
 8006808:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800680c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <USB_EPStartXfer+0x1062>
 8006820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006824:	3301      	adds	r3, #1
 8006826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800682a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29a      	uxth	r2, r3
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006836:	b29b      	uxth	r3, r3
 8006838:	029b      	lsls	r3, r3, #10
 800683a:	b29b      	uxth	r3, r3
 800683c:	4313      	orrs	r3, r2
 800683e:	b29a      	uxth	r2, r3
 8006840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	e034      	b.n	80068b2 <USB_EPStartXfer+0x10ea>
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d12c      	bne.n	80068b2 <USB_EPStartXfer+0x10ea>
 8006858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006874:	b29b      	uxth	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800687c:	4413      	add	r3, r2
 800687e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	011a      	lsls	r2, r3, #4
 8006890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006894:	4413      	add	r3, r2
 8006896:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800689a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800689e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 809d 	bne.w	8006a0c <USB_EPStartXfer+0x1244>
 80068d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068f6:	4413      	add	r3, r2
 80068f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	011a      	lsls	r2, r3, #4
 800690a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800690e:	4413      	add	r3, r2
 8006910:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006924:	b29a      	uxth	r2, r3
 8006926:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800692a:	801a      	strh	r2, [r3, #0]
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b3e      	cmp	r3, #62	@ 0x3e
 800693a:	d92b      	bls.n	8006994 <USB_EPStartXfer+0x11cc>
 800693c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800694e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2b00      	cmp	r3, #0
 8006960:	d104      	bne.n	800696c <USB_EPStartXfer+0x11a4>
 8006962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006966:	3b01      	subs	r3, #1
 8006968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800696c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29a      	uxth	r2, r3
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006978:	b29b      	uxth	r3, r3
 800697a:	029b      	lsls	r3, r3, #10
 800697c:	b29b      	uxth	r3, r3
 800697e:	4313      	orrs	r3, r2
 8006980:	b29b      	uxth	r3, r3
 8006982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	e069      	b.n	8006a68 <USB_EPStartXfer+0x12a0>
 8006994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10c      	bne.n	80069be <USB_EPStartXfer+0x11f6>
 80069a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e054      	b.n	8006a68 <USB_EPStartXfer+0x12a0>
 80069be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <USB_EPStartXfer+0x1226>
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e8:	3301      	adds	r3, #1
 80069ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	029b      	lsls	r3, r3, #10
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	4313      	orrs	r3, r2
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a08:	801a      	strh	r2, [r3, #0]
 8006a0a:	e02d      	b.n	8006a68 <USB_EPStartXfer+0x12a0>
 8006a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d125      	bne.n	8006a68 <USB_EPStartXfer+0x12a0>
 8006a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a32:	4413      	add	r3, r2
 8006a34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	011a      	lsls	r2, r3, #4
 8006a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a66:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8218 	beq.w	8006eaa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <USB_EPStartXfer+0x12ea>
 8006aa6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10d      	bne.n	8006ace <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ab2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 81f5 	bne.w	8006eaa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ac0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f040 81ee 	bne.w	8006eaa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
 8006b2a:	e1be      	b.n	8006eaa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	78db      	ldrb	r3, [r3, #3]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	f040 81b4 	bne.w	8006ea6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d917      	bls.n	8006b8a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	619a      	str	r2, [r3, #24]
 8006b88:	e00e      	b.n	8006ba8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 8085 	bne.w	8006cc4 <USB_EPStartXfer+0x14fc>
 8006bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bde:	4413      	add	r3, r2
 8006be0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	011a      	lsls	r2, r3, #4
 8006bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c1a:	d923      	bls.n	8006c64 <USB_EPStartXfer+0x149c>
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	f003 031f 	and.w	r3, r3, #31
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <USB_EPStartXfer+0x1474>
 8006c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c36:	3b01      	subs	r3, #1
 8006c38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	029b      	lsls	r3, r3, #10
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c60:	801a      	strh	r2, [r3, #0]
 8006c62:	e060      	b.n	8006d26 <USB_EPStartXfer+0x155e>
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10c      	bne.n	8006c86 <USB_EPStartXfer+0x14be>
 8006c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	e04f      	b.n	8006d26 <USB_EPStartXfer+0x155e>
 8006c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <USB_EPStartXfer+0x14de>
 8006c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	029b      	lsls	r3, r3, #10
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e030      	b.n	8006d26 <USB_EPStartXfer+0x155e>
 8006cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d128      	bne.n	8006d26 <USB_EPStartXfer+0x155e>
 8006cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	011a      	lsls	r2, r3, #4
 8006d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d10:	4413      	add	r3, r2
 8006d12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 8085 	bne.w	8006e50 <USB_EPStartXfer+0x1688>
 8006d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	011a      	lsls	r2, r3, #4
 8006d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006da6:	d923      	bls.n	8006df0 <USB_EPStartXfer+0x1628>
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d104      	bne.n	8006dc8 <USB_EPStartXfer+0x1600>
 8006dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	029b      	lsls	r3, r3, #10
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e05c      	b.n	8006eaa <USB_EPStartXfer+0x16e2>
 8006df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10c      	bne.n	8006e12 <USB_EPStartXfer+0x164a>
 8006df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	e04b      	b.n	8006eaa <USB_EPStartXfer+0x16e2>
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d004      	beq.n	8006e32 <USB_EPStartXfer+0x166a>
 8006e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	4313      	orrs	r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	e02c      	b.n	8006eaa <USB_EPStartXfer+0x16e2>
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d124      	bne.n	8006eaa <USB_EPStartXfer+0x16e2>
 8006e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e76:	4413      	add	r3, r2
 8006e78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	011a      	lsls	r2, r3, #4
 8006e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e8e:	4413      	add	r3, r2
 8006e90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e001      	b.n	8006eaa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e03a      	b.n	8006f20 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ed4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ed8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006edc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ee0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ee4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ee8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	441a      	add	r2, r3
 8006f06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d020      	beq.n	8006f7e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f52:	81bb      	strh	r3, [r7, #12]
 8006f54:	89bb      	ldrh	r3, [r7, #12]
 8006f56:	f083 0310 	eor.w	r3, r3, #16
 8006f5a:	81bb      	strh	r3, [r7, #12]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	441a      	add	r2, r3
 8006f66:	89bb      	ldrh	r3, [r7, #12]
 8006f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	8013      	strh	r3, [r2, #0]
 8006f7c:	e01f      	b.n	8006fbe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f94:	81fb      	strh	r3, [r7, #14]
 8006f96:	89fb      	ldrh	r3, [r7, #14]
 8006f98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f9c:	81fb      	strh	r3, [r7, #14]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	89fb      	ldrh	r3, [r7, #14]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b087      	sub	sp, #28
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	7b1b      	ldrb	r3, [r3, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 809d 	bne.w	8007118 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d04c      	beq.n	8007080 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	823b      	strh	r3, [r7, #16]
 8006ff4:	8a3b      	ldrh	r3, [r7, #16]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d01b      	beq.n	8007036 <USB_EPClearStall+0x6c>
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007014:	81fb      	strh	r3, [r7, #14]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	441a      	add	r2, r3
 8007020:	89fb      	ldrh	r3, [r7, #14]
 8007022:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007026:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800702a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800702e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007032:	b29b      	uxth	r3, r3
 8007034:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	78db      	ldrb	r3, [r3, #3]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d06c      	beq.n	8007118 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007054:	81bb      	strh	r3, [r7, #12]
 8007056:	89bb      	ldrh	r3, [r7, #12]
 8007058:	f083 0320 	eor.w	r3, r3, #32
 800705c:	81bb      	strh	r3, [r7, #12]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	89bb      	ldrh	r3, [r7, #12]
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]
 800707e:	e04b      	b.n	8007118 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	82fb      	strh	r3, [r7, #22]
 800708e:	8afb      	ldrh	r3, [r7, #22]
 8007090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01b      	beq.n	80070d0 <USB_EPClearStall+0x106>
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	82bb      	strh	r3, [r7, #20]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	8abb      	ldrh	r3, [r7, #20]
 80070bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e6:	827b      	strh	r3, [r7, #18]
 80070e8:	8a7b      	ldrh	r3, [r7, #18]
 80070ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070ee:	827b      	strh	r3, [r7, #18]
 80070f0:	8a7b      	ldrh	r3, [r7, #18]
 80070f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070f6:	827b      	strh	r3, [r7, #18]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	441a      	add	r2, r3
 8007102:	8a7b      	ldrh	r3, [r7, #18]
 8007104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800710c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007114:	b29b      	uxth	r3, r3
 8007116:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2280      	movs	r2, #128	@ 0x80
 800713a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr

0800714a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	bc80      	pop	{r7}
 8007170:	4770      	bx	lr

08007172 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007180:	b29b      	uxth	r3, r3
 8007182:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007184:	68fb      	ldr	r3, [r7, #12]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b08b      	sub	sp, #44	@ 0x2c
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	4611      	mov	r1, r2
 80071b2:	461a      	mov	r2, r3
 80071b4:	460b      	mov	r3, r1
 80071b6:	80fb      	strh	r3, [r7, #6]
 80071b8:	4613      	mov	r3, r2
 80071ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071bc:	88bb      	ldrh	r3, [r7, #4]
 80071be:	3301      	adds	r3, #1
 80071c0:	085b      	lsrs	r3, r3, #1
 80071c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	005a      	lsls	r2, r3, #1
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071de:	e01e      	b.n	800721e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	3301      	adds	r3, #1
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	b21a      	sxth	r2, r3
 80071f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	b21b      	sxth	r3, r3
 80071f8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	8a7a      	ldrh	r2, [r7, #18]
 80071fe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	3302      	adds	r3, #2
 8007204:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	3302      	adds	r3, #2
 800720a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	3b01      	subs	r3, #1
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1dd      	bne.n	80071e0 <USB_WritePMA+0x3a>
  }
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	372c      	adds	r7, #44	@ 0x2c
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007230:	b480      	push	{r7}
 8007232:	b08b      	sub	sp, #44	@ 0x2c
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4611      	mov	r1, r2
 800723c:	461a      	mov	r2, r3
 800723e:	460b      	mov	r3, r1
 8007240:	80fb      	strh	r3, [r7, #6]
 8007242:	4613      	mov	r3, r2
 8007244:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007246:	88bb      	ldrh	r3, [r7, #4]
 8007248:	085b      	lsrs	r3, r3, #1
 800724a:	b29b      	uxth	r3, r3
 800724c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	005a      	lsls	r2, r3, #1
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007262:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	627b      	str	r3, [r7, #36]	@ 0x24
 8007268:	e01b      	b.n	80072a2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	3302      	adds	r3, #2
 8007276:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	0a1b      	lsrs	r3, r3, #8
 800728a:	b2da      	uxtb	r2, r3
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	3301      	adds	r3, #1
 8007294:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	3302      	adds	r3, #2
 800729a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	3b01      	subs	r3, #1
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e0      	bne.n	800726a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80072a8:	88bb      	ldrh	r3, [r7, #4]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	701a      	strb	r2, [r3, #0]
  }
}
 80072c4:	bf00      	nop
 80072c6:	372c      	adds	r7, #44	@ 0x2c
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr

080072ce <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7c1b      	ldrb	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d115      	bne.n	8007312 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072ea:	2202      	movs	r2, #2
 80072ec:	2181      	movs	r1, #129	@ 0x81
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fe81 	bl	8008ff6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072fe:	2202      	movs	r2, #2
 8007300:	2101      	movs	r1, #1
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 fe77 	bl	8008ff6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007310:	e012      	b.n	8007338 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007312:	2340      	movs	r3, #64	@ 0x40
 8007314:	2202      	movs	r2, #2
 8007316:	2181      	movs	r1, #129	@ 0x81
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fe6c 	bl	8008ff6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007324:	2340      	movs	r3, #64	@ 0x40
 8007326:	2202      	movs	r2, #2
 8007328:	2101      	movs	r1, #1
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fe63 	bl	8008ff6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007338:	2308      	movs	r3, #8
 800733a:	2203      	movs	r2, #3
 800733c:	2182      	movs	r1, #130	@ 0x82
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fe59 	bl	8008ff6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800734a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800734e:	f001 ff79 	bl	8009244 <USBD_static_malloc>
 8007352:	4602      	mov	r2, r0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e026      	b.n	80073b8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007370:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2200      	movs	r2, #0
 8007388:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7c1b      	ldrb	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800739a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800739e:	2101      	movs	r1, #1
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 ff19 	bl	80091d8 <USBD_LL_PrepareReceive>
 80073a6:	e007      	b.n	80073b8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073ae:	2340      	movs	r3, #64	@ 0x40
 80073b0:	2101      	movs	r1, #1
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 ff10 	bl	80091d8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	460b      	mov	r3, r1
 80073cc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073d2:	2181      	movs	r1, #129	@ 0x81
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 fe34 	bl	8009042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80073e0:	2101      	movs	r1, #1
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fe2d 	bl	8009042 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073f0:	2182      	movs	r1, #130	@ 0x82
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fe25 	bl	8009042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00e      	beq.n	8007426 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007418:	4618      	mov	r0, r3
 800741a:	f001 ff1f 	bl	800925c <USBD_static_free>
    pdev->pClassData = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007440:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007456:	2b00      	cmp	r3, #0
 8007458:	d039      	beq.n	80074ce <USBD_CDC_Setup+0x9e>
 800745a:	2b20      	cmp	r3, #32
 800745c:	d17f      	bne.n	800755e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	88db      	ldrh	r3, [r3, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d029      	beq.n	80074ba <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	b25b      	sxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	da11      	bge.n	8007494 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800747c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	88d2      	ldrh	r2, [r2, #6]
 8007482:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007484:	6939      	ldr	r1, [r7, #16]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	88db      	ldrh	r3, [r3, #6]
 800748a:	461a      	mov	r2, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 fa05 	bl	800889c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007492:	e06b      	b.n	800756c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	785a      	ldrb	r2, [r3, #1]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	88db      	ldrh	r3, [r3, #6]
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074aa:	6939      	ldr	r1, [r7, #16]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	88db      	ldrh	r3, [r3, #6]
 80074b0:	461a      	mov	r2, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fa20 	bl	80088f8 <USBD_CtlPrepareRx>
      break;
 80074b8:	e058      	b.n	800756c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	7850      	ldrb	r0, [r2, #1]
 80074c6:	2200      	movs	r2, #0
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	4798      	blx	r3
      break;
 80074cc:	e04e      	b.n	800756c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	2b0b      	cmp	r3, #11
 80074d4:	d02e      	beq.n	8007534 <USBD_CDC_Setup+0x104>
 80074d6:	2b0b      	cmp	r3, #11
 80074d8:	dc38      	bgt.n	800754c <USBD_CDC_Setup+0x11c>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <USBD_CDC_Setup+0xb4>
 80074de:	2b0a      	cmp	r3, #10
 80074e0:	d014      	beq.n	800750c <USBD_CDC_Setup+0xdc>
 80074e2:	e033      	b.n	800754c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d107      	bne.n	80074fe <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80074ee:	f107 030c 	add.w	r3, r7, #12
 80074f2:	2202      	movs	r2, #2
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 f9d0 	bl	800889c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074fc:	e02e      	b.n	800755c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 f961 	bl	80087c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007506:	2302      	movs	r3, #2
 8007508:	75fb      	strb	r3, [r7, #23]
          break;
 800750a:	e027      	b.n	800755c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007512:	2b03      	cmp	r3, #3
 8007514:	d107      	bne.n	8007526 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007516:	f107 030f 	add.w	r3, r7, #15
 800751a:	2201      	movs	r2, #1
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f9bc 	bl	800889c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007524:	e01a      	b.n	800755c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 f94d 	bl	80087c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800752e:	2302      	movs	r3, #2
 8007530:	75fb      	strb	r3, [r7, #23]
          break;
 8007532:	e013      	b.n	800755c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800753a:	2b03      	cmp	r3, #3
 800753c:	d00d      	beq.n	800755a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 f941 	bl	80087c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800754a:	e006      	b.n	800755a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 f93a 	bl	80087c8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007554:	2302      	movs	r3, #2
 8007556:	75fb      	strb	r3, [r7, #23]
          break;
 8007558:	e000      	b.n	800755c <USBD_CDC_Setup+0x12c>
          break;
 800755a:	bf00      	nop
      }
      break;
 800755c:	e006      	b.n	800756c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f931 	bl	80087c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007566:	2302      	movs	r3, #2
 8007568:	75fb      	strb	r3, [r7, #23]
      break;
 800756a:	bf00      	nop
  }

  return ret;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007588:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007590:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d03a      	beq.n	8007612 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	331c      	adds	r3, #28
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d029      	beq.n	8007606 <USBD_CDC_DataIn+0x90>
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	440b      	add	r3, r1
 80075c0:	331c      	adds	r3, #28
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	78f9      	ldrb	r1, [r7, #3]
 80075c6:	68b8      	ldr	r0, [r7, #8]
 80075c8:	460b      	mov	r3, r1
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	4403      	add	r3, r0
 80075d2:	3338      	adds	r3, #56	@ 0x38
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d110      	bne.n	8007606 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	331c      	adds	r3, #28
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075f8:	78f9      	ldrb	r1, [r7, #3]
 80075fa:	2300      	movs	r3, #0
 80075fc:	2200      	movs	r2, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 fdc7 	bl	8009192 <USBD_LL_Transmit>
 8007604:	e003      	b.n	800760e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	e000      	b.n	8007614 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007612:	2302      	movs	r3, #2
  }
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800762e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fdf2 	bl	800921e <USBD_LL_GetRxDataSize>
 800763a:	4602      	mov	r2, r0
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00d      	beq.n	8007668 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007660:	4611      	mov	r1, r2
 8007662:	4798      	blx	r3

    return USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	e000      	b.n	800766a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007668:	2302      	movs	r3, #2
  }
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007680:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007688:	2b00      	cmp	r3, #0
 800768a:	d014      	beq.n	80076b6 <USBD_CDC_EP0_RxReady+0x44>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007692:	2bff      	cmp	r3, #255	@ 0xff
 8007694:	d00f      	beq.n	80076b6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80076a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	22ff      	movs	r2, #255	@ 0xff
 80076b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2243      	movs	r2, #67	@ 0x43
 80076cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80076ce:	4b03      	ldr	r3, [pc, #12]	@ (80076dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20000094 	.word	0x20000094

080076e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2243      	movs	r2, #67	@ 0x43
 80076ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80076ee:	4b03      	ldr	r3, [pc, #12]	@ (80076fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	20000050 	.word	0x20000050

08007700 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2243      	movs	r2, #67	@ 0x43
 800770c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800770e:	4b03      	ldr	r3, [pc, #12]	@ (800771c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	200000d8 	.word	0x200000d8

08007720 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	220a      	movs	r2, #10
 800772c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800772e:	4b03      	ldr	r3, [pc, #12]	@ (800773c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	2000000c 	.word	0x2000000c

08007740 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800774a:	2302      	movs	r3, #2
 800774c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr

0800776c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007780:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800778a:	88fa      	ldrh	r2, [r7, #6]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr

0800779e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr

080077c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01c      	beq.n	8007818 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d115      	bne.n	8007814 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007806:	b29b      	uxth	r3, r3
 8007808:	2181      	movs	r1, #129	@ 0x81
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fcc1 	bl	8009192 <USBD_LL_Transmit>

      return USBD_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	e002      	b.n	800781a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007818:	2302      	movs	r3, #2
  }
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007830:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d017      	beq.n	800786c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7c1b      	ldrb	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800784a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800784e:	2101      	movs	r1, #1
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 fcc1 	bl	80091d8 <USBD_LL_PrepareReceive>
 8007856:	e007      	b.n	8007868 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800785e:	2340      	movs	r3, #64	@ 0x40
 8007860:	2101      	movs	r1, #1
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 fcb8 	bl	80091d8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	e000      	b.n	800786e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800786c:	2302      	movs	r3, #2
  }
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	4613      	mov	r3, r2
 8007882:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800788a:	2302      	movs	r3, #2
 800788c:	e01a      	b.n	80078c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	79fa      	ldrb	r2, [r7, #7]
 80078ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f001 fb25 	bl	8008f0c <USBD_LL_Init>

  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d006      	beq.n	80078ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
 80078ec:	e001      	b.n	80078f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80078ee:	2302      	movs	r3, #2
 80078f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr

080078fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 fb5a 	bl	8008fc0 <USBD_LL_Start>

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr

0800792a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007936:	2302      	movs	r3, #2
 8007938:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00c      	beq.n	800795e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	78fa      	ldrb	r2, [r7, #3]
 800794e:	4611      	mov	r1, r2
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	4798      	blx	r3
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	78fa      	ldrb	r2, [r7, #3]
 800797e:	4611      	mov	r1, r2
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3

  return USBD_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fed8 	bl	8008756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d016      	beq.n	80079f8 <USBD_LL_SetupStage+0x6a>
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d81c      	bhi.n	8007a08 <USBD_LL_SetupStage+0x7a>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <USBD_LL_SetupStage+0x4a>
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d008      	beq.n	80079e8 <USBD_LL_SetupStage+0x5a>
 80079d6:	e017      	b.n	8007a08 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f9cb 	bl	8007d7c <USBD_StdDevReq>
      break;
 80079e6:	e01a      	b.n	8007a1e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fa2d 	bl	8007e50 <USBD_StdItfReq>
      break;
 80079f6:	e012      	b.n	8007a1e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fa6d 	bl	8007ee0 <USBD_StdEPReq>
      break;
 8007a06:	e00a      	b.n	8007a1e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007a0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fb32 	bl	8009080 <USBD_LL_StallEP>
      break;
 8007a1c:	bf00      	nop
  }

  return USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	460b      	mov	r3, r1
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d14b      	bne.n	8007ad4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a42:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d134      	bne.n	8007ab8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d919      	bls.n	8007a8e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d203      	bcs.n	8007a7c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	e002      	b.n	8007a82 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 ff54 	bl	8008934 <USBD_CtlContinueRx>
 8007a8c:	e038      	b.n	8007b00 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d105      	bne.n	8007ab0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 ff51 	bl	8008958 <USBD_CtlSendStatus>
 8007ab6:	e023      	b.n	8007b00 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	d11e      	bne.n	8007b00 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007aca:	2100      	movs	r1, #0
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f001 fad7 	bl	8009080 <USBD_LL_StallEP>
 8007ad2:	e015      	b.n	8007b00 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d108      	bne.n	8007afc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	7afa      	ldrb	r2, [r7, #11]
 8007af4:	4611      	mov	r1, r2
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	4798      	blx	r3
 8007afa:	e001      	b.n	8007b00 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007afc:	2302      	movs	r3, #2
 8007afe:	e000      	b.n	8007b02 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b086      	sub	sp, #24
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	460b      	mov	r3, r1
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d17f      	bne.n	8007c1e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3314      	adds	r3, #20
 8007b22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d15c      	bne.n	8007be8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d915      	bls.n	8007b66 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	1ad2      	subs	r2, r2, r3
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 febe 	bl	80088d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f001 fb3a 	bl	80091d8 <USBD_LL_PrepareReceive>
 8007b64:	e04e      	b.n	8007c04 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	6912      	ldr	r2, [r2, #16]
 8007b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b72:	fb01 f202 	mul.w	r2, r1, r2
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d11c      	bne.n	8007bb6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d316      	bcc.n	8007bb6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d20f      	bcs.n	8007bb6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b96:	2200      	movs	r2, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fe9a 	bl	80088d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2200      	movs	r2, #0
 8007bac:	2100      	movs	r1, #0
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f001 fb12 	bl	80091d8 <USBD_LL_PrepareReceive>
 8007bb4:	e026      	b.n	8007c04 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d105      	bne.n	8007bd8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007bd8:	2180      	movs	r1, #128	@ 0x80
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f001 fa50 	bl	8009080 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fecc 	bl	800897e <USBD_CtlReceiveStatus>
 8007be6:	e00d      	b.n	8007c04 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d004      	beq.n	8007bfc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d103      	bne.n	8007c04 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007bfc:	2180      	movs	r1, #128	@ 0x80
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f001 fa3e 	bl	8009080 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d11d      	bne.n	8007c4a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff fe81 	bl	8007916 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007c1c:	e015      	b.n	8007c4a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00d      	beq.n	8007c46 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d108      	bne.n	8007c46 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	7afa      	ldrb	r2, [r7, #11]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	4798      	blx	r3
 8007c44:	e001      	b.n	8007c4a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c46:	2302      	movs	r3, #2
 8007c48:	e000      	b.n	8007c4c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c5c:	2340      	movs	r3, #64	@ 0x40
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2100      	movs	r1, #0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 f9c7 	bl	8008ff6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2240      	movs	r2, #64	@ 0x40
 8007c74:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c78:	2340      	movs	r3, #64	@ 0x40
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2180      	movs	r1, #128	@ 0x80
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 f9b9 	bl	8008ff6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2240      	movs	r2, #64	@ 0x40
 8007c8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6852      	ldr	r2, [r2, #4]
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
  }

  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	78fa      	ldrb	r2, [r7, #3]
 8007ce6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d105      	bne.n	8007d3a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr

08007d46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d10b      	bne.n	8007d70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d92:	2b40      	cmp	r3, #64	@ 0x40
 8007d94:	d005      	beq.n	8007da2 <USBD_StdDevReq+0x26>
 8007d96:	2b40      	cmp	r3, #64	@ 0x40
 8007d98:	d84f      	bhi.n	8007e3a <USBD_StdDevReq+0xbe>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <USBD_StdDevReq+0x36>
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d14b      	bne.n	8007e3a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
      break;
 8007db0:	e048      	b.n	8007e44 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	785b      	ldrb	r3, [r3, #1]
 8007db6:	2b09      	cmp	r3, #9
 8007db8:	d839      	bhi.n	8007e2e <USBD_StdDevReq+0xb2>
 8007dba:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc0 <USBD_StdDevReq+0x44>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007e11 	.word	0x08007e11
 8007dc4:	08007e25 	.word	0x08007e25
 8007dc8:	08007e2f 	.word	0x08007e2f
 8007dcc:	08007e1b 	.word	0x08007e1b
 8007dd0:	08007e2f 	.word	0x08007e2f
 8007dd4:	08007df3 	.word	0x08007df3
 8007dd8:	08007de9 	.word	0x08007de9
 8007ddc:	08007e2f 	.word	0x08007e2f
 8007de0:	08007e07 	.word	0x08007e07
 8007de4:	08007dfd 	.word	0x08007dfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f9dc 	bl	80081a8 <USBD_GetDescriptor>
          break;
 8007df0:	e022      	b.n	8007e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fb3f 	bl	8008478 <USBD_SetAddress>
          break;
 8007dfa:	e01d      	b.n	8007e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fb7e 	bl	8008500 <USBD_SetConfig>
          break;
 8007e04:	e018      	b.n	8007e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc07 	bl	800861c <USBD_GetConfig>
          break;
 8007e0e:	e013      	b.n	8007e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fc37 	bl	8008686 <USBD_GetStatus>
          break;
 8007e18:	e00e      	b.n	8007e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fc65 	bl	80086ec <USBD_SetFeature>
          break;
 8007e22:	e009      	b.n	8007e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fc74 	bl	8008714 <USBD_ClrFeature>
          break;
 8007e2c:	e004      	b.n	8007e38 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fcc9 	bl	80087c8 <USBD_CtlError>
          break;
 8007e36:	bf00      	nop
      }
      break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fcc3 	bl	80087c8 <USBD_CtlError>
      break;
 8007e42:	bf00      	nop
  }

  return ret;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e66:	2b40      	cmp	r3, #64	@ 0x40
 8007e68:	d005      	beq.n	8007e76 <USBD_StdItfReq+0x26>
 8007e6a:	2b40      	cmp	r3, #64	@ 0x40
 8007e6c:	d82e      	bhi.n	8007ecc <USBD_StdItfReq+0x7c>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <USBD_StdItfReq+0x26>
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d12a      	bne.n	8007ecc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d81d      	bhi.n	8007ebe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	889b      	ldrh	r3, [r3, #4]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d813      	bhi.n	8007eb4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	88db      	ldrh	r3, [r3, #6]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d110      	bne.n	8007ec8 <USBD_StdItfReq+0x78>
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10d      	bne.n	8007ec8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fd53 	bl	8008958 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007eb2:	e009      	b.n	8007ec8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fc86 	bl	80087c8 <USBD_CtlError>
          break;
 8007ebc:	e004      	b.n	8007ec8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fc81 	bl	80087c8 <USBD_CtlError>
          break;
 8007ec6:	e000      	b.n	8007eca <USBD_StdItfReq+0x7a>
          break;
 8007ec8:	bf00      	nop
      }
      break;
 8007eca:	e004      	b.n	8007ed6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fc7a 	bl	80087c8 <USBD_CtlError>
      break;
 8007ed4:	bf00      	nop
  }

  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	889b      	ldrh	r3, [r3, #4]
 8007ef2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007efc:	2b40      	cmp	r3, #64	@ 0x40
 8007efe:	d007      	beq.n	8007f10 <USBD_StdEPReq+0x30>
 8007f00:	2b40      	cmp	r3, #64	@ 0x40
 8007f02:	f200 8146 	bhi.w	8008192 <USBD_StdEPReq+0x2b2>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <USBD_StdEPReq+0x40>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	f040 8141 	bne.w	8008192 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
      break;
 8007f1e:	e13d      	b.n	800819c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d10a      	bne.n	8007f42 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	e12d      	b.n	800819e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d007      	beq.n	8007f5a <USBD_StdEPReq+0x7a>
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	f300 811b 	bgt.w	8008186 <USBD_StdEPReq+0x2a6>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d072      	beq.n	800803a <USBD_StdEPReq+0x15a>
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d03a      	beq.n	8007fce <USBD_StdEPReq+0xee>
 8007f58:	e115      	b.n	8008186 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d002      	beq.n	8007f6a <USBD_StdEPReq+0x8a>
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d015      	beq.n	8007f94 <USBD_StdEPReq+0xb4>
 8007f68:	e02b      	b.n	8007fc2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00c      	beq.n	8007f8a <USBD_StdEPReq+0xaa>
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b80      	cmp	r3, #128	@ 0x80
 8007f74:	d009      	beq.n	8007f8a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 f880 	bl	8009080 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f80:	2180      	movs	r1, #128	@ 0x80
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 f87c 	bl	8009080 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f88:	e020      	b.n	8007fcc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc1b 	bl	80087c8 <USBD_CtlError>
              break;
 8007f92:	e01b      	b.n	8007fcc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	885b      	ldrh	r3, [r3, #2]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10e      	bne.n	8007fba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <USBD_StdEPReq+0xda>
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	2b80      	cmp	r3, #128	@ 0x80
 8007fa6:	d008      	beq.n	8007fba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	88db      	ldrh	r3, [r3, #6]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f863 	bl	8009080 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fccc 	bl	8008958 <USBD_CtlSendStatus>

              break;
 8007fc0:	e004      	b.n	8007fcc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fbff 	bl	80087c8 <USBD_CtlError>
              break;
 8007fca:	bf00      	nop
          }
          break;
 8007fcc:	e0e0      	b.n	8008190 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d002      	beq.n	8007fde <USBD_StdEPReq+0xfe>
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d015      	beq.n	8008008 <USBD_StdEPReq+0x128>
 8007fdc:	e026      	b.n	800802c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00c      	beq.n	8007ffe <USBD_StdEPReq+0x11e>
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b80      	cmp	r3, #128	@ 0x80
 8007fe8:	d009      	beq.n	8007ffe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 f846 	bl	8009080 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ff4:	2180      	movs	r1, #128	@ 0x80
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f842 	bl	8009080 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ffc:	e01c      	b.n	8008038 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fbe1 	bl	80087c8 <USBD_CtlError>
              break;
 8008006:	e017      	b.n	8008038 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	885b      	ldrh	r3, [r3, #2]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d112      	bne.n	8008036 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 f84d 	bl	80090be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc97 	bl	8008958 <USBD_CtlSendStatus>
              }
              break;
 800802a:	e004      	b.n	8008036 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fbca 	bl	80087c8 <USBD_CtlError>
              break;
 8008034:	e000      	b.n	8008038 <USBD_StdEPReq+0x158>
              break;
 8008036:	bf00      	nop
          }
          break;
 8008038:	e0aa      	b.n	8008190 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008040:	2b02      	cmp	r3, #2
 8008042:	d002      	beq.n	800804a <USBD_StdEPReq+0x16a>
 8008044:	2b03      	cmp	r3, #3
 8008046:	d032      	beq.n	80080ae <USBD_StdEPReq+0x1ce>
 8008048:	e097      	b.n	800817a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d007      	beq.n	8008060 <USBD_StdEPReq+0x180>
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b80      	cmp	r3, #128	@ 0x80
 8008054:	d004      	beq.n	8008060 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fbb5 	bl	80087c8 <USBD_CtlError>
                break;
 800805e:	e091      	b.n	8008184 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008064:	2b00      	cmp	r3, #0
 8008066:	da0b      	bge.n	8008080 <USBD_StdEPReq+0x1a0>
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	3310      	adds	r3, #16
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	4413      	add	r3, r2
 800807c:	3304      	adds	r3, #4
 800807e:	e00b      	b.n	8008098 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4413      	add	r3, r2
 8008096:	3304      	adds	r3, #4
 8008098:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2202      	movs	r2, #2
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fbf8 	bl	800889c <USBD_CtlSendData>
              break;
 80080ac:	e06a      	b.n	8008184 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	da11      	bge.n	80080da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	f003 020f 	and.w	r2, r3, #15
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	3318      	adds	r3, #24
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d117      	bne.n	8008100 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fb78 	bl	80087c8 <USBD_CtlError>
                  break;
 80080d8:	e054      	b.n	8008184 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	f003 020f 	and.w	r2, r3, #15
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	440b      	add	r3, r1
 80080ec:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d104      	bne.n	8008100 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fb65 	bl	80087c8 <USBD_CtlError>
                  break;
 80080fe:	e041      	b.n	8008184 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008104:	2b00      	cmp	r3, #0
 8008106:	da0b      	bge.n	8008120 <USBD_StdEPReq+0x240>
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800810e:	4613      	mov	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	3310      	adds	r3, #16
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	4413      	add	r3, r2
 800811c:	3304      	adds	r3, #4
 800811e:	e00b      	b.n	8008138 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	3304      	adds	r3, #4
 8008138:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <USBD_StdEPReq+0x266>
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	2b80      	cmp	r3, #128	@ 0x80
 8008144:	d103      	bne.n	800814e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	e00e      	b.n	800816c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 ffd2 	bl	80090fc <USBD_LL_IsStallEP>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2201      	movs	r2, #1
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	e002      	b.n	800816c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2202      	movs	r2, #2
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fb92 	bl	800889c <USBD_CtlSendData>
              break;
 8008178:	e004      	b.n	8008184 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fb23 	bl	80087c8 <USBD_CtlError>
              break;
 8008182:	bf00      	nop
          }
          break;
 8008184:	e004      	b.n	8008190 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fb1d 	bl	80087c8 <USBD_CtlError>
          break;
 800818e:	bf00      	nop
      }
      break;
 8008190:	e004      	b.n	800819c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fb17 	bl	80087c8 <USBD_CtlError>
      break;
 800819a:	bf00      	nop
  }

  return ret;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	885b      	ldrh	r3, [r3, #2]
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	3b01      	subs	r3, #1
 80081c8:	2b06      	cmp	r3, #6
 80081ca:	f200 8128 	bhi.w	800841e <USBD_GetDescriptor+0x276>
 80081ce:	a201      	add	r2, pc, #4	@ (adr r2, 80081d4 <USBD_GetDescriptor+0x2c>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	080081f1 	.word	0x080081f1
 80081d8:	08008209 	.word	0x08008209
 80081dc:	08008249 	.word	0x08008249
 80081e0:	0800841f 	.word	0x0800841f
 80081e4:	0800841f 	.word	0x0800841f
 80081e8:	080083bf 	.word	0x080083bf
 80081ec:	080083eb 	.word	0x080083eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7c12      	ldrb	r2, [r2, #16]
 80081fc:	f107 0108 	add.w	r1, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
      break;
 8008206:	e112      	b.n	800842e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	7c1b      	ldrb	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10d      	bne.n	800822c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008218:	f107 0208 	add.w	r2, r7, #8
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	2202      	movs	r2, #2
 8008228:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800822a:	e100      	b.n	800842e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	f107 0208 	add.w	r2, r7, #8
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	2202      	movs	r2, #2
 8008244:	701a      	strb	r2, [r3, #0]
      break;
 8008246:	e0f2      	b.n	800842e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	885b      	ldrh	r3, [r3, #2]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b05      	cmp	r3, #5
 8008250:	f200 80ac 	bhi.w	80083ac <USBD_GetDescriptor+0x204>
 8008254:	a201      	add	r2, pc, #4	@ (adr r2, 800825c <USBD_GetDescriptor+0xb4>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	08008275 	.word	0x08008275
 8008260:	080082a9 	.word	0x080082a9
 8008264:	080082dd 	.word	0x080082dd
 8008268:	08008311 	.word	0x08008311
 800826c:	08008345 	.word	0x08008345
 8008270:	08008379 	.word	0x08008379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7c12      	ldrb	r2, [r2, #16]
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008296:	e091      	b.n	80083bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa94 	bl	80087c8 <USBD_CtlError>
            err++;
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	3301      	adds	r3, #1
 80082a4:	72fb      	strb	r3, [r7, #11]
          break;
 80082a6:	e089      	b.n	80083bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	7c12      	ldrb	r2, [r2, #16]
 80082c0:	f107 0108 	add.w	r1, r7, #8
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ca:	e077      	b.n	80083bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa7a 	bl	80087c8 <USBD_CtlError>
            err++;
 80082d4:	7afb      	ldrb	r3, [r7, #11]
 80082d6:	3301      	adds	r3, #1
 80082d8:	72fb      	strb	r3, [r7, #11]
          break;
 80082da:	e06f      	b.n	80083bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fe:	e05d      	b.n	80083bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa60 	bl	80087c8 <USBD_CtlError>
            err++;
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	3301      	adds	r3, #1
 800830c:	72fb      	strb	r3, [r7, #11]
          break;
 800830e:	e055      	b.n	80083bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008332:	e043      	b.n	80083bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa46 	bl	80087c8 <USBD_CtlError>
            err++;
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	3301      	adds	r3, #1
 8008340:	72fb      	strb	r3, [r7, #11]
          break;
 8008342:	e03b      	b.n	80083bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 0108 	add.w	r1, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008366:	e029      	b.n	80083bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa2c 	bl	80087c8 <USBD_CtlError>
            err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
          break;
 8008376:	e021      	b.n	80083bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7c12      	ldrb	r2, [r2, #16]
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839a:	e00f      	b.n	80083bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa12 	bl	80087c8 <USBD_CtlError>
            err++;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	3301      	adds	r3, #1
 80083a8:	72fb      	strb	r3, [r7, #11]
          break;
 80083aa:	e007      	b.n	80083bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa0a 	bl	80087c8 <USBD_CtlError>
          err++;
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	3301      	adds	r3, #1
 80083b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80083ba:	e038      	b.n	800842e <USBD_GetDescriptor+0x286>
 80083bc:	e037      	b.n	800842e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	7c1b      	ldrb	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ce:	f107 0208 	add.w	r2, r7, #8
 80083d2:	4610      	mov	r0, r2
 80083d4:	4798      	blx	r3
 80083d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083d8:	e029      	b.n	800842e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f9f3 	bl	80087c8 <USBD_CtlError>
        err++;
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	3301      	adds	r3, #1
 80083e6:	72fb      	strb	r3, [r7, #11]
      break;
 80083e8:	e021      	b.n	800842e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	7c1b      	ldrb	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10d      	bne.n	800840e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fa:	f107 0208 	add.w	r2, r7, #8
 80083fe:	4610      	mov	r0, r2
 8008400:	4798      	blx	r3
 8008402:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	2207      	movs	r2, #7
 800840a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800840c:	e00f      	b.n	800842e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f9d9 	bl	80087c8 <USBD_CtlError>
        err++;
 8008416:	7afb      	ldrb	r3, [r7, #11]
 8008418:	3301      	adds	r3, #1
 800841a:	72fb      	strb	r3, [r7, #11]
      break;
 800841c:	e007      	b.n	800842e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f9d1 	bl	80087c8 <USBD_CtlError>
      err++;
 8008426:	7afb      	ldrb	r3, [r7, #11]
 8008428:	3301      	adds	r3, #1
 800842a:	72fb      	strb	r3, [r7, #11]
      break;
 800842c:	bf00      	nop
  }

  if (err != 0U)
 800842e:	7afb      	ldrb	r3, [r7, #11]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11c      	bne.n	800846e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008434:	893b      	ldrh	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d011      	beq.n	800845e <USBD_GetDescriptor+0x2b6>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	88db      	ldrh	r3, [r3, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00d      	beq.n	800845e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	88da      	ldrh	r2, [r3, #6]
 8008446:	893b      	ldrh	r3, [r7, #8]
 8008448:	4293      	cmp	r3, r2
 800844a:	bf28      	it	cs
 800844c:	4613      	movcs	r3, r2
 800844e:	b29b      	uxth	r3, r3
 8008450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008452:	893b      	ldrh	r3, [r7, #8]
 8008454:	461a      	mov	r2, r3
 8008456:	68f9      	ldr	r1, [r7, #12]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa1f 	bl	800889c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	88db      	ldrh	r3, [r3, #6]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d104      	bne.n	8008470 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa76 	bl	8008958 <USBD_CtlSendStatus>
 800846c:	e000      	b.n	8008470 <USBD_GetDescriptor+0x2c8>
    return;
 800846e:	bf00      	nop
    }
  }
}
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	889b      	ldrh	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d130      	bne.n	80084ec <USBD_SetAddress+0x74>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	88db      	ldrh	r3, [r3, #6]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d12c      	bne.n	80084ec <USBD_SetAddress+0x74>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	885b      	ldrh	r3, [r3, #2]
 8008496:	2b7f      	cmp	r3, #127	@ 0x7f
 8008498:	d828      	bhi.n	80084ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d104      	bne.n	80084ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f988 	bl	80087c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b8:	e01d      	b.n	80084f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7bfa      	ldrb	r2, [r7, #15]
 80084be:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fe44 	bl	8009154 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fa43 	bl	8008958 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d004      	beq.n	80084e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e0:	e009      	b.n	80084f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ea:	e004      	b.n	80084f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f96a 	bl	80087c8 <USBD_CtlError>
  }
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	885b      	ldrh	r3, [r3, #2]
 800850e:	b2da      	uxtb	r2, r3
 8008510:	4b41      	ldr	r3, [pc, #260]	@ (8008618 <USBD_SetConfig+0x118>)
 8008512:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008514:	4b40      	ldr	r3, [pc, #256]	@ (8008618 <USBD_SetConfig+0x118>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d904      	bls.n	8008526 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f952 	bl	80087c8 <USBD_CtlError>
 8008524:	e075      	b.n	8008612 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800852c:	2b02      	cmp	r3, #2
 800852e:	d002      	beq.n	8008536 <USBD_SetConfig+0x36>
 8008530:	2b03      	cmp	r3, #3
 8008532:	d023      	beq.n	800857c <USBD_SetConfig+0x7c>
 8008534:	e062      	b.n	80085fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008536:	4b38      	ldr	r3, [pc, #224]	@ (8008618 <USBD_SetConfig+0x118>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d01a      	beq.n	8008574 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800853e:	4b36      	ldr	r3, [pc, #216]	@ (8008618 <USBD_SetConfig+0x118>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2203      	movs	r2, #3
 800854c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008550:	4b31      	ldr	r3, [pc, #196]	@ (8008618 <USBD_SetConfig+0x118>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff f9e7 	bl	800792a <USBD_SetClassConfig>
 800855c:	4603      	mov	r3, r0
 800855e:	2b02      	cmp	r3, #2
 8008560:	d104      	bne.n	800856c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f92f 	bl	80087c8 <USBD_CtlError>
            return;
 800856a:	e052      	b.n	8008612 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f9f3 	bl	8008958 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008572:	e04e      	b.n	8008612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f9ef 	bl	8008958 <USBD_CtlSendStatus>
        break;
 800857a:	e04a      	b.n	8008612 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800857c:	4b26      	ldr	r3, [pc, #152]	@ (8008618 <USBD_SetConfig+0x118>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d112      	bne.n	80085aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800858c:	4b22      	ldr	r3, [pc, #136]	@ (8008618 <USBD_SetConfig+0x118>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008596:	4b20      	ldr	r3, [pc, #128]	@ (8008618 <USBD_SetConfig+0x118>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff f9e3 	bl	8007968 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f9d8 	bl	8008958 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80085a8:	e033      	b.n	8008612 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80085aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008618 <USBD_SetConfig+0x118>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d01d      	beq.n	80085f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff f9d1 	bl	8007968 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80085c6:	4b14      	ldr	r3, [pc, #80]	@ (8008618 <USBD_SetConfig+0x118>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085d0:	4b11      	ldr	r3, [pc, #68]	@ (8008618 <USBD_SetConfig+0x118>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff f9a7 	bl	800792a <USBD_SetClassConfig>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d104      	bne.n	80085ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f8ef 	bl	80087c8 <USBD_CtlError>
            return;
 80085ea:	e012      	b.n	8008612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f9b3 	bl	8008958 <USBD_CtlSendStatus>
        break;
 80085f2:	e00e      	b.n	8008612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f9af 	bl	8008958 <USBD_CtlSendStatus>
        break;
 80085fa:	e00a      	b.n	8008612 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f8e2 	bl	80087c8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008604:	4b04      	ldr	r3, [pc, #16]	@ (8008618 <USBD_SetConfig+0x118>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff f9ac 	bl	8007968 <USBD_ClrClassConfig>
        break;
 8008610:	bf00      	nop
    }
  }
}
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20000404 	.word	0x20000404

0800861c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	88db      	ldrh	r3, [r3, #6]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d004      	beq.n	8008638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f8c9 	bl	80087c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008636:	e022      	b.n	800867e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800863e:	2b02      	cmp	r3, #2
 8008640:	dc02      	bgt.n	8008648 <USBD_GetConfig+0x2c>
 8008642:	2b00      	cmp	r3, #0
 8008644:	dc03      	bgt.n	800864e <USBD_GetConfig+0x32>
 8008646:	e015      	b.n	8008674 <USBD_GetConfig+0x58>
 8008648:	2b03      	cmp	r3, #3
 800864a:	d00b      	beq.n	8008664 <USBD_GetConfig+0x48>
 800864c:	e012      	b.n	8008674 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3308      	adds	r3, #8
 8008658:	2201      	movs	r2, #1
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f91d 	bl	800889c <USBD_CtlSendData>
        break;
 8008662:	e00c      	b.n	800867e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3304      	adds	r3, #4
 8008668:	2201      	movs	r2, #1
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f915 	bl	800889c <USBD_CtlSendData>
        break;
 8008672:	e004      	b.n	800867e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f8a6 	bl	80087c8 <USBD_CtlError>
        break;
 800867c:	bf00      	nop
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008696:	3b01      	subs	r3, #1
 8008698:	2b02      	cmp	r3, #2
 800869a:	d81e      	bhi.n	80086da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	88db      	ldrh	r3, [r3, #6]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d004      	beq.n	80086ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f88e 	bl	80087c8 <USBD_CtlError>
        break;
 80086ac:	e01a      	b.n	80086e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f043 0202 	orr.w	r2, r3, #2
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	330c      	adds	r3, #12
 80086ce:	2202      	movs	r2, #2
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f8e2 	bl	800889c <USBD_CtlSendData>
      break;
 80086d8:	e004      	b.n	80086e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f873 	bl	80087c8 <USBD_CtlError>
      break;
 80086e2:	bf00      	nop
  }
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	885b      	ldrh	r3, [r3, #2]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d106      	bne.n	800870c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f926 	bl	8008958 <USBD_CtlSendStatus>
  }
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008724:	3b01      	subs	r3, #1
 8008726:	2b02      	cmp	r3, #2
 8008728:	d80b      	bhi.n	8008742 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d10c      	bne.n	800874c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f90c 	bl	8008958 <USBD_CtlSendStatus>
      }
      break;
 8008740:	e004      	b.n	800874c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f83f 	bl	80087c8 <USBD_CtlError>
      break;
 800874a:	e000      	b.n	800874e <USBD_ClrFeature+0x3a>
      break;
 800874c:	bf00      	nop
  }
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	785a      	ldrb	r2, [r3, #1]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	3302      	adds	r3, #2
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	3303      	adds	r3, #3
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	021b      	lsls	r3, r3, #8
 8008780:	b29b      	uxth	r3, r3
 8008782:	4413      	add	r3, r2
 8008784:	b29a      	uxth	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	3304      	adds	r3, #4
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	3305      	adds	r3, #5
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	b29b      	uxth	r3, r3
 800879c:	4413      	add	r3, r2
 800879e:	b29a      	uxth	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	3306      	adds	r3, #6
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	3307      	adds	r3, #7
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	021b      	lsls	r3, r3, #8
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	4413      	add	r3, r2
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	80da      	strh	r2, [r3, #6]

}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80087d2:	2180      	movs	r1, #128	@ 0x80
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fc53 	bl	8009080 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80087da:	2100      	movs	r1, #0
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fc4f 	bl	8009080 <USBD_LL_StallEP>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b086      	sub	sp, #24
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d032      	beq.n	8008866 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 f834 	bl	800886e <USBD_GetLen>
 8008806:	4603      	mov	r3, r0
 8008808:	3301      	adds	r3, #1
 800880a:	b29b      	uxth	r3, r3
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	75fa      	strb	r2, [r7, #23]
 800881a:	461a      	mov	r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	4413      	add	r3, r2
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	7812      	ldrb	r2, [r2, #0]
 8008824:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	75fa      	strb	r2, [r7, #23]
 800882c:	461a      	mov	r2, r3
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	4413      	add	r3, r2
 8008832:	2203      	movs	r2, #3
 8008834:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008836:	e012      	b.n	800885e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	60fa      	str	r2, [r7, #12]
 800883e:	7dfa      	ldrb	r2, [r7, #23]
 8008840:	1c51      	adds	r1, r2, #1
 8008842:	75f9      	strb	r1, [r7, #23]
 8008844:	4611      	mov	r1, r2
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	440a      	add	r2, r1
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	75fa      	strb	r2, [r7, #23]
 8008854:	461a      	mov	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	4413      	add	r3, r2
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e8      	bne.n	8008838 <USBD_GetString+0x4e>
    }
  }
}
 8008866:	bf00      	nop
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800886e:	b480      	push	{r7}
 8008870:	b085      	sub	sp, #20
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800887a:	e005      	b.n	8008888 <USBD_GetLen+0x1a>
  {
    len++;
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	3301      	adds	r3, #1
 8008880:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3301      	adds	r3, #1
 8008886:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1f5      	bne.n	800887c <USBD_GetLen+0xe>
  }

  return len;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4613      	mov	r3, r2
 80088a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2202      	movs	r2, #2
 80088ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80088b2:	88fa      	ldrh	r2, [r7, #6]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80088b8:	88fa      	ldrh	r2, [r7, #6]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	2100      	movs	r1, #0
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 fc64 	bl	8009192 <USBD_LL_Transmit>

  return USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	2100      	movs	r1, #0
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 fc52 	bl	8009192 <USBD_LL_Transmit>

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2203      	movs	r2, #3
 800890a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800890e:	88fa      	ldrh	r2, [r7, #6]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008916:	88fa      	ldrh	r2, [r7, #6]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800891e:	88fb      	ldrh	r3, [r7, #6]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	2100      	movs	r1, #0
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 fc57 	bl	80091d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008942:	88fb      	ldrh	r3, [r7, #6]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	2100      	movs	r1, #0
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fc45 	bl	80091d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2204      	movs	r2, #4
 8008964:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008968:	2300      	movs	r3, #0
 800896a:	2200      	movs	r2, #0
 800896c:	2100      	movs	r1, #0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fc0f 	bl	8009192 <USBD_LL_Transmit>

  return USBD_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2205      	movs	r2, #5
 800898a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800898e:	2300      	movs	r3, #0
 8008990:	2200      	movs	r2, #0
 8008992:	2100      	movs	r1, #0
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fc1f 	bl	80091d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089a8:	2200      	movs	r2, #0
 80089aa:	4912      	ldr	r1, [pc, #72]	@ (80089f4 <MX_USB_DEVICE_Init+0x50>)
 80089ac:	4812      	ldr	r0, [pc, #72]	@ (80089f8 <MX_USB_DEVICE_Init+0x54>)
 80089ae:	f7fe ff62 	bl	8007876 <USBD_Init>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089b8:	f7f8 fa72 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089bc:	490f      	ldr	r1, [pc, #60]	@ (80089fc <MX_USB_DEVICE_Init+0x58>)
 80089be:	480e      	ldr	r0, [pc, #56]	@ (80089f8 <MX_USB_DEVICE_Init+0x54>)
 80089c0:	f7fe ff84 	bl	80078cc <USBD_RegisterClass>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089ca:	f7f8 fa69 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089ce:	490c      	ldr	r1, [pc, #48]	@ (8008a00 <MX_USB_DEVICE_Init+0x5c>)
 80089d0:	4809      	ldr	r0, [pc, #36]	@ (80089f8 <MX_USB_DEVICE_Init+0x54>)
 80089d2:	f7fe feb5 	bl	8007740 <USBD_CDC_RegisterInterface>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089dc:	f7f8 fa60 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089e0:	4805      	ldr	r0, [pc, #20]	@ (80089f8 <MX_USB_DEVICE_Init+0x54>)
 80089e2:	f7fe ff8c 	bl	80078fe <USBD_Start>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089ec:	f7f8 fa58 	bl	8000ea0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089f0:	bf00      	nop
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	2000012c 	.word	0x2000012c
 80089f8:	20000408 	.word	0x20000408
 80089fc:	20000018 	.word	0x20000018
 8008a00:	2000011c 	.word	0x2000011c

08008a04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a08:	2200      	movs	r2, #0
 8008a0a:	4905      	ldr	r1, [pc, #20]	@ (8008a20 <CDC_Init_FS+0x1c>)
 8008a0c:	4805      	ldr	r0, [pc, #20]	@ (8008a24 <CDC_Init_FS+0x20>)
 8008a0e:	f7fe fead 	bl	800776c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a12:	4905      	ldr	r1, [pc, #20]	@ (8008a28 <CDC_Init_FS+0x24>)
 8008a14:	4803      	ldr	r0, [pc, #12]	@ (8008a24 <CDC_Init_FS+0x20>)
 8008a16:	f7fe fec2 	bl	800779e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20000acc 	.word	0x20000acc
 8008a24:	20000408 	.word	0x20000408
 8008a28:	200006cc 	.word	0x200006cc

08008a2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bc80      	pop	{r7}
 8008a38:	4770      	bx	lr
	...

08008a3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	6039      	str	r1, [r7, #0]
 8008a46:	71fb      	strb	r3, [r7, #7]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	2b23      	cmp	r3, #35	@ 0x23
 8008a50:	d84a      	bhi.n	8008ae8 <CDC_Control_FS+0xac>
 8008a52:	a201      	add	r2, pc, #4	@ (adr r2, 8008a58 <CDC_Control_FS+0x1c>)
 8008a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a58:	08008ae9 	.word	0x08008ae9
 8008a5c:	08008ae9 	.word	0x08008ae9
 8008a60:	08008ae9 	.word	0x08008ae9
 8008a64:	08008ae9 	.word	0x08008ae9
 8008a68:	08008ae9 	.word	0x08008ae9
 8008a6c:	08008ae9 	.word	0x08008ae9
 8008a70:	08008ae9 	.word	0x08008ae9
 8008a74:	08008ae9 	.word	0x08008ae9
 8008a78:	08008ae9 	.word	0x08008ae9
 8008a7c:	08008ae9 	.word	0x08008ae9
 8008a80:	08008ae9 	.word	0x08008ae9
 8008a84:	08008ae9 	.word	0x08008ae9
 8008a88:	08008ae9 	.word	0x08008ae9
 8008a8c:	08008ae9 	.word	0x08008ae9
 8008a90:	08008ae9 	.word	0x08008ae9
 8008a94:	08008ae9 	.word	0x08008ae9
 8008a98:	08008ae9 	.word	0x08008ae9
 8008a9c:	08008ae9 	.word	0x08008ae9
 8008aa0:	08008ae9 	.word	0x08008ae9
 8008aa4:	08008ae9 	.word	0x08008ae9
 8008aa8:	08008ae9 	.word	0x08008ae9
 8008aac:	08008ae9 	.word	0x08008ae9
 8008ab0:	08008ae9 	.word	0x08008ae9
 8008ab4:	08008ae9 	.word	0x08008ae9
 8008ab8:	08008ae9 	.word	0x08008ae9
 8008abc:	08008ae9 	.word	0x08008ae9
 8008ac0:	08008ae9 	.word	0x08008ae9
 8008ac4:	08008ae9 	.word	0x08008ae9
 8008ac8:	08008ae9 	.word	0x08008ae9
 8008acc:	08008ae9 	.word	0x08008ae9
 8008ad0:	08008ae9 	.word	0x08008ae9
 8008ad4:	08008ae9 	.word	0x08008ae9
 8008ad8:	08008ae9 	.word	0x08008ae9
 8008adc:	08008ae9 	.word	0x08008ae9
 8008ae0:	08008ae9 	.word	0x08008ae9
 8008ae4:	08008ae9 	.word	0x08008ae9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ae8:	bf00      	nop
  }

  return (USBD_OK);
 8008aea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	4805      	ldr	r0, [pc, #20]	@ (8008b1c <CDC_Receive_FS+0x24>)
 8008b06:	f7fe fe4a 	bl	800779e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b0a:	4804      	ldr	r0, [pc, #16]	@ (8008b1c <CDC_Receive_FS+0x24>)
 8008b0c:	f7fe fe89 	bl	8007822 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000408 	.word	0x20000408

08008b20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b30:	4b0d      	ldr	r3, [pc, #52]	@ (8008b68 <CDC_Transmit_FS+0x48>)
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e00b      	b.n	8008b5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b46:	887b      	ldrh	r3, [r7, #2]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	4806      	ldr	r0, [pc, #24]	@ (8008b68 <CDC_Transmit_FS+0x48>)
 8008b4e:	f7fe fe0d 	bl	800776c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b52:	4805      	ldr	r0, [pc, #20]	@ (8008b68 <CDC_Transmit_FS+0x48>)
 8008b54:	f7fe fe36 	bl	80077c4 <USBD_CDC_TransmitPacket>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000408 	.word	0x20000408

08008b6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2212      	movs	r2, #18
 8008b7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b7e:	4b03      	ldr	r3, [pc, #12]	@ (8008b8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000148 	.word	0x20000148

08008b90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2204      	movs	r2, #4
 8008ba0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ba2:	4b03      	ldr	r3, [pc, #12]	@ (8008bb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	2000015c 	.word	0x2000015c

08008bb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d105      	bne.n	8008bd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4907      	ldr	r1, [pc, #28]	@ (8008be8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bca:	4808      	ldr	r0, [pc, #32]	@ (8008bec <USBD_FS_ProductStrDescriptor+0x38>)
 8008bcc:	f7ff fe0d 	bl	80087ea <USBD_GetString>
 8008bd0:	e004      	b.n	8008bdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4904      	ldr	r1, [pc, #16]	@ (8008be8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bd6:	4805      	ldr	r0, [pc, #20]	@ (8008bec <USBD_FS_ProductStrDescriptor+0x38>)
 8008bd8:	f7ff fe07 	bl	80087ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	@ (8008be8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20000ecc 	.word	0x20000ecc
 8008bec:	0800d9c0 	.word	0x0800d9c0

08008bf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	4904      	ldr	r1, [pc, #16]	@ (8008c10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c00:	4804      	ldr	r0, [pc, #16]	@ (8008c14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c02:	f7ff fdf2 	bl	80087ea <USBD_GetString>
  return USBD_StrDesc;
 8008c06:	4b02      	ldr	r3, [pc, #8]	@ (8008c10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000ecc 	.word	0x20000ecc
 8008c14:	0800d9d8 	.word	0x0800d9d8

08008c18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	221a      	movs	r2, #26
 8008c28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c2a:	f000 f843 	bl	8008cb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c2e:	4b02      	ldr	r3, [pc, #8]	@ (8008c38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000160 	.word	0x20000160

08008c3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	4907      	ldr	r1, [pc, #28]	@ (8008c70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c52:	4808      	ldr	r0, [pc, #32]	@ (8008c74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c54:	f7ff fdc9 	bl	80087ea <USBD_GetString>
 8008c58:	e004      	b.n	8008c64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	4904      	ldr	r1, [pc, #16]	@ (8008c70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c5e:	4805      	ldr	r0, [pc, #20]	@ (8008c74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c60:	f7ff fdc3 	bl	80087ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c64:	4b02      	ldr	r3, [pc, #8]	@ (8008c70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20000ecc 	.word	0x20000ecc
 8008c74:	0800d9ec 	.word	0x0800d9ec

08008c78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	4907      	ldr	r1, [pc, #28]	@ (8008cac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c8e:	4808      	ldr	r0, [pc, #32]	@ (8008cb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c90:	f7ff fdab 	bl	80087ea <USBD_GetString>
 8008c94:	e004      	b.n	8008ca0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	4904      	ldr	r1, [pc, #16]	@ (8008cac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c9a:	4805      	ldr	r0, [pc, #20]	@ (8008cb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c9c:	f7ff fda5 	bl	80087ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ca0:	4b02      	ldr	r3, [pc, #8]	@ (8008cac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000ecc 	.word	0x20000ecc
 8008cb0:	0800d9f8 	.word	0x0800d9f8

08008cb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cba:	4b0f      	ldr	r3, [pc, #60]	@ (8008cf8 <Get_SerialNum+0x44>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8008cfc <Get_SerialNum+0x48>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8008d00 <Get_SerialNum+0x4c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cda:	2208      	movs	r2, #8
 8008cdc:	4909      	ldr	r1, [pc, #36]	@ (8008d04 <Get_SerialNum+0x50>)
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 f814 	bl	8008d0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ce4:	2204      	movs	r2, #4
 8008ce6:	4908      	ldr	r1, [pc, #32]	@ (8008d08 <Get_SerialNum+0x54>)
 8008ce8:	68b8      	ldr	r0, [r7, #8]
 8008cea:	f000 f80f 	bl	8008d0c <IntToUnicode>
  }
}
 8008cee:	bf00      	nop
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	1ffff7e8 	.word	0x1ffff7e8
 8008cfc:	1ffff7ec 	.word	0x1ffff7ec
 8008d00:	1ffff7f0 	.word	0x1ffff7f0
 8008d04:	20000162 	.word	0x20000162
 8008d08:	20000172 	.word	0x20000172

08008d0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d1e:	2300      	movs	r3, #0
 8008d20:	75fb      	strb	r3, [r7, #23]
 8008d22:	e027      	b.n	8008d74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	0f1b      	lsrs	r3, r3, #28
 8008d28:	2b09      	cmp	r3, #9
 8008d2a:	d80b      	bhi.n	8008d44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	0f1b      	lsrs	r3, r3, #28
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	4619      	mov	r1, r3
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	440b      	add	r3, r1
 8008d3c:	3230      	adds	r2, #48	@ 0x30
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	e00a      	b.n	8008d5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	0f1b      	lsrs	r3, r3, #28
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	440b      	add	r3, r1
 8008d54:	3237      	adds	r2, #55	@ 0x37
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	011b      	lsls	r3, r3, #4
 8008d5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	3301      	adds	r3, #1
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	4413      	add	r3, r2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	3301      	adds	r3, #1
 8008d72:	75fb      	strb	r3, [r7, #23]
 8008d74:	7dfa      	ldrb	r2, [r7, #23]
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d3d3      	bcc.n	8008d24 <IntToUnicode+0x18>
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr

08008d88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a0d      	ldr	r2, [pc, #52]	@ (8008dcc <HAL_PCD_MspInit+0x44>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d113      	bne.n	8008dc2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008dd0 <HAL_PCD_MspInit+0x48>)
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8008dd0 <HAL_PCD_MspInit+0x48>)
 8008da0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008da4:	61d3      	str	r3, [r2, #28]
 8008da6:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd0 <HAL_PCD_MspInit+0x48>)
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008db2:	2200      	movs	r2, #0
 8008db4:	2100      	movs	r1, #0
 8008db6:	2014      	movs	r0, #20
 8008db8:	f7f8 fba1 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008dbc:	2014      	movs	r0, #20
 8008dbe:	f7f8 fbba 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40005c00 	.word	0x40005c00
 8008dd0:	40021000 	.word	0x40021000

08008dd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8008de8:	4619      	mov	r1, r3
 8008dea:	4610      	mov	r0, r2
 8008dec:	f7fe fdcf 	bl	800798e <USBD_LL_SetupStage>
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008e0a:	78fa      	ldrb	r2, [r7, #3]
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	440b      	add	r3, r1
 8008e18:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	4619      	mov	r1, r3
 8008e22:	f7fe fe01 	bl	8007a28 <USBD_LL_DataOutStage>
}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008e40:	78fa      	ldrb	r2, [r7, #3]
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	440b      	add	r3, r1
 8008e4e:	333c      	adds	r3, #60	@ 0x3c
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	78fb      	ldrb	r3, [r7, #3]
 8008e54:	4619      	mov	r1, r3
 8008e56:	f7fe fe58 	bl	8007b0a <USBD_LL_DataInStage>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe ff68 	bl	8007d46 <USBD_LL_SOF>
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e86:	2301      	movs	r3, #1
 8008e88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d001      	beq.n	8008e96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e92:	f7f8 f805 	bl	8000ea0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008e9c:	7bfa      	ldrb	r2, [r7, #15]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe ff18 	bl	8007cd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe fed1 	bl	8007c54 <USBD_LL_Reset>
}
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe ff12 	bl	8007cf4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ed8:	4b04      	ldr	r3, [pc, #16]	@ (8008eec <HAL_PCD_SuspendCallback+0x30>)
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	4a03      	ldr	r2, [pc, #12]	@ (8008eec <HAL_PCD_SuspendCallback+0x30>)
 8008ede:	f043 0306 	orr.w	r3, r3, #6
 8008ee2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	e000ed00 	.word	0xe000ed00

08008ef0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe ff0c 	bl	8007d1c <USBD_LL_Resume>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008f14:	4a28      	ldr	r2, [pc, #160]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a26      	ldr	r2, [pc, #152]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f20:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008f24:	4b24      	ldr	r3, [pc, #144]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f26:	4a25      	ldr	r2, [pc, #148]	@ (8008fbc <USBD_LL_Init+0xb0>)
 8008f28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f2a:	4b23      	ldr	r3, [pc, #140]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f2c:	2208      	movs	r2, #8
 8008f2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008f30:	4b21      	ldr	r3, [pc, #132]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f32:	2202      	movs	r2, #2
 8008f34:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008f36:	4b20      	ldr	r3, [pc, #128]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f42:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f48:	481b      	ldr	r0, [pc, #108]	@ (8008fb8 <USBD_LL_Init+0xac>)
 8008f4a:	f7f9 fb14 	bl	8002576 <HAL_PCD_Init>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008f54:	f7f7 ffa4 	bl	8000ea0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f5e:	2318      	movs	r3, #24
 8008f60:	2200      	movs	r2, #0
 8008f62:	2100      	movs	r1, #0
 8008f64:	f7fb f832 	bl	8003fcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f6e:	2358      	movs	r3, #88	@ 0x58
 8008f70:	2200      	movs	r2, #0
 8008f72:	2180      	movs	r1, #128	@ 0x80
 8008f74:	f7fb f82a 	bl	8003fcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f7e:	23c0      	movs	r3, #192	@ 0xc0
 8008f80:	2200      	movs	r2, #0
 8008f82:	2181      	movs	r1, #129	@ 0x81
 8008f84:	f7fb f822 	bl	8003fcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008f92:	2200      	movs	r2, #0
 8008f94:	2101      	movs	r1, #1
 8008f96:	f7fb f819 	bl	8003fcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2182      	movs	r1, #130	@ 0x82
 8008fa8:	f7fb f810 	bl	8003fcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	200010cc 	.word	0x200010cc
 8008fbc:	40005c00 	.word	0x40005c00

08008fc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7f9 fbcc 	bl	8002774 <HAL_PCD_Start>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f94e 	bl	8009284 <USBD_Get_USB_Status>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	4608      	mov	r0, r1
 8009000:	4611      	mov	r1, r2
 8009002:	461a      	mov	r2, r3
 8009004:	4603      	mov	r3, r0
 8009006:	70fb      	strb	r3, [r7, #3]
 8009008:	460b      	mov	r3, r1
 800900a:	70bb      	strb	r3, [r7, #2]
 800900c:	4613      	mov	r3, r2
 800900e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800901e:	78bb      	ldrb	r3, [r7, #2]
 8009020:	883a      	ldrh	r2, [r7, #0]
 8009022:	78f9      	ldrb	r1, [r7, #3]
 8009024:	f7f9 fd21 	bl	8002a6a <HAL_PCD_EP_Open>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	4618      	mov	r0, r3
 8009030:	f000 f928 	bl	8009284 <USBD_Get_USB_Status>
 8009034:	4603      	mov	r3, r0
 8009036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009038:	7bbb      	ldrb	r3, [r7, #14]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	460b      	mov	r3, r1
 800904c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800905c:	78fa      	ldrb	r2, [r7, #3]
 800905e:	4611      	mov	r1, r2
 8009060:	4618      	mov	r0, r3
 8009062:	f7f9 fd5f 	bl	8002b24 <HAL_PCD_EP_Close>
 8009066:	4603      	mov	r3, r0
 8009068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	4618      	mov	r0, r3
 800906e:	f000 f909 	bl	8009284 <USBD_Get_USB_Status>
 8009072:	4603      	mov	r3, r0
 8009074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009076:	7bbb      	ldrb	r3, [r7, #14]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7f9 fe07 	bl	8002cb2 <HAL_PCD_EP_SetStall>
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 f8ea 	bl	8009284 <USBD_Get_USB_Status>
 80090b0:	4603      	mov	r3, r0
 80090b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f7f9 fe48 	bl	8002d72 <HAL_PCD_EP_ClrStall>
 80090e2:	4603      	mov	r3, r0
 80090e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f8cb 	bl	8009284 <USBD_Get_USB_Status>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800910e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009114:	2b00      	cmp	r3, #0
 8009116:	da0c      	bge.n	8009132 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800911e:	68f9      	ldr	r1, [r7, #12]
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	4613      	mov	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	440b      	add	r3, r1
 800912c:	3302      	adds	r3, #2
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	e00b      	b.n	800914a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	440b      	add	r3, r1
 8009144:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8009148:	781b      	ldrb	r3, [r3, #0]
  }
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800916e:	78fa      	ldrb	r2, [r7, #3]
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f7f9 fc54 	bl	8002a20 <HAL_PCD_SetAddress>
 8009178:	4603      	mov	r3, r0
 800917a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f880 	bl	8009284 <USBD_Get_USB_Status>
 8009184:	4603      	mov	r3, r0
 8009186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009188:	7bbb      	ldrb	r3, [r7, #14]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b086      	sub	sp, #24
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	461a      	mov	r2, r3
 800919e:	460b      	mov	r3, r1
 80091a0:	72fb      	strb	r3, [r7, #11]
 80091a2:	4613      	mov	r3, r2
 80091a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091b4:	893b      	ldrh	r3, [r7, #8]
 80091b6:	7af9      	ldrb	r1, [r7, #11]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	f7f9 fd43 	bl	8002c44 <HAL_PCD_EP_Transmit>
 80091be:	4603      	mov	r3, r0
 80091c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 f85d 	bl	8009284 <USBD_Get_USB_Status>
 80091ca:	4603      	mov	r3, r0
 80091cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	607a      	str	r2, [r7, #4]
 80091e2:	461a      	mov	r2, r3
 80091e4:	460b      	mov	r3, r1
 80091e6:	72fb      	strb	r3, [r7, #11]
 80091e8:	4613      	mov	r3, r2
 80091ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091fa:	893b      	ldrh	r3, [r7, #8]
 80091fc:	7af9      	ldrb	r1, [r7, #11]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	f7f9 fcd8 	bl	8002bb4 <HAL_PCD_EP_Receive>
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f83a 	bl	8009284 <USBD_Get_USB_Status>
 8009210:	4603      	mov	r3, r0
 8009212:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009214:	7dbb      	ldrb	r3, [r7, #22]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	460b      	mov	r3, r1
 8009228:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7f9 fcee 	bl	8002c16 <HAL_PCD_EP_GetRxCount>
 800923a:	4603      	mov	r3, r0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800924c:	4b02      	ldr	r3, [pc, #8]	@ (8009258 <USBD_static_malloc+0x14>)
}
 800924e:	4618      	mov	r0, r3
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr
 8009258:	200013bc 	.word	0x200013bc

0800925c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]

}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	bc80      	pop	{r7}
 800926c:	4770      	bx	lr

0800926e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800927a:	bf00      	nop
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	bc80      	pop	{r7}
 8009282:	4770      	bx	lr

08009284 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	2b03      	cmp	r3, #3
 8009296:	d817      	bhi.n	80092c8 <USBD_Get_USB_Status+0x44>
 8009298:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <USBD_Get_USB_Status+0x1c>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092b1 	.word	0x080092b1
 80092a4:	080092b7 	.word	0x080092b7
 80092a8:	080092bd 	.word	0x080092bd
 80092ac:	080092c3 	.word	0x080092c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
    break;
 80092b4:	e00b      	b.n	80092ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092b6:	2302      	movs	r3, #2
 80092b8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ba:	e008      	b.n	80092ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092bc:	2301      	movs	r3, #1
 80092be:	73fb      	strb	r3, [r7, #15]
    break;
 80092c0:	e005      	b.n	80092ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092c2:	2302      	movs	r3, #2
 80092c4:	73fb      	strb	r3, [r7, #15]
    break;
 80092c6:	e002      	b.n	80092ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092c8:	2302      	movs	r3, #2
 80092ca:	73fb      	strb	r3, [r7, #15]
    break;
 80092cc:	bf00      	nop
  }
  return usb_status;
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop

080092dc <__cvt>:
 80092dc:	2b00      	cmp	r3, #0
 80092de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e2:	461d      	mov	r5, r3
 80092e4:	bfbb      	ittet	lt
 80092e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80092ea:	461d      	movlt	r5, r3
 80092ec:	2300      	movge	r3, #0
 80092ee:	232d      	movlt	r3, #45	@ 0x2d
 80092f0:	b088      	sub	sp, #32
 80092f2:	4614      	mov	r4, r2
 80092f4:	bfb8      	it	lt
 80092f6:	4614      	movlt	r4, r2
 80092f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80092fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80092fc:	7013      	strb	r3, [r2, #0]
 80092fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009300:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009304:	f023 0820 	bic.w	r8, r3, #32
 8009308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800930c:	d005      	beq.n	800931a <__cvt+0x3e>
 800930e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009312:	d100      	bne.n	8009316 <__cvt+0x3a>
 8009314:	3601      	adds	r6, #1
 8009316:	2302      	movs	r3, #2
 8009318:	e000      	b.n	800931c <__cvt+0x40>
 800931a:	2303      	movs	r3, #3
 800931c:	aa07      	add	r2, sp, #28
 800931e:	9204      	str	r2, [sp, #16]
 8009320:	aa06      	add	r2, sp, #24
 8009322:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009326:	e9cd 3600 	strd	r3, r6, [sp]
 800932a:	4622      	mov	r2, r4
 800932c:	462b      	mov	r3, r5
 800932e:	f001 fe9b 	bl	800b068 <_dtoa_r>
 8009332:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009336:	4607      	mov	r7, r0
 8009338:	d119      	bne.n	800936e <__cvt+0x92>
 800933a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800933c:	07db      	lsls	r3, r3, #31
 800933e:	d50e      	bpl.n	800935e <__cvt+0x82>
 8009340:	eb00 0906 	add.w	r9, r0, r6
 8009344:	2200      	movs	r2, #0
 8009346:	2300      	movs	r3, #0
 8009348:	4620      	mov	r0, r4
 800934a:	4629      	mov	r1, r5
 800934c:	f7f7 fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 8009350:	b108      	cbz	r0, 8009356 <__cvt+0x7a>
 8009352:	f8cd 901c 	str.w	r9, [sp, #28]
 8009356:	2230      	movs	r2, #48	@ 0x30
 8009358:	9b07      	ldr	r3, [sp, #28]
 800935a:	454b      	cmp	r3, r9
 800935c:	d31e      	bcc.n	800939c <__cvt+0xc0>
 800935e:	4638      	mov	r0, r7
 8009360:	9b07      	ldr	r3, [sp, #28]
 8009362:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009364:	1bdb      	subs	r3, r3, r7
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	b008      	add	sp, #32
 800936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009372:	eb00 0906 	add.w	r9, r0, r6
 8009376:	d1e5      	bne.n	8009344 <__cvt+0x68>
 8009378:	7803      	ldrb	r3, [r0, #0]
 800937a:	2b30      	cmp	r3, #48	@ 0x30
 800937c:	d10a      	bne.n	8009394 <__cvt+0xb8>
 800937e:	2200      	movs	r2, #0
 8009380:	2300      	movs	r3, #0
 8009382:	4620      	mov	r0, r4
 8009384:	4629      	mov	r1, r5
 8009386:	f7f7 fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800938a:	b918      	cbnz	r0, 8009394 <__cvt+0xb8>
 800938c:	f1c6 0601 	rsb	r6, r6, #1
 8009390:	f8ca 6000 	str.w	r6, [sl]
 8009394:	f8da 3000 	ldr.w	r3, [sl]
 8009398:	4499      	add	r9, r3
 800939a:	e7d3      	b.n	8009344 <__cvt+0x68>
 800939c:	1c59      	adds	r1, r3, #1
 800939e:	9107      	str	r1, [sp, #28]
 80093a0:	701a      	strb	r2, [r3, #0]
 80093a2:	e7d9      	b.n	8009358 <__cvt+0x7c>

080093a4 <__exponent>:
 80093a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093a6:	2900      	cmp	r1, #0
 80093a8:	bfb6      	itet	lt
 80093aa:	232d      	movlt	r3, #45	@ 0x2d
 80093ac:	232b      	movge	r3, #43	@ 0x2b
 80093ae:	4249      	neglt	r1, r1
 80093b0:	2909      	cmp	r1, #9
 80093b2:	7002      	strb	r2, [r0, #0]
 80093b4:	7043      	strb	r3, [r0, #1]
 80093b6:	dd29      	ble.n	800940c <__exponent+0x68>
 80093b8:	f10d 0307 	add.w	r3, sp, #7
 80093bc:	461d      	mov	r5, r3
 80093be:	270a      	movs	r7, #10
 80093c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80093c4:	461a      	mov	r2, r3
 80093c6:	fb07 1416 	mls	r4, r7, r6, r1
 80093ca:	3430      	adds	r4, #48	@ 0x30
 80093cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80093d0:	460c      	mov	r4, r1
 80093d2:	2c63      	cmp	r4, #99	@ 0x63
 80093d4:	4631      	mov	r1, r6
 80093d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80093da:	dcf1      	bgt.n	80093c0 <__exponent+0x1c>
 80093dc:	3130      	adds	r1, #48	@ 0x30
 80093de:	1e94      	subs	r4, r2, #2
 80093e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80093e4:	4623      	mov	r3, r4
 80093e6:	1c41      	adds	r1, r0, #1
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	d30a      	bcc.n	8009402 <__exponent+0x5e>
 80093ec:	f10d 0309 	add.w	r3, sp, #9
 80093f0:	1a9b      	subs	r3, r3, r2
 80093f2:	42ac      	cmp	r4, r5
 80093f4:	bf88      	it	hi
 80093f6:	2300      	movhi	r3, #0
 80093f8:	3302      	adds	r3, #2
 80093fa:	4403      	add	r3, r0
 80093fc:	1a18      	subs	r0, r3, r0
 80093fe:	b003      	add	sp, #12
 8009400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009402:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009406:	f801 6f01 	strb.w	r6, [r1, #1]!
 800940a:	e7ed      	b.n	80093e8 <__exponent+0x44>
 800940c:	2330      	movs	r3, #48	@ 0x30
 800940e:	3130      	adds	r1, #48	@ 0x30
 8009410:	7083      	strb	r3, [r0, #2]
 8009412:	70c1      	strb	r1, [r0, #3]
 8009414:	1d03      	adds	r3, r0, #4
 8009416:	e7f1      	b.n	80093fc <__exponent+0x58>

08009418 <_printf_float>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	b091      	sub	sp, #68	@ 0x44
 800941e:	460c      	mov	r4, r1
 8009420:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009424:	4616      	mov	r6, r2
 8009426:	461f      	mov	r7, r3
 8009428:	4605      	mov	r5, r0
 800942a:	f001 fd3b 	bl	800aea4 <_localeconv_r>
 800942e:	6803      	ldr	r3, [r0, #0]
 8009430:	4618      	mov	r0, r3
 8009432:	9308      	str	r3, [sp, #32]
 8009434:	f7f6 fe8c 	bl	8000150 <strlen>
 8009438:	2300      	movs	r3, #0
 800943a:	930e      	str	r3, [sp, #56]	@ 0x38
 800943c:	f8d8 3000 	ldr.w	r3, [r8]
 8009440:	9009      	str	r0, [sp, #36]	@ 0x24
 8009442:	3307      	adds	r3, #7
 8009444:	f023 0307 	bic.w	r3, r3, #7
 8009448:	f103 0208 	add.w	r2, r3, #8
 800944c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009450:	f8d4 b000 	ldr.w	fp, [r4]
 8009454:	f8c8 2000 	str.w	r2, [r8]
 8009458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800945c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009462:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009466:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800946a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800946e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009472:	4b9c      	ldr	r3, [pc, #624]	@ (80096e4 <_printf_float+0x2cc>)
 8009474:	f7f7 faca 	bl	8000a0c <__aeabi_dcmpun>
 8009478:	bb70      	cbnz	r0, 80094d8 <_printf_float+0xc0>
 800947a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800947e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009482:	4b98      	ldr	r3, [pc, #608]	@ (80096e4 <_printf_float+0x2cc>)
 8009484:	f7f7 faa4 	bl	80009d0 <__aeabi_dcmple>
 8009488:	bb30      	cbnz	r0, 80094d8 <_printf_float+0xc0>
 800948a:	2200      	movs	r2, #0
 800948c:	2300      	movs	r3, #0
 800948e:	4640      	mov	r0, r8
 8009490:	4649      	mov	r1, r9
 8009492:	f7f7 fa93 	bl	80009bc <__aeabi_dcmplt>
 8009496:	b110      	cbz	r0, 800949e <_printf_float+0x86>
 8009498:	232d      	movs	r3, #45	@ 0x2d
 800949a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800949e:	4a92      	ldr	r2, [pc, #584]	@ (80096e8 <_printf_float+0x2d0>)
 80094a0:	4b92      	ldr	r3, [pc, #584]	@ (80096ec <_printf_float+0x2d4>)
 80094a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094a6:	bf94      	ite	ls
 80094a8:	4690      	movls	r8, r2
 80094aa:	4698      	movhi	r8, r3
 80094ac:	2303      	movs	r3, #3
 80094ae:	f04f 0900 	mov.w	r9, #0
 80094b2:	6123      	str	r3, [r4, #16]
 80094b4:	f02b 0304 	bic.w	r3, fp, #4
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	4633      	mov	r3, r6
 80094bc:	4621      	mov	r1, r4
 80094be:	4628      	mov	r0, r5
 80094c0:	9700      	str	r7, [sp, #0]
 80094c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80094c4:	f000 f9d4 	bl	8009870 <_printf_common>
 80094c8:	3001      	adds	r0, #1
 80094ca:	f040 8090 	bne.w	80095ee <_printf_float+0x1d6>
 80094ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094d2:	b011      	add	sp, #68	@ 0x44
 80094d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d8:	4642      	mov	r2, r8
 80094da:	464b      	mov	r3, r9
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	f7f7 fa94 	bl	8000a0c <__aeabi_dcmpun>
 80094e4:	b148      	cbz	r0, 80094fa <_printf_float+0xe2>
 80094e6:	464b      	mov	r3, r9
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bfb8      	it	lt
 80094ec:	232d      	movlt	r3, #45	@ 0x2d
 80094ee:	4a80      	ldr	r2, [pc, #512]	@ (80096f0 <_printf_float+0x2d8>)
 80094f0:	bfb8      	it	lt
 80094f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80094f6:	4b7f      	ldr	r3, [pc, #508]	@ (80096f4 <_printf_float+0x2dc>)
 80094f8:	e7d3      	b.n	80094a2 <_printf_float+0x8a>
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	d13f      	bne.n	8009584 <_printf_float+0x16c>
 8009504:	2306      	movs	r3, #6
 8009506:	6063      	str	r3, [r4, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	9206      	str	r2, [sp, #24]
 8009512:	aa0e      	add	r2, sp, #56	@ 0x38
 8009514:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009518:	aa0d      	add	r2, sp, #52	@ 0x34
 800951a:	9203      	str	r2, [sp, #12]
 800951c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009520:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	4642      	mov	r2, r8
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	4628      	mov	r0, r5
 800952c:	464b      	mov	r3, r9
 800952e:	910a      	str	r1, [sp, #40]	@ 0x28
 8009530:	f7ff fed4 	bl	80092dc <__cvt>
 8009534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009536:	4680      	mov	r8, r0
 8009538:	2947      	cmp	r1, #71	@ 0x47
 800953a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800953c:	d128      	bne.n	8009590 <_printf_float+0x178>
 800953e:	1cc8      	adds	r0, r1, #3
 8009540:	db02      	blt.n	8009548 <_printf_float+0x130>
 8009542:	6863      	ldr	r3, [r4, #4]
 8009544:	4299      	cmp	r1, r3
 8009546:	dd40      	ble.n	80095ca <_printf_float+0x1b2>
 8009548:	f1aa 0a02 	sub.w	sl, sl, #2
 800954c:	fa5f fa8a 	uxtb.w	sl, sl
 8009550:	4652      	mov	r2, sl
 8009552:	3901      	subs	r1, #1
 8009554:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009558:	910d      	str	r1, [sp, #52]	@ 0x34
 800955a:	f7ff ff23 	bl	80093a4 <__exponent>
 800955e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009560:	4681      	mov	r9, r0
 8009562:	1813      	adds	r3, r2, r0
 8009564:	2a01      	cmp	r2, #1
 8009566:	6123      	str	r3, [r4, #16]
 8009568:	dc02      	bgt.n	8009570 <_printf_float+0x158>
 800956a:	6822      	ldr	r2, [r4, #0]
 800956c:	07d2      	lsls	r2, r2, #31
 800956e:	d501      	bpl.n	8009574 <_printf_float+0x15c>
 8009570:	3301      	adds	r3, #1
 8009572:	6123      	str	r3, [r4, #16]
 8009574:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009578:	2b00      	cmp	r3, #0
 800957a:	d09e      	beq.n	80094ba <_printf_float+0xa2>
 800957c:	232d      	movs	r3, #45	@ 0x2d
 800957e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009582:	e79a      	b.n	80094ba <_printf_float+0xa2>
 8009584:	2947      	cmp	r1, #71	@ 0x47
 8009586:	d1bf      	bne.n	8009508 <_printf_float+0xf0>
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1bd      	bne.n	8009508 <_printf_float+0xf0>
 800958c:	2301      	movs	r3, #1
 800958e:	e7ba      	b.n	8009506 <_printf_float+0xee>
 8009590:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009594:	d9dc      	bls.n	8009550 <_printf_float+0x138>
 8009596:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800959a:	d118      	bne.n	80095ce <_printf_float+0x1b6>
 800959c:	2900      	cmp	r1, #0
 800959e:	6863      	ldr	r3, [r4, #4]
 80095a0:	dd0b      	ble.n	80095ba <_printf_float+0x1a2>
 80095a2:	6121      	str	r1, [r4, #16]
 80095a4:	b913      	cbnz	r3, 80095ac <_printf_float+0x194>
 80095a6:	6822      	ldr	r2, [r4, #0]
 80095a8:	07d0      	lsls	r0, r2, #31
 80095aa:	d502      	bpl.n	80095b2 <_printf_float+0x19a>
 80095ac:	3301      	adds	r3, #1
 80095ae:	440b      	add	r3, r1
 80095b0:	6123      	str	r3, [r4, #16]
 80095b2:	f04f 0900 	mov.w	r9, #0
 80095b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095b8:	e7dc      	b.n	8009574 <_printf_float+0x15c>
 80095ba:	b913      	cbnz	r3, 80095c2 <_printf_float+0x1aa>
 80095bc:	6822      	ldr	r2, [r4, #0]
 80095be:	07d2      	lsls	r2, r2, #31
 80095c0:	d501      	bpl.n	80095c6 <_printf_float+0x1ae>
 80095c2:	3302      	adds	r3, #2
 80095c4:	e7f4      	b.n	80095b0 <_printf_float+0x198>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e7f2      	b.n	80095b0 <_printf_float+0x198>
 80095ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80095ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095d0:	4299      	cmp	r1, r3
 80095d2:	db05      	blt.n	80095e0 <_printf_float+0x1c8>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	6121      	str	r1, [r4, #16]
 80095d8:	07d8      	lsls	r0, r3, #31
 80095da:	d5ea      	bpl.n	80095b2 <_printf_float+0x19a>
 80095dc:	1c4b      	adds	r3, r1, #1
 80095de:	e7e7      	b.n	80095b0 <_printf_float+0x198>
 80095e0:	2900      	cmp	r1, #0
 80095e2:	bfcc      	ite	gt
 80095e4:	2201      	movgt	r2, #1
 80095e6:	f1c1 0202 	rsble	r2, r1, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	e7e0      	b.n	80095b0 <_printf_float+0x198>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	055a      	lsls	r2, r3, #21
 80095f2:	d407      	bmi.n	8009604 <_printf_float+0x1ec>
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	4642      	mov	r2, r8
 80095f8:	4631      	mov	r1, r6
 80095fa:	4628      	mov	r0, r5
 80095fc:	47b8      	blx	r7
 80095fe:	3001      	adds	r0, #1
 8009600:	d12b      	bne.n	800965a <_printf_float+0x242>
 8009602:	e764      	b.n	80094ce <_printf_float+0xb6>
 8009604:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009608:	f240 80dc 	bls.w	80097c4 <_printf_float+0x3ac>
 800960c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009610:	2200      	movs	r2, #0
 8009612:	2300      	movs	r3, #0
 8009614:	f7f7 f9c8 	bl	80009a8 <__aeabi_dcmpeq>
 8009618:	2800      	cmp	r0, #0
 800961a:	d033      	beq.n	8009684 <_printf_float+0x26c>
 800961c:	2301      	movs	r3, #1
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	4a35      	ldr	r2, [pc, #212]	@ (80096f8 <_printf_float+0x2e0>)
 8009624:	47b8      	blx	r7
 8009626:	3001      	adds	r0, #1
 8009628:	f43f af51 	beq.w	80094ce <_printf_float+0xb6>
 800962c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009630:	4543      	cmp	r3, r8
 8009632:	db02      	blt.n	800963a <_printf_float+0x222>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	07d8      	lsls	r0, r3, #31
 8009638:	d50f      	bpl.n	800965a <_printf_float+0x242>
 800963a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f af42 	beq.w	80094ce <_printf_float+0xb6>
 800964a:	f04f 0900 	mov.w	r9, #0
 800964e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009652:	f104 0a1a 	add.w	sl, r4, #26
 8009656:	45c8      	cmp	r8, r9
 8009658:	dc09      	bgt.n	800966e <_printf_float+0x256>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	079b      	lsls	r3, r3, #30
 800965e:	f100 8102 	bmi.w	8009866 <_printf_float+0x44e>
 8009662:	68e0      	ldr	r0, [r4, #12]
 8009664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009666:	4298      	cmp	r0, r3
 8009668:	bfb8      	it	lt
 800966a:	4618      	movlt	r0, r3
 800966c:	e731      	b.n	80094d2 <_printf_float+0xba>
 800966e:	2301      	movs	r3, #1
 8009670:	4652      	mov	r2, sl
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	f43f af28 	beq.w	80094ce <_printf_float+0xb6>
 800967e:	f109 0901 	add.w	r9, r9, #1
 8009682:	e7e8      	b.n	8009656 <_printf_float+0x23e>
 8009684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009686:	2b00      	cmp	r3, #0
 8009688:	dc38      	bgt.n	80096fc <_printf_float+0x2e4>
 800968a:	2301      	movs	r3, #1
 800968c:	4631      	mov	r1, r6
 800968e:	4628      	mov	r0, r5
 8009690:	4a19      	ldr	r2, [pc, #100]	@ (80096f8 <_printf_float+0x2e0>)
 8009692:	47b8      	blx	r7
 8009694:	3001      	adds	r0, #1
 8009696:	f43f af1a 	beq.w	80094ce <_printf_float+0xb6>
 800969a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800969e:	ea59 0303 	orrs.w	r3, r9, r3
 80096a2:	d102      	bne.n	80096aa <_printf_float+0x292>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	07d9      	lsls	r1, r3, #31
 80096a8:	d5d7      	bpl.n	800965a <_printf_float+0x242>
 80096aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096ae:	4631      	mov	r1, r6
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f af0a 	beq.w	80094ce <_printf_float+0xb6>
 80096ba:	f04f 0a00 	mov.w	sl, #0
 80096be:	f104 0b1a 	add.w	fp, r4, #26
 80096c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096c4:	425b      	negs	r3, r3
 80096c6:	4553      	cmp	r3, sl
 80096c8:	dc01      	bgt.n	80096ce <_printf_float+0x2b6>
 80096ca:	464b      	mov	r3, r9
 80096cc:	e793      	b.n	80095f6 <_printf_float+0x1de>
 80096ce:	2301      	movs	r3, #1
 80096d0:	465a      	mov	r2, fp
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	f43f aef8 	beq.w	80094ce <_printf_float+0xb6>
 80096de:	f10a 0a01 	add.w	sl, sl, #1
 80096e2:	e7ee      	b.n	80096c2 <_printf_float+0x2aa>
 80096e4:	7fefffff 	.word	0x7fefffff
 80096e8:	0800da32 	.word	0x0800da32
 80096ec:	0800da36 	.word	0x0800da36
 80096f0:	0800da3a 	.word	0x0800da3a
 80096f4:	0800da3e 	.word	0x0800da3e
 80096f8:	0800da42 	.word	0x0800da42
 80096fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80096fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009702:	4553      	cmp	r3, sl
 8009704:	bfa8      	it	ge
 8009706:	4653      	movge	r3, sl
 8009708:	2b00      	cmp	r3, #0
 800970a:	4699      	mov	r9, r3
 800970c:	dc36      	bgt.n	800977c <_printf_float+0x364>
 800970e:	f04f 0b00 	mov.w	fp, #0
 8009712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009716:	f104 021a 	add.w	r2, r4, #26
 800971a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800971c:	930a      	str	r3, [sp, #40]	@ 0x28
 800971e:	eba3 0309 	sub.w	r3, r3, r9
 8009722:	455b      	cmp	r3, fp
 8009724:	dc31      	bgt.n	800978a <_printf_float+0x372>
 8009726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009728:	459a      	cmp	sl, r3
 800972a:	dc3a      	bgt.n	80097a2 <_printf_float+0x38a>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	07da      	lsls	r2, r3, #31
 8009730:	d437      	bmi.n	80097a2 <_printf_float+0x38a>
 8009732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009734:	ebaa 0903 	sub.w	r9, sl, r3
 8009738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800973a:	ebaa 0303 	sub.w	r3, sl, r3
 800973e:	4599      	cmp	r9, r3
 8009740:	bfa8      	it	ge
 8009742:	4699      	movge	r9, r3
 8009744:	f1b9 0f00 	cmp.w	r9, #0
 8009748:	dc33      	bgt.n	80097b2 <_printf_float+0x39a>
 800974a:	f04f 0800 	mov.w	r8, #0
 800974e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009752:	f104 0b1a 	add.w	fp, r4, #26
 8009756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009758:	ebaa 0303 	sub.w	r3, sl, r3
 800975c:	eba3 0309 	sub.w	r3, r3, r9
 8009760:	4543      	cmp	r3, r8
 8009762:	f77f af7a 	ble.w	800965a <_printf_float+0x242>
 8009766:	2301      	movs	r3, #1
 8009768:	465a      	mov	r2, fp
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	f43f aeac 	beq.w	80094ce <_printf_float+0xb6>
 8009776:	f108 0801 	add.w	r8, r8, #1
 800977a:	e7ec      	b.n	8009756 <_printf_float+0x33e>
 800977c:	4642      	mov	r2, r8
 800977e:	4631      	mov	r1, r6
 8009780:	4628      	mov	r0, r5
 8009782:	47b8      	blx	r7
 8009784:	3001      	adds	r0, #1
 8009786:	d1c2      	bne.n	800970e <_printf_float+0x2f6>
 8009788:	e6a1      	b.n	80094ce <_printf_float+0xb6>
 800978a:	2301      	movs	r3, #1
 800978c:	4631      	mov	r1, r6
 800978e:	4628      	mov	r0, r5
 8009790:	920a      	str	r2, [sp, #40]	@ 0x28
 8009792:	47b8      	blx	r7
 8009794:	3001      	adds	r0, #1
 8009796:	f43f ae9a 	beq.w	80094ce <_printf_float+0xb6>
 800979a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800979c:	f10b 0b01 	add.w	fp, fp, #1
 80097a0:	e7bb      	b.n	800971a <_printf_float+0x302>
 80097a2:	4631      	mov	r1, r6
 80097a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80097a8:	4628      	mov	r0, r5
 80097aa:	47b8      	blx	r7
 80097ac:	3001      	adds	r0, #1
 80097ae:	d1c0      	bne.n	8009732 <_printf_float+0x31a>
 80097b0:	e68d      	b.n	80094ce <_printf_float+0xb6>
 80097b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097b4:	464b      	mov	r3, r9
 80097b6:	4631      	mov	r1, r6
 80097b8:	4628      	mov	r0, r5
 80097ba:	4442      	add	r2, r8
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	d1c3      	bne.n	800974a <_printf_float+0x332>
 80097c2:	e684      	b.n	80094ce <_printf_float+0xb6>
 80097c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80097c8:	f1ba 0f01 	cmp.w	sl, #1
 80097cc:	dc01      	bgt.n	80097d2 <_printf_float+0x3ba>
 80097ce:	07db      	lsls	r3, r3, #31
 80097d0:	d536      	bpl.n	8009840 <_printf_float+0x428>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4642      	mov	r2, r8
 80097d6:	4631      	mov	r1, r6
 80097d8:	4628      	mov	r0, r5
 80097da:	47b8      	blx	r7
 80097dc:	3001      	adds	r0, #1
 80097de:	f43f ae76 	beq.w	80094ce <_printf_float+0xb6>
 80097e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80097e6:	4631      	mov	r1, r6
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b8      	blx	r7
 80097ec:	3001      	adds	r0, #1
 80097ee:	f43f ae6e 	beq.w	80094ce <_printf_float+0xb6>
 80097f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80097f6:	2200      	movs	r2, #0
 80097f8:	2300      	movs	r3, #0
 80097fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80097fe:	f7f7 f8d3 	bl	80009a8 <__aeabi_dcmpeq>
 8009802:	b9c0      	cbnz	r0, 8009836 <_printf_float+0x41e>
 8009804:	4653      	mov	r3, sl
 8009806:	f108 0201 	add.w	r2, r8, #1
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	47b8      	blx	r7
 8009810:	3001      	adds	r0, #1
 8009812:	d10c      	bne.n	800982e <_printf_float+0x416>
 8009814:	e65b      	b.n	80094ce <_printf_float+0xb6>
 8009816:	2301      	movs	r3, #1
 8009818:	465a      	mov	r2, fp
 800981a:	4631      	mov	r1, r6
 800981c:	4628      	mov	r0, r5
 800981e:	47b8      	blx	r7
 8009820:	3001      	adds	r0, #1
 8009822:	f43f ae54 	beq.w	80094ce <_printf_float+0xb6>
 8009826:	f108 0801 	add.w	r8, r8, #1
 800982a:	45d0      	cmp	r8, sl
 800982c:	dbf3      	blt.n	8009816 <_printf_float+0x3fe>
 800982e:	464b      	mov	r3, r9
 8009830:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009834:	e6e0      	b.n	80095f8 <_printf_float+0x1e0>
 8009836:	f04f 0800 	mov.w	r8, #0
 800983a:	f104 0b1a 	add.w	fp, r4, #26
 800983e:	e7f4      	b.n	800982a <_printf_float+0x412>
 8009840:	2301      	movs	r3, #1
 8009842:	4642      	mov	r2, r8
 8009844:	e7e1      	b.n	800980a <_printf_float+0x3f2>
 8009846:	2301      	movs	r3, #1
 8009848:	464a      	mov	r2, r9
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	f43f ae3c 	beq.w	80094ce <_printf_float+0xb6>
 8009856:	f108 0801 	add.w	r8, r8, #1
 800985a:	68e3      	ldr	r3, [r4, #12]
 800985c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800985e:	1a5b      	subs	r3, r3, r1
 8009860:	4543      	cmp	r3, r8
 8009862:	dcf0      	bgt.n	8009846 <_printf_float+0x42e>
 8009864:	e6fd      	b.n	8009662 <_printf_float+0x24a>
 8009866:	f04f 0800 	mov.w	r8, #0
 800986a:	f104 0919 	add.w	r9, r4, #25
 800986e:	e7f4      	b.n	800985a <_printf_float+0x442>

08009870 <_printf_common>:
 8009870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009874:	4616      	mov	r6, r2
 8009876:	4698      	mov	r8, r3
 8009878:	688a      	ldr	r2, [r1, #8]
 800987a:	690b      	ldr	r3, [r1, #16]
 800987c:	4607      	mov	r7, r0
 800987e:	4293      	cmp	r3, r2
 8009880:	bfb8      	it	lt
 8009882:	4613      	movlt	r3, r2
 8009884:	6033      	str	r3, [r6, #0]
 8009886:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800988a:	460c      	mov	r4, r1
 800988c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009890:	b10a      	cbz	r2, 8009896 <_printf_common+0x26>
 8009892:	3301      	adds	r3, #1
 8009894:	6033      	str	r3, [r6, #0]
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	0699      	lsls	r1, r3, #26
 800989a:	bf42      	ittt	mi
 800989c:	6833      	ldrmi	r3, [r6, #0]
 800989e:	3302      	addmi	r3, #2
 80098a0:	6033      	strmi	r3, [r6, #0]
 80098a2:	6825      	ldr	r5, [r4, #0]
 80098a4:	f015 0506 	ands.w	r5, r5, #6
 80098a8:	d106      	bne.n	80098b8 <_printf_common+0x48>
 80098aa:	f104 0a19 	add.w	sl, r4, #25
 80098ae:	68e3      	ldr	r3, [r4, #12]
 80098b0:	6832      	ldr	r2, [r6, #0]
 80098b2:	1a9b      	subs	r3, r3, r2
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	dc2b      	bgt.n	8009910 <_printf_common+0xa0>
 80098b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098bc:	6822      	ldr	r2, [r4, #0]
 80098be:	3b00      	subs	r3, #0
 80098c0:	bf18      	it	ne
 80098c2:	2301      	movne	r3, #1
 80098c4:	0692      	lsls	r2, r2, #26
 80098c6:	d430      	bmi.n	800992a <_printf_common+0xba>
 80098c8:	4641      	mov	r1, r8
 80098ca:	4638      	mov	r0, r7
 80098cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098d0:	47c8      	blx	r9
 80098d2:	3001      	adds	r0, #1
 80098d4:	d023      	beq.n	800991e <_printf_common+0xae>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	6922      	ldr	r2, [r4, #16]
 80098da:	f003 0306 	and.w	r3, r3, #6
 80098de:	2b04      	cmp	r3, #4
 80098e0:	bf14      	ite	ne
 80098e2:	2500      	movne	r5, #0
 80098e4:	6833      	ldreq	r3, [r6, #0]
 80098e6:	f04f 0600 	mov.w	r6, #0
 80098ea:	bf08      	it	eq
 80098ec:	68e5      	ldreq	r5, [r4, #12]
 80098ee:	f104 041a 	add.w	r4, r4, #26
 80098f2:	bf08      	it	eq
 80098f4:	1aed      	subeq	r5, r5, r3
 80098f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80098fa:	bf08      	it	eq
 80098fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009900:	4293      	cmp	r3, r2
 8009902:	bfc4      	itt	gt
 8009904:	1a9b      	subgt	r3, r3, r2
 8009906:	18ed      	addgt	r5, r5, r3
 8009908:	42b5      	cmp	r5, r6
 800990a:	d11a      	bne.n	8009942 <_printf_common+0xd2>
 800990c:	2000      	movs	r0, #0
 800990e:	e008      	b.n	8009922 <_printf_common+0xb2>
 8009910:	2301      	movs	r3, #1
 8009912:	4652      	mov	r2, sl
 8009914:	4641      	mov	r1, r8
 8009916:	4638      	mov	r0, r7
 8009918:	47c8      	blx	r9
 800991a:	3001      	adds	r0, #1
 800991c:	d103      	bne.n	8009926 <_printf_common+0xb6>
 800991e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009926:	3501      	adds	r5, #1
 8009928:	e7c1      	b.n	80098ae <_printf_common+0x3e>
 800992a:	2030      	movs	r0, #48	@ 0x30
 800992c:	18e1      	adds	r1, r4, r3
 800992e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009938:	4422      	add	r2, r4
 800993a:	3302      	adds	r3, #2
 800993c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009940:	e7c2      	b.n	80098c8 <_printf_common+0x58>
 8009942:	2301      	movs	r3, #1
 8009944:	4622      	mov	r2, r4
 8009946:	4641      	mov	r1, r8
 8009948:	4638      	mov	r0, r7
 800994a:	47c8      	blx	r9
 800994c:	3001      	adds	r0, #1
 800994e:	d0e6      	beq.n	800991e <_printf_common+0xae>
 8009950:	3601      	adds	r6, #1
 8009952:	e7d9      	b.n	8009908 <_printf_common+0x98>

08009954 <_printf_i>:
 8009954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009958:	7e0f      	ldrb	r7, [r1, #24]
 800995a:	4691      	mov	r9, r2
 800995c:	2f78      	cmp	r7, #120	@ 0x78
 800995e:	4680      	mov	r8, r0
 8009960:	460c      	mov	r4, r1
 8009962:	469a      	mov	sl, r3
 8009964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800996a:	d807      	bhi.n	800997c <_printf_i+0x28>
 800996c:	2f62      	cmp	r7, #98	@ 0x62
 800996e:	d80a      	bhi.n	8009986 <_printf_i+0x32>
 8009970:	2f00      	cmp	r7, #0
 8009972:	f000 80d3 	beq.w	8009b1c <_printf_i+0x1c8>
 8009976:	2f58      	cmp	r7, #88	@ 0x58
 8009978:	f000 80ba 	beq.w	8009af0 <_printf_i+0x19c>
 800997c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009984:	e03a      	b.n	80099fc <_printf_i+0xa8>
 8009986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800998a:	2b15      	cmp	r3, #21
 800998c:	d8f6      	bhi.n	800997c <_printf_i+0x28>
 800998e:	a101      	add	r1, pc, #4	@ (adr r1, 8009994 <_printf_i+0x40>)
 8009990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009994:	080099ed 	.word	0x080099ed
 8009998:	08009a01 	.word	0x08009a01
 800999c:	0800997d 	.word	0x0800997d
 80099a0:	0800997d 	.word	0x0800997d
 80099a4:	0800997d 	.word	0x0800997d
 80099a8:	0800997d 	.word	0x0800997d
 80099ac:	08009a01 	.word	0x08009a01
 80099b0:	0800997d 	.word	0x0800997d
 80099b4:	0800997d 	.word	0x0800997d
 80099b8:	0800997d 	.word	0x0800997d
 80099bc:	0800997d 	.word	0x0800997d
 80099c0:	08009b03 	.word	0x08009b03
 80099c4:	08009a2b 	.word	0x08009a2b
 80099c8:	08009abd 	.word	0x08009abd
 80099cc:	0800997d 	.word	0x0800997d
 80099d0:	0800997d 	.word	0x0800997d
 80099d4:	08009b25 	.word	0x08009b25
 80099d8:	0800997d 	.word	0x0800997d
 80099dc:	08009a2b 	.word	0x08009a2b
 80099e0:	0800997d 	.word	0x0800997d
 80099e4:	0800997d 	.word	0x0800997d
 80099e8:	08009ac5 	.word	0x08009ac5
 80099ec:	6833      	ldr	r3, [r6, #0]
 80099ee:	1d1a      	adds	r2, r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6032      	str	r2, [r6, #0]
 80099f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099fc:	2301      	movs	r3, #1
 80099fe:	e09e      	b.n	8009b3e <_printf_i+0x1ea>
 8009a00:	6833      	ldr	r3, [r6, #0]
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	1d19      	adds	r1, r3, #4
 8009a06:	6031      	str	r1, [r6, #0]
 8009a08:	0606      	lsls	r6, r0, #24
 8009a0a:	d501      	bpl.n	8009a10 <_printf_i+0xbc>
 8009a0c:	681d      	ldr	r5, [r3, #0]
 8009a0e:	e003      	b.n	8009a18 <_printf_i+0xc4>
 8009a10:	0645      	lsls	r5, r0, #25
 8009a12:	d5fb      	bpl.n	8009a0c <_printf_i+0xb8>
 8009a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a18:	2d00      	cmp	r5, #0
 8009a1a:	da03      	bge.n	8009a24 <_printf_i+0xd0>
 8009a1c:	232d      	movs	r3, #45	@ 0x2d
 8009a1e:	426d      	negs	r5, r5
 8009a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a24:	230a      	movs	r3, #10
 8009a26:	4859      	ldr	r0, [pc, #356]	@ (8009b8c <_printf_i+0x238>)
 8009a28:	e011      	b.n	8009a4e <_printf_i+0xfa>
 8009a2a:	6821      	ldr	r1, [r4, #0]
 8009a2c:	6833      	ldr	r3, [r6, #0]
 8009a2e:	0608      	lsls	r0, r1, #24
 8009a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a34:	d402      	bmi.n	8009a3c <_printf_i+0xe8>
 8009a36:	0649      	lsls	r1, r1, #25
 8009a38:	bf48      	it	mi
 8009a3a:	b2ad      	uxthmi	r5, r5
 8009a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a3e:	6033      	str	r3, [r6, #0]
 8009a40:	bf14      	ite	ne
 8009a42:	230a      	movne	r3, #10
 8009a44:	2308      	moveq	r3, #8
 8009a46:	4851      	ldr	r0, [pc, #324]	@ (8009b8c <_printf_i+0x238>)
 8009a48:	2100      	movs	r1, #0
 8009a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a4e:	6866      	ldr	r6, [r4, #4]
 8009a50:	2e00      	cmp	r6, #0
 8009a52:	bfa8      	it	ge
 8009a54:	6821      	ldrge	r1, [r4, #0]
 8009a56:	60a6      	str	r6, [r4, #8]
 8009a58:	bfa4      	itt	ge
 8009a5a:	f021 0104 	bicge.w	r1, r1, #4
 8009a5e:	6021      	strge	r1, [r4, #0]
 8009a60:	b90d      	cbnz	r5, 8009a66 <_printf_i+0x112>
 8009a62:	2e00      	cmp	r6, #0
 8009a64:	d04b      	beq.n	8009afe <_printf_i+0x1aa>
 8009a66:	4616      	mov	r6, r2
 8009a68:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a6c:	fb03 5711 	mls	r7, r3, r1, r5
 8009a70:	5dc7      	ldrb	r7, [r0, r7]
 8009a72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a76:	462f      	mov	r7, r5
 8009a78:	42bb      	cmp	r3, r7
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	d9f4      	bls.n	8009a68 <_printf_i+0x114>
 8009a7e:	2b08      	cmp	r3, #8
 8009a80:	d10b      	bne.n	8009a9a <_printf_i+0x146>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	07df      	lsls	r7, r3, #31
 8009a86:	d508      	bpl.n	8009a9a <_printf_i+0x146>
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6861      	ldr	r1, [r4, #4]
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	bfde      	ittt	le
 8009a90:	2330      	movle	r3, #48	@ 0x30
 8009a92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a96:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009a9a:	1b92      	subs	r2, r2, r6
 8009a9c:	6122      	str	r2, [r4, #16]
 8009a9e:	464b      	mov	r3, r9
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	f8cd a000 	str.w	sl, [sp]
 8009aa8:	aa03      	add	r2, sp, #12
 8009aaa:	f7ff fee1 	bl	8009870 <_printf_common>
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d14a      	bne.n	8009b48 <_printf_i+0x1f4>
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ab6:	b004      	add	sp, #16
 8009ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	f043 0320 	orr.w	r3, r3, #32
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	2778      	movs	r7, #120	@ 0x78
 8009ac6:	4832      	ldr	r0, [pc, #200]	@ (8009b90 <_printf_i+0x23c>)
 8009ac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	6831      	ldr	r1, [r6, #0]
 8009ad0:	061f      	lsls	r7, r3, #24
 8009ad2:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ad6:	d402      	bmi.n	8009ade <_printf_i+0x18a>
 8009ad8:	065f      	lsls	r7, r3, #25
 8009ada:	bf48      	it	mi
 8009adc:	b2ad      	uxthmi	r5, r5
 8009ade:	6031      	str	r1, [r6, #0]
 8009ae0:	07d9      	lsls	r1, r3, #31
 8009ae2:	bf44      	itt	mi
 8009ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8009ae8:	6023      	strmi	r3, [r4, #0]
 8009aea:	b11d      	cbz	r5, 8009af4 <_printf_i+0x1a0>
 8009aec:	2310      	movs	r3, #16
 8009aee:	e7ab      	b.n	8009a48 <_printf_i+0xf4>
 8009af0:	4826      	ldr	r0, [pc, #152]	@ (8009b8c <_printf_i+0x238>)
 8009af2:	e7e9      	b.n	8009ac8 <_printf_i+0x174>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	f023 0320 	bic.w	r3, r3, #32
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	e7f6      	b.n	8009aec <_printf_i+0x198>
 8009afe:	4616      	mov	r6, r2
 8009b00:	e7bd      	b.n	8009a7e <_printf_i+0x12a>
 8009b02:	6833      	ldr	r3, [r6, #0]
 8009b04:	6825      	ldr	r5, [r4, #0]
 8009b06:	1d18      	adds	r0, r3, #4
 8009b08:	6961      	ldr	r1, [r4, #20]
 8009b0a:	6030      	str	r0, [r6, #0]
 8009b0c:	062e      	lsls	r6, r5, #24
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	d501      	bpl.n	8009b16 <_printf_i+0x1c2>
 8009b12:	6019      	str	r1, [r3, #0]
 8009b14:	e002      	b.n	8009b1c <_printf_i+0x1c8>
 8009b16:	0668      	lsls	r0, r5, #25
 8009b18:	d5fb      	bpl.n	8009b12 <_printf_i+0x1be>
 8009b1a:	8019      	strh	r1, [r3, #0]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4616      	mov	r6, r2
 8009b20:	6123      	str	r3, [r4, #16]
 8009b22:	e7bc      	b.n	8009a9e <_printf_i+0x14a>
 8009b24:	6833      	ldr	r3, [r6, #0]
 8009b26:	2100      	movs	r1, #0
 8009b28:	1d1a      	adds	r2, r3, #4
 8009b2a:	6032      	str	r2, [r6, #0]
 8009b2c:	681e      	ldr	r6, [r3, #0]
 8009b2e:	6862      	ldr	r2, [r4, #4]
 8009b30:	4630      	mov	r0, r6
 8009b32:	f001 f9e8 	bl	800af06 <memchr>
 8009b36:	b108      	cbz	r0, 8009b3c <_printf_i+0x1e8>
 8009b38:	1b80      	subs	r0, r0, r6
 8009b3a:	6060      	str	r0, [r4, #4]
 8009b3c:	6863      	ldr	r3, [r4, #4]
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	2300      	movs	r3, #0
 8009b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b46:	e7aa      	b.n	8009a9e <_printf_i+0x14a>
 8009b48:	4632      	mov	r2, r6
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	6923      	ldr	r3, [r4, #16]
 8009b50:	47d0      	blx	sl
 8009b52:	3001      	adds	r0, #1
 8009b54:	d0ad      	beq.n	8009ab2 <_printf_i+0x15e>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	079b      	lsls	r3, r3, #30
 8009b5a:	d413      	bmi.n	8009b84 <_printf_i+0x230>
 8009b5c:	68e0      	ldr	r0, [r4, #12]
 8009b5e:	9b03      	ldr	r3, [sp, #12]
 8009b60:	4298      	cmp	r0, r3
 8009b62:	bfb8      	it	lt
 8009b64:	4618      	movlt	r0, r3
 8009b66:	e7a6      	b.n	8009ab6 <_printf_i+0x162>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4640      	mov	r0, r8
 8009b70:	47d0      	blx	sl
 8009b72:	3001      	adds	r0, #1
 8009b74:	d09d      	beq.n	8009ab2 <_printf_i+0x15e>
 8009b76:	3501      	adds	r5, #1
 8009b78:	68e3      	ldr	r3, [r4, #12]
 8009b7a:	9903      	ldr	r1, [sp, #12]
 8009b7c:	1a5b      	subs	r3, r3, r1
 8009b7e:	42ab      	cmp	r3, r5
 8009b80:	dcf2      	bgt.n	8009b68 <_printf_i+0x214>
 8009b82:	e7eb      	b.n	8009b5c <_printf_i+0x208>
 8009b84:	2500      	movs	r5, #0
 8009b86:	f104 0619 	add.w	r6, r4, #25
 8009b8a:	e7f5      	b.n	8009b78 <_printf_i+0x224>
 8009b8c:	0800da44 	.word	0x0800da44
 8009b90:	0800da55 	.word	0x0800da55

08009b94 <_scanf_float>:
 8009b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b98:	b087      	sub	sp, #28
 8009b9a:	9303      	str	r3, [sp, #12]
 8009b9c:	688b      	ldr	r3, [r1, #8]
 8009b9e:	4617      	mov	r7, r2
 8009ba0:	1e5a      	subs	r2, r3, #1
 8009ba2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009ba6:	bf82      	ittt	hi
 8009ba8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009bac:	eb03 0b05 	addhi.w	fp, r3, r5
 8009bb0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009bb4:	460a      	mov	r2, r1
 8009bb6:	f04f 0500 	mov.w	r5, #0
 8009bba:	bf88      	it	hi
 8009bbc:	608b      	strhi	r3, [r1, #8]
 8009bbe:	680b      	ldr	r3, [r1, #0]
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009bc6:	f842 3b1c 	str.w	r3, [r2], #28
 8009bca:	460c      	mov	r4, r1
 8009bcc:	bf98      	it	ls
 8009bce:	f04f 0b00 	movls.w	fp, #0
 8009bd2:	4616      	mov	r6, r2
 8009bd4:	46aa      	mov	sl, r5
 8009bd6:	46a9      	mov	r9, r5
 8009bd8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009bdc:	9201      	str	r2, [sp, #4]
 8009bde:	9502      	str	r5, [sp, #8]
 8009be0:	68a2      	ldr	r2, [r4, #8]
 8009be2:	b152      	cbz	r2, 8009bfa <_scanf_float+0x66>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b4e      	cmp	r3, #78	@ 0x4e
 8009bea:	d865      	bhi.n	8009cb8 <_scanf_float+0x124>
 8009bec:	2b40      	cmp	r3, #64	@ 0x40
 8009bee:	d83d      	bhi.n	8009c6c <_scanf_float+0xd8>
 8009bf0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009bf4:	b2c8      	uxtb	r0, r1
 8009bf6:	280e      	cmp	r0, #14
 8009bf8:	d93b      	bls.n	8009c72 <_scanf_float+0xde>
 8009bfa:	f1b9 0f00 	cmp.w	r9, #0
 8009bfe:	d003      	beq.n	8009c08 <_scanf_float+0x74>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009c0c:	f1ba 0f01 	cmp.w	sl, #1
 8009c10:	f200 8118 	bhi.w	8009e44 <_scanf_float+0x2b0>
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	429e      	cmp	r6, r3
 8009c18:	f200 8109 	bhi.w	8009e2e <_scanf_float+0x29a>
 8009c1c:	2001      	movs	r0, #1
 8009c1e:	b007      	add	sp, #28
 8009c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c24:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009c28:	2a0d      	cmp	r2, #13
 8009c2a:	d8e6      	bhi.n	8009bfa <_scanf_float+0x66>
 8009c2c:	a101      	add	r1, pc, #4	@ (adr r1, 8009c34 <_scanf_float+0xa0>)
 8009c2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c32:	bf00      	nop
 8009c34:	08009d7b 	.word	0x08009d7b
 8009c38:	08009bfb 	.word	0x08009bfb
 8009c3c:	08009bfb 	.word	0x08009bfb
 8009c40:	08009bfb 	.word	0x08009bfb
 8009c44:	08009ddb 	.word	0x08009ddb
 8009c48:	08009db3 	.word	0x08009db3
 8009c4c:	08009bfb 	.word	0x08009bfb
 8009c50:	08009bfb 	.word	0x08009bfb
 8009c54:	08009d89 	.word	0x08009d89
 8009c58:	08009bfb 	.word	0x08009bfb
 8009c5c:	08009bfb 	.word	0x08009bfb
 8009c60:	08009bfb 	.word	0x08009bfb
 8009c64:	08009bfb 	.word	0x08009bfb
 8009c68:	08009d41 	.word	0x08009d41
 8009c6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009c70:	e7da      	b.n	8009c28 <_scanf_float+0x94>
 8009c72:	290e      	cmp	r1, #14
 8009c74:	d8c1      	bhi.n	8009bfa <_scanf_float+0x66>
 8009c76:	a001      	add	r0, pc, #4	@ (adr r0, 8009c7c <_scanf_float+0xe8>)
 8009c78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009c7c:	08009d31 	.word	0x08009d31
 8009c80:	08009bfb 	.word	0x08009bfb
 8009c84:	08009d31 	.word	0x08009d31
 8009c88:	08009dc7 	.word	0x08009dc7
 8009c8c:	08009bfb 	.word	0x08009bfb
 8009c90:	08009cd9 	.word	0x08009cd9
 8009c94:	08009d17 	.word	0x08009d17
 8009c98:	08009d17 	.word	0x08009d17
 8009c9c:	08009d17 	.word	0x08009d17
 8009ca0:	08009d17 	.word	0x08009d17
 8009ca4:	08009d17 	.word	0x08009d17
 8009ca8:	08009d17 	.word	0x08009d17
 8009cac:	08009d17 	.word	0x08009d17
 8009cb0:	08009d17 	.word	0x08009d17
 8009cb4:	08009d17 	.word	0x08009d17
 8009cb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8009cba:	d809      	bhi.n	8009cd0 <_scanf_float+0x13c>
 8009cbc:	2b60      	cmp	r3, #96	@ 0x60
 8009cbe:	d8b1      	bhi.n	8009c24 <_scanf_float+0x90>
 8009cc0:	2b54      	cmp	r3, #84	@ 0x54
 8009cc2:	d07b      	beq.n	8009dbc <_scanf_float+0x228>
 8009cc4:	2b59      	cmp	r3, #89	@ 0x59
 8009cc6:	d198      	bne.n	8009bfa <_scanf_float+0x66>
 8009cc8:	2d07      	cmp	r5, #7
 8009cca:	d196      	bne.n	8009bfa <_scanf_float+0x66>
 8009ccc:	2508      	movs	r5, #8
 8009cce:	e02c      	b.n	8009d2a <_scanf_float+0x196>
 8009cd0:	2b74      	cmp	r3, #116	@ 0x74
 8009cd2:	d073      	beq.n	8009dbc <_scanf_float+0x228>
 8009cd4:	2b79      	cmp	r3, #121	@ 0x79
 8009cd6:	e7f6      	b.n	8009cc6 <_scanf_float+0x132>
 8009cd8:	6821      	ldr	r1, [r4, #0]
 8009cda:	05c8      	lsls	r0, r1, #23
 8009cdc:	d51b      	bpl.n	8009d16 <_scanf_float+0x182>
 8009cde:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009ce2:	6021      	str	r1, [r4, #0]
 8009ce4:	f109 0901 	add.w	r9, r9, #1
 8009ce8:	f1bb 0f00 	cmp.w	fp, #0
 8009cec:	d003      	beq.n	8009cf6 <_scanf_float+0x162>
 8009cee:	3201      	adds	r2, #1
 8009cf0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009cf4:	60a2      	str	r2, [r4, #8]
 8009cf6:	68a3      	ldr	r3, [r4, #8]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	60a3      	str	r3, [r4, #8]
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	6123      	str	r3, [r4, #16]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	607b      	str	r3, [r7, #4]
 8009d0a:	f340 8087 	ble.w	8009e1c <_scanf_float+0x288>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	3301      	adds	r3, #1
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	e764      	b.n	8009be0 <_scanf_float+0x4c>
 8009d16:	eb1a 0105 	adds.w	r1, sl, r5
 8009d1a:	f47f af6e 	bne.w	8009bfa <_scanf_float+0x66>
 8009d1e:	460d      	mov	r5, r1
 8009d20:	468a      	mov	sl, r1
 8009d22:	6822      	ldr	r2, [r4, #0]
 8009d24:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009d28:	6022      	str	r2, [r4, #0]
 8009d2a:	f806 3b01 	strb.w	r3, [r6], #1
 8009d2e:	e7e2      	b.n	8009cf6 <_scanf_float+0x162>
 8009d30:	6822      	ldr	r2, [r4, #0]
 8009d32:	0610      	lsls	r0, r2, #24
 8009d34:	f57f af61 	bpl.w	8009bfa <_scanf_float+0x66>
 8009d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d3c:	6022      	str	r2, [r4, #0]
 8009d3e:	e7f4      	b.n	8009d2a <_scanf_float+0x196>
 8009d40:	f1ba 0f00 	cmp.w	sl, #0
 8009d44:	d10e      	bne.n	8009d64 <_scanf_float+0x1d0>
 8009d46:	f1b9 0f00 	cmp.w	r9, #0
 8009d4a:	d10e      	bne.n	8009d6a <_scanf_float+0x1d6>
 8009d4c:	6822      	ldr	r2, [r4, #0]
 8009d4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009d52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009d56:	d108      	bne.n	8009d6a <_scanf_float+0x1d6>
 8009d58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009d5c:	f04f 0a01 	mov.w	sl, #1
 8009d60:	6022      	str	r2, [r4, #0]
 8009d62:	e7e2      	b.n	8009d2a <_scanf_float+0x196>
 8009d64:	f1ba 0f02 	cmp.w	sl, #2
 8009d68:	d055      	beq.n	8009e16 <_scanf_float+0x282>
 8009d6a:	2d01      	cmp	r5, #1
 8009d6c:	d002      	beq.n	8009d74 <_scanf_float+0x1e0>
 8009d6e:	2d04      	cmp	r5, #4
 8009d70:	f47f af43 	bne.w	8009bfa <_scanf_float+0x66>
 8009d74:	3501      	adds	r5, #1
 8009d76:	b2ed      	uxtb	r5, r5
 8009d78:	e7d7      	b.n	8009d2a <_scanf_float+0x196>
 8009d7a:	f1ba 0f01 	cmp.w	sl, #1
 8009d7e:	f47f af3c 	bne.w	8009bfa <_scanf_float+0x66>
 8009d82:	f04f 0a02 	mov.w	sl, #2
 8009d86:	e7d0      	b.n	8009d2a <_scanf_float+0x196>
 8009d88:	b97d      	cbnz	r5, 8009daa <_scanf_float+0x216>
 8009d8a:	f1b9 0f00 	cmp.w	r9, #0
 8009d8e:	f47f af37 	bne.w	8009c00 <_scanf_float+0x6c>
 8009d92:	6822      	ldr	r2, [r4, #0]
 8009d94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009d98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009d9c:	f040 8103 	bne.w	8009fa6 <_scanf_float+0x412>
 8009da0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009da4:	2501      	movs	r5, #1
 8009da6:	6022      	str	r2, [r4, #0]
 8009da8:	e7bf      	b.n	8009d2a <_scanf_float+0x196>
 8009daa:	2d03      	cmp	r5, #3
 8009dac:	d0e2      	beq.n	8009d74 <_scanf_float+0x1e0>
 8009dae:	2d05      	cmp	r5, #5
 8009db0:	e7de      	b.n	8009d70 <_scanf_float+0x1dc>
 8009db2:	2d02      	cmp	r5, #2
 8009db4:	f47f af21 	bne.w	8009bfa <_scanf_float+0x66>
 8009db8:	2503      	movs	r5, #3
 8009dba:	e7b6      	b.n	8009d2a <_scanf_float+0x196>
 8009dbc:	2d06      	cmp	r5, #6
 8009dbe:	f47f af1c 	bne.w	8009bfa <_scanf_float+0x66>
 8009dc2:	2507      	movs	r5, #7
 8009dc4:	e7b1      	b.n	8009d2a <_scanf_float+0x196>
 8009dc6:	6822      	ldr	r2, [r4, #0]
 8009dc8:	0591      	lsls	r1, r2, #22
 8009dca:	f57f af16 	bpl.w	8009bfa <_scanf_float+0x66>
 8009dce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009dd2:	6022      	str	r2, [r4, #0]
 8009dd4:	f8cd 9008 	str.w	r9, [sp, #8]
 8009dd8:	e7a7      	b.n	8009d2a <_scanf_float+0x196>
 8009dda:	6822      	ldr	r2, [r4, #0]
 8009ddc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009de0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009de4:	d006      	beq.n	8009df4 <_scanf_float+0x260>
 8009de6:	0550      	lsls	r0, r2, #21
 8009de8:	f57f af07 	bpl.w	8009bfa <_scanf_float+0x66>
 8009dec:	f1b9 0f00 	cmp.w	r9, #0
 8009df0:	f000 80d9 	beq.w	8009fa6 <_scanf_float+0x412>
 8009df4:	0591      	lsls	r1, r2, #22
 8009df6:	bf58      	it	pl
 8009df8:	9902      	ldrpl	r1, [sp, #8]
 8009dfa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009dfe:	bf58      	it	pl
 8009e00:	eba9 0101 	subpl.w	r1, r9, r1
 8009e04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009e08:	f04f 0900 	mov.w	r9, #0
 8009e0c:	bf58      	it	pl
 8009e0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009e12:	6022      	str	r2, [r4, #0]
 8009e14:	e789      	b.n	8009d2a <_scanf_float+0x196>
 8009e16:	f04f 0a03 	mov.w	sl, #3
 8009e1a:	e786      	b.n	8009d2a <_scanf_float+0x196>
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	4640      	mov	r0, r8
 8009e20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009e24:	4798      	blx	r3
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f43f aeda 	beq.w	8009be0 <_scanf_float+0x4c>
 8009e2c:	e6e5      	b.n	8009bfa <_scanf_float+0x66>
 8009e2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e32:	463a      	mov	r2, r7
 8009e34:	4640      	mov	r0, r8
 8009e36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e3a:	4798      	blx	r3
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	6123      	str	r3, [r4, #16]
 8009e42:	e6e7      	b.n	8009c14 <_scanf_float+0x80>
 8009e44:	1e6b      	subs	r3, r5, #1
 8009e46:	2b06      	cmp	r3, #6
 8009e48:	d824      	bhi.n	8009e94 <_scanf_float+0x300>
 8009e4a:	2d02      	cmp	r5, #2
 8009e4c:	d836      	bhi.n	8009ebc <_scanf_float+0x328>
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	429e      	cmp	r6, r3
 8009e52:	f67f aee3 	bls.w	8009c1c <_scanf_float+0x88>
 8009e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e5a:	463a      	mov	r2, r7
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e62:	4798      	blx	r3
 8009e64:	6923      	ldr	r3, [r4, #16]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	6123      	str	r3, [r4, #16]
 8009e6a:	e7f0      	b.n	8009e4e <_scanf_float+0x2ba>
 8009e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e70:	463a      	mov	r2, r7
 8009e72:	4640      	mov	r0, r8
 8009e74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009e78:	4798      	blx	r3
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009e84:	fa5f fa8a 	uxtb.w	sl, sl
 8009e88:	f1ba 0f02 	cmp.w	sl, #2
 8009e8c:	d1ee      	bne.n	8009e6c <_scanf_float+0x2d8>
 8009e8e:	3d03      	subs	r5, #3
 8009e90:	b2ed      	uxtb	r5, r5
 8009e92:	1b76      	subs	r6, r6, r5
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	05da      	lsls	r2, r3, #23
 8009e98:	d530      	bpl.n	8009efc <_scanf_float+0x368>
 8009e9a:	055b      	lsls	r3, r3, #21
 8009e9c:	d511      	bpl.n	8009ec2 <_scanf_float+0x32e>
 8009e9e:	9b01      	ldr	r3, [sp, #4]
 8009ea0:	429e      	cmp	r6, r3
 8009ea2:	f67f aebb 	bls.w	8009c1c <_scanf_float+0x88>
 8009ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009eaa:	463a      	mov	r2, r7
 8009eac:	4640      	mov	r0, r8
 8009eae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009eb2:	4798      	blx	r3
 8009eb4:	6923      	ldr	r3, [r4, #16]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	6123      	str	r3, [r4, #16]
 8009eba:	e7f0      	b.n	8009e9e <_scanf_float+0x30a>
 8009ebc:	46aa      	mov	sl, r5
 8009ebe:	46b3      	mov	fp, r6
 8009ec0:	e7de      	b.n	8009e80 <_scanf_float+0x2ec>
 8009ec2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009ec6:	6923      	ldr	r3, [r4, #16]
 8009ec8:	2965      	cmp	r1, #101	@ 0x65
 8009eca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009ece:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8009ed2:	6123      	str	r3, [r4, #16]
 8009ed4:	d00c      	beq.n	8009ef0 <_scanf_float+0x35c>
 8009ed6:	2945      	cmp	r1, #69	@ 0x45
 8009ed8:	d00a      	beq.n	8009ef0 <_scanf_float+0x35c>
 8009eda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ede:	463a      	mov	r2, r7
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	4798      	blx	r3
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	1eb5      	subs	r5, r6, #2
 8009eee:	6123      	str	r3, [r4, #16]
 8009ef0:	463a      	mov	r2, r7
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ef8:	4798      	blx	r3
 8009efa:	462e      	mov	r6, r5
 8009efc:	6822      	ldr	r2, [r4, #0]
 8009efe:	f012 0210 	ands.w	r2, r2, #16
 8009f02:	d001      	beq.n	8009f08 <_scanf_float+0x374>
 8009f04:	2000      	movs	r0, #0
 8009f06:	e68a      	b.n	8009c1e <_scanf_float+0x8a>
 8009f08:	7032      	strb	r2, [r6, #0]
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f14:	d11c      	bne.n	8009f50 <_scanf_float+0x3bc>
 8009f16:	9b02      	ldr	r3, [sp, #8]
 8009f18:	454b      	cmp	r3, r9
 8009f1a:	eba3 0209 	sub.w	r2, r3, r9
 8009f1e:	d123      	bne.n	8009f68 <_scanf_float+0x3d4>
 8009f20:	2200      	movs	r2, #0
 8009f22:	4640      	mov	r0, r8
 8009f24:	9901      	ldr	r1, [sp, #4]
 8009f26:	f000 ff03 	bl	800ad30 <_strtod_r>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	6825      	ldr	r5, [r4, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f015 0f02 	tst.w	r5, #2
 8009f34:	4606      	mov	r6, r0
 8009f36:	460f      	mov	r7, r1
 8009f38:	f103 0204 	add.w	r2, r3, #4
 8009f3c:	d01f      	beq.n	8009f7e <_scanf_float+0x3ea>
 8009f3e:	9903      	ldr	r1, [sp, #12]
 8009f40:	600a      	str	r2, [r1, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	e9c3 6700 	strd	r6, r7, [r3]
 8009f48:	68e3      	ldr	r3, [r4, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60e3      	str	r3, [r4, #12]
 8009f4e:	e7d9      	b.n	8009f04 <_scanf_float+0x370>
 8009f50:	9b04      	ldr	r3, [sp, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0e4      	beq.n	8009f20 <_scanf_float+0x38c>
 8009f56:	9905      	ldr	r1, [sp, #20]
 8009f58:	230a      	movs	r3, #10
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	3101      	adds	r1, #1
 8009f5e:	f000 ff67 	bl	800ae30 <_strtol_r>
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	9e05      	ldr	r6, [sp, #20]
 8009f66:	1ac2      	subs	r2, r0, r3
 8009f68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009f6c:	429e      	cmp	r6, r3
 8009f6e:	bf28      	it	cs
 8009f70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009f74:	4630      	mov	r0, r6
 8009f76:	490d      	ldr	r1, [pc, #52]	@ (8009fac <_scanf_float+0x418>)
 8009f78:	f000 f81c 	bl	8009fb4 <siprintf>
 8009f7c:	e7d0      	b.n	8009f20 <_scanf_float+0x38c>
 8009f7e:	076d      	lsls	r5, r5, #29
 8009f80:	d4dd      	bmi.n	8009f3e <_scanf_float+0x3aa>
 8009f82:	9d03      	ldr	r5, [sp, #12]
 8009f84:	602a      	str	r2, [r5, #0]
 8009f86:	681d      	ldr	r5, [r3, #0]
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	f7f6 fd3e 	bl	8000a0c <__aeabi_dcmpun>
 8009f90:	b120      	cbz	r0, 8009f9c <_scanf_float+0x408>
 8009f92:	4807      	ldr	r0, [pc, #28]	@ (8009fb0 <_scanf_float+0x41c>)
 8009f94:	f000 ffda 	bl	800af4c <nanf>
 8009f98:	6028      	str	r0, [r5, #0]
 8009f9a:	e7d5      	b.n	8009f48 <_scanf_float+0x3b4>
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	f7f6 fd92 	bl	8000ac8 <__aeabi_d2f>
 8009fa4:	e7f8      	b.n	8009f98 <_scanf_float+0x404>
 8009fa6:	f04f 0900 	mov.w	r9, #0
 8009faa:	e62d      	b.n	8009c08 <_scanf_float+0x74>
 8009fac:	0800da66 	.word	0x0800da66
 8009fb0:	0800de5b 	.word	0x0800de5b

08009fb4 <siprintf>:
 8009fb4:	b40e      	push	{r1, r2, r3}
 8009fb6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009fba:	b500      	push	{lr}
 8009fbc:	b09c      	sub	sp, #112	@ 0x70
 8009fbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009fc0:	9002      	str	r0, [sp, #8]
 8009fc2:	9006      	str	r0, [sp, #24]
 8009fc4:	9107      	str	r1, [sp, #28]
 8009fc6:	9104      	str	r1, [sp, #16]
 8009fc8:	4808      	ldr	r0, [pc, #32]	@ (8009fec <siprintf+0x38>)
 8009fca:	4909      	ldr	r1, [pc, #36]	@ (8009ff0 <siprintf+0x3c>)
 8009fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd0:	9105      	str	r1, [sp, #20]
 8009fd2:	6800      	ldr	r0, [r0, #0]
 8009fd4:	a902      	add	r1, sp, #8
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	f002 f9a2 	bl	800c320 <_svfiprintf_r>
 8009fdc:	2200      	movs	r2, #0
 8009fde:	9b02      	ldr	r3, [sp, #8]
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	b01c      	add	sp, #112	@ 0x70
 8009fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe8:	b003      	add	sp, #12
 8009fea:	4770      	bx	lr
 8009fec:	200002f4 	.word	0x200002f4
 8009ff0:	ffff0208 	.word	0xffff0208

08009ff4 <std>:
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	b510      	push	{r4, lr}
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8009ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a002:	6083      	str	r3, [r0, #8]
 800a004:	8181      	strh	r1, [r0, #12]
 800a006:	6643      	str	r3, [r0, #100]	@ 0x64
 800a008:	81c2      	strh	r2, [r0, #14]
 800a00a:	6183      	str	r3, [r0, #24]
 800a00c:	4619      	mov	r1, r3
 800a00e:	2208      	movs	r2, #8
 800a010:	305c      	adds	r0, #92	@ 0x5c
 800a012:	f000 ff3f 	bl	800ae94 <memset>
 800a016:	4b0d      	ldr	r3, [pc, #52]	@ (800a04c <std+0x58>)
 800a018:	6224      	str	r4, [r4, #32]
 800a01a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a01c:	4b0c      	ldr	r3, [pc, #48]	@ (800a050 <std+0x5c>)
 800a01e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a020:	4b0c      	ldr	r3, [pc, #48]	@ (800a054 <std+0x60>)
 800a022:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a024:	4b0c      	ldr	r3, [pc, #48]	@ (800a058 <std+0x64>)
 800a026:	6323      	str	r3, [r4, #48]	@ 0x30
 800a028:	4b0c      	ldr	r3, [pc, #48]	@ (800a05c <std+0x68>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d006      	beq.n	800a03c <std+0x48>
 800a02e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a032:	4294      	cmp	r4, r2
 800a034:	d002      	beq.n	800a03c <std+0x48>
 800a036:	33d0      	adds	r3, #208	@ 0xd0
 800a038:	429c      	cmp	r4, r3
 800a03a:	d105      	bne.n	800a048 <std+0x54>
 800a03c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a044:	f000 bf5c 	b.w	800af00 <__retarget_lock_init_recursive>
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	bf00      	nop
 800a04c:	0800d145 	.word	0x0800d145
 800a050:	0800d167 	.word	0x0800d167
 800a054:	0800d19f 	.word	0x0800d19f
 800a058:	0800d1c3 	.word	0x0800d1c3
 800a05c:	200015dc 	.word	0x200015dc

0800a060 <stdio_exit_handler>:
 800a060:	4a02      	ldr	r2, [pc, #8]	@ (800a06c <stdio_exit_handler+0xc>)
 800a062:	4903      	ldr	r1, [pc, #12]	@ (800a070 <stdio_exit_handler+0x10>)
 800a064:	4803      	ldr	r0, [pc, #12]	@ (800a074 <stdio_exit_handler+0x14>)
 800a066:	f000 bee5 	b.w	800ae34 <_fwalk_sglue>
 800a06a:	bf00      	nop
 800a06c:	2000017c 	.word	0x2000017c
 800a070:	0800c791 	.word	0x0800c791
 800a074:	200002f8 	.word	0x200002f8

0800a078 <cleanup_stdio>:
 800a078:	6841      	ldr	r1, [r0, #4]
 800a07a:	4b0c      	ldr	r3, [pc, #48]	@ (800a0ac <cleanup_stdio+0x34>)
 800a07c:	b510      	push	{r4, lr}
 800a07e:	4299      	cmp	r1, r3
 800a080:	4604      	mov	r4, r0
 800a082:	d001      	beq.n	800a088 <cleanup_stdio+0x10>
 800a084:	f002 fb84 	bl	800c790 <_fflush_r>
 800a088:	68a1      	ldr	r1, [r4, #8]
 800a08a:	4b09      	ldr	r3, [pc, #36]	@ (800a0b0 <cleanup_stdio+0x38>)
 800a08c:	4299      	cmp	r1, r3
 800a08e:	d002      	beq.n	800a096 <cleanup_stdio+0x1e>
 800a090:	4620      	mov	r0, r4
 800a092:	f002 fb7d 	bl	800c790 <_fflush_r>
 800a096:	68e1      	ldr	r1, [r4, #12]
 800a098:	4b06      	ldr	r3, [pc, #24]	@ (800a0b4 <cleanup_stdio+0x3c>)
 800a09a:	4299      	cmp	r1, r3
 800a09c:	d004      	beq.n	800a0a8 <cleanup_stdio+0x30>
 800a09e:	4620      	mov	r0, r4
 800a0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a4:	f002 bb74 	b.w	800c790 <_fflush_r>
 800a0a8:	bd10      	pop	{r4, pc}
 800a0aa:	bf00      	nop
 800a0ac:	200015dc 	.word	0x200015dc
 800a0b0:	20001644 	.word	0x20001644
 800a0b4:	200016ac 	.word	0x200016ac

0800a0b8 <global_stdio_init.part.0>:
 800a0b8:	b510      	push	{r4, lr}
 800a0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e8 <global_stdio_init.part.0+0x30>)
 800a0bc:	4c0b      	ldr	r4, [pc, #44]	@ (800a0ec <global_stdio_init.part.0+0x34>)
 800a0be:	4a0c      	ldr	r2, [pc, #48]	@ (800a0f0 <global_stdio_init.part.0+0x38>)
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f7ff ff94 	bl	8009ff4 <std>
 800a0cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	2109      	movs	r1, #9
 800a0d4:	f7ff ff8e 	bl	8009ff4 <std>
 800a0d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0dc:	2202      	movs	r2, #2
 800a0de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0e2:	2112      	movs	r1, #18
 800a0e4:	f7ff bf86 	b.w	8009ff4 <std>
 800a0e8:	20001714 	.word	0x20001714
 800a0ec:	200015dc 	.word	0x200015dc
 800a0f0:	0800a061 	.word	0x0800a061

0800a0f4 <__sfp_lock_acquire>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	@ (800a0fc <__sfp_lock_acquire+0x8>)
 800a0f6:	f000 bf04 	b.w	800af02 <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	20001719 	.word	0x20001719

0800a100 <__sfp_lock_release>:
 800a100:	4801      	ldr	r0, [pc, #4]	@ (800a108 <__sfp_lock_release+0x8>)
 800a102:	f000 beff 	b.w	800af04 <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	20001719 	.word	0x20001719

0800a10c <__sinit>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	4604      	mov	r4, r0
 800a110:	f7ff fff0 	bl	800a0f4 <__sfp_lock_acquire>
 800a114:	6a23      	ldr	r3, [r4, #32]
 800a116:	b11b      	cbz	r3, 800a120 <__sinit+0x14>
 800a118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a11c:	f7ff bff0 	b.w	800a100 <__sfp_lock_release>
 800a120:	4b04      	ldr	r3, [pc, #16]	@ (800a134 <__sinit+0x28>)
 800a122:	6223      	str	r3, [r4, #32]
 800a124:	4b04      	ldr	r3, [pc, #16]	@ (800a138 <__sinit+0x2c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1f5      	bne.n	800a118 <__sinit+0xc>
 800a12c:	f7ff ffc4 	bl	800a0b8 <global_stdio_init.part.0>
 800a130:	e7f2      	b.n	800a118 <__sinit+0xc>
 800a132:	bf00      	nop
 800a134:	0800a079 	.word	0x0800a079
 800a138:	20001714 	.word	0x20001714

0800a13c <sulp>:
 800a13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a140:	460f      	mov	r7, r1
 800a142:	4690      	mov	r8, r2
 800a144:	f002 feca 	bl	800cedc <__ulp>
 800a148:	4604      	mov	r4, r0
 800a14a:	460d      	mov	r5, r1
 800a14c:	f1b8 0f00 	cmp.w	r8, #0
 800a150:	d011      	beq.n	800a176 <sulp+0x3a>
 800a152:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a156:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	dd0b      	ble.n	800a176 <sulp+0x3a>
 800a15e:	2400      	movs	r4, #0
 800a160:	051b      	lsls	r3, r3, #20
 800a162:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a166:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a16a:	4622      	mov	r2, r4
 800a16c:	462b      	mov	r3, r5
 800a16e:	f7f6 f9b3 	bl	80004d8 <__aeabi_dmul>
 800a172:	4604      	mov	r4, r0
 800a174:	460d      	mov	r5, r1
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a180 <_strtod_l>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	b09f      	sub	sp, #124	@ 0x7c
 800a186:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a188:	2200      	movs	r2, #0
 800a18a:	460c      	mov	r4, r1
 800a18c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a18e:	f04f 0a00 	mov.w	sl, #0
 800a192:	f04f 0b00 	mov.w	fp, #0
 800a196:	460a      	mov	r2, r1
 800a198:	9005      	str	r0, [sp, #20]
 800a19a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a19c:	7811      	ldrb	r1, [r2, #0]
 800a19e:	292b      	cmp	r1, #43	@ 0x2b
 800a1a0:	d048      	beq.n	800a234 <_strtod_l+0xb4>
 800a1a2:	d836      	bhi.n	800a212 <_strtod_l+0x92>
 800a1a4:	290d      	cmp	r1, #13
 800a1a6:	d830      	bhi.n	800a20a <_strtod_l+0x8a>
 800a1a8:	2908      	cmp	r1, #8
 800a1aa:	d830      	bhi.n	800a20e <_strtod_l+0x8e>
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	d039      	beq.n	800a224 <_strtod_l+0xa4>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a1b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a1b6:	782a      	ldrb	r2, [r5, #0]
 800a1b8:	2a30      	cmp	r2, #48	@ 0x30
 800a1ba:	f040 80b1 	bne.w	800a320 <_strtod_l+0x1a0>
 800a1be:	786a      	ldrb	r2, [r5, #1]
 800a1c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a1c4:	2a58      	cmp	r2, #88	@ 0x58
 800a1c6:	d16c      	bne.n	800a2a2 <_strtod_l+0x122>
 800a1c8:	9302      	str	r3, [sp, #8]
 800a1ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1cc:	4a8e      	ldr	r2, [pc, #568]	@ (800a408 <_strtod_l+0x288>)
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	ab1a      	add	r3, sp, #104	@ 0x68
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	9805      	ldr	r0, [sp, #20]
 800a1d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a1d8:	a919      	add	r1, sp, #100	@ 0x64
 800a1da:	f001 fd75 	bl	800bcc8 <__gethex>
 800a1de:	f010 060f 	ands.w	r6, r0, #15
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	d005      	beq.n	800a1f2 <_strtod_l+0x72>
 800a1e6:	2e06      	cmp	r6, #6
 800a1e8:	d126      	bne.n	800a238 <_strtod_l+0xb8>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800a1f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f040 8584 	bne.w	800ad02 <_strtod_l+0xb82>
 800a1fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1fc:	b1bb      	cbz	r3, 800a22e <_strtod_l+0xae>
 800a1fe:	4650      	mov	r0, sl
 800a200:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a204:	b01f      	add	sp, #124	@ 0x7c
 800a206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20a:	2920      	cmp	r1, #32
 800a20c:	d1d0      	bne.n	800a1b0 <_strtod_l+0x30>
 800a20e:	3201      	adds	r2, #1
 800a210:	e7c3      	b.n	800a19a <_strtod_l+0x1a>
 800a212:	292d      	cmp	r1, #45	@ 0x2d
 800a214:	d1cc      	bne.n	800a1b0 <_strtod_l+0x30>
 800a216:	2101      	movs	r1, #1
 800a218:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a21a:	1c51      	adds	r1, r2, #1
 800a21c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a21e:	7852      	ldrb	r2, [r2, #1]
 800a220:	2a00      	cmp	r2, #0
 800a222:	d1c7      	bne.n	800a1b4 <_strtod_l+0x34>
 800a224:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a226:	9419      	str	r4, [sp, #100]	@ 0x64
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f040 8568 	bne.w	800acfe <_strtod_l+0xb7e>
 800a22e:	4650      	mov	r0, sl
 800a230:	4659      	mov	r1, fp
 800a232:	e7e7      	b.n	800a204 <_strtod_l+0x84>
 800a234:	2100      	movs	r1, #0
 800a236:	e7ef      	b.n	800a218 <_strtod_l+0x98>
 800a238:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a23a:	b13a      	cbz	r2, 800a24c <_strtod_l+0xcc>
 800a23c:	2135      	movs	r1, #53	@ 0x35
 800a23e:	a81c      	add	r0, sp, #112	@ 0x70
 800a240:	f002 ff3c 	bl	800d0bc <__copybits>
 800a244:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a246:	9805      	ldr	r0, [sp, #20]
 800a248:	f002 fb16 	bl	800c878 <_Bfree>
 800a24c:	3e01      	subs	r6, #1
 800a24e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a250:	2e04      	cmp	r6, #4
 800a252:	d806      	bhi.n	800a262 <_strtod_l+0xe2>
 800a254:	e8df f006 	tbb	[pc, r6]
 800a258:	201d0314 	.word	0x201d0314
 800a25c:	14          	.byte	0x14
 800a25d:	00          	.byte	0x00
 800a25e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a262:	05e1      	lsls	r1, r4, #23
 800a264:	bf48      	it	mi
 800a266:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a26a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a26e:	0d1b      	lsrs	r3, r3, #20
 800a270:	051b      	lsls	r3, r3, #20
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1bd      	bne.n	800a1f2 <_strtod_l+0x72>
 800a276:	f000 fe19 	bl	800aeac <__errno>
 800a27a:	2322      	movs	r3, #34	@ 0x22
 800a27c:	6003      	str	r3, [r0, #0]
 800a27e:	e7b8      	b.n	800a1f2 <_strtod_l+0x72>
 800a280:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a284:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a288:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a28c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a290:	e7e7      	b.n	800a262 <_strtod_l+0xe2>
 800a292:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a40c <_strtod_l+0x28c>
 800a296:	e7e4      	b.n	800a262 <_strtod_l+0xe2>
 800a298:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a29c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a2a0:	e7df      	b.n	800a262 <_strtod_l+0xe2>
 800a2a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2a8:	785b      	ldrb	r3, [r3, #1]
 800a2aa:	2b30      	cmp	r3, #48	@ 0x30
 800a2ac:	d0f9      	beq.n	800a2a2 <_strtod_l+0x122>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d09f      	beq.n	800a1f2 <_strtod_l+0x72>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2b8:	220a      	movs	r2, #10
 800a2ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2bc:	2300      	movs	r3, #0
 800a2be:	461f      	mov	r7, r3
 800a2c0:	9308      	str	r3, [sp, #32]
 800a2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2c4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a2c6:	7805      	ldrb	r5, [r0, #0]
 800a2c8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a2cc:	b2d9      	uxtb	r1, r3
 800a2ce:	2909      	cmp	r1, #9
 800a2d0:	d928      	bls.n	800a324 <_strtod_l+0x1a4>
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	494e      	ldr	r1, [pc, #312]	@ (800a410 <_strtod_l+0x290>)
 800a2d6:	f000 fdcb 	bl	800ae70 <strncmp>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d032      	beq.n	800a344 <_strtod_l+0x1c4>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4681      	mov	r9, r0
 800a2e4:	463d      	mov	r5, r7
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2a65      	cmp	r2, #101	@ 0x65
 800a2ea:	d001      	beq.n	800a2f0 <_strtod_l+0x170>
 800a2ec:	2a45      	cmp	r2, #69	@ 0x45
 800a2ee:	d114      	bne.n	800a31a <_strtod_l+0x19a>
 800a2f0:	b91d      	cbnz	r5, 800a2fa <_strtod_l+0x17a>
 800a2f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2f4:	4302      	orrs	r2, r0
 800a2f6:	d095      	beq.n	800a224 <_strtod_l+0xa4>
 800a2f8:	2500      	movs	r5, #0
 800a2fa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a2fc:	1c62      	adds	r2, r4, #1
 800a2fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800a300:	7862      	ldrb	r2, [r4, #1]
 800a302:	2a2b      	cmp	r2, #43	@ 0x2b
 800a304:	d077      	beq.n	800a3f6 <_strtod_l+0x276>
 800a306:	2a2d      	cmp	r2, #45	@ 0x2d
 800a308:	d07b      	beq.n	800a402 <_strtod_l+0x282>
 800a30a:	f04f 0c00 	mov.w	ip, #0
 800a30e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a312:	2909      	cmp	r1, #9
 800a314:	f240 8082 	bls.w	800a41c <_strtod_l+0x29c>
 800a318:	9419      	str	r4, [sp, #100]	@ 0x64
 800a31a:	f04f 0800 	mov.w	r8, #0
 800a31e:	e0a2      	b.n	800a466 <_strtod_l+0x2e6>
 800a320:	2300      	movs	r3, #0
 800a322:	e7c7      	b.n	800a2b4 <_strtod_l+0x134>
 800a324:	2f08      	cmp	r7, #8
 800a326:	bfd5      	itete	le
 800a328:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a32a:	9908      	ldrgt	r1, [sp, #32]
 800a32c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a330:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a334:	f100 0001 	add.w	r0, r0, #1
 800a338:	bfd4      	ite	le
 800a33a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a33c:	9308      	strgt	r3, [sp, #32]
 800a33e:	3701      	adds	r7, #1
 800a340:	9019      	str	r0, [sp, #100]	@ 0x64
 800a342:	e7bf      	b.n	800a2c4 <_strtod_l+0x144>
 800a344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	9219      	str	r2, [sp, #100]	@ 0x64
 800a34a:	785a      	ldrb	r2, [r3, #1]
 800a34c:	b37f      	cbz	r7, 800a3ae <_strtod_l+0x22e>
 800a34e:	4681      	mov	r9, r0
 800a350:	463d      	mov	r5, r7
 800a352:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a356:	2b09      	cmp	r3, #9
 800a358:	d912      	bls.n	800a380 <_strtod_l+0x200>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e7c4      	b.n	800a2e8 <_strtod_l+0x168>
 800a35e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a360:	3001      	adds	r0, #1
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	9219      	str	r2, [sp, #100]	@ 0x64
 800a366:	785a      	ldrb	r2, [r3, #1]
 800a368:	2a30      	cmp	r2, #48	@ 0x30
 800a36a:	d0f8      	beq.n	800a35e <_strtod_l+0x1de>
 800a36c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a370:	2b08      	cmp	r3, #8
 800a372:	f200 84cb 	bhi.w	800ad0c <_strtod_l+0xb8c>
 800a376:	4681      	mov	r9, r0
 800a378:	2000      	movs	r0, #0
 800a37a:	4605      	mov	r5, r0
 800a37c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a37e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a380:	3a30      	subs	r2, #48	@ 0x30
 800a382:	f100 0301 	add.w	r3, r0, #1
 800a386:	d02a      	beq.n	800a3de <_strtod_l+0x25e>
 800a388:	4499      	add	r9, r3
 800a38a:	210a      	movs	r1, #10
 800a38c:	462b      	mov	r3, r5
 800a38e:	eb00 0c05 	add.w	ip, r0, r5
 800a392:	4563      	cmp	r3, ip
 800a394:	d10d      	bne.n	800a3b2 <_strtod_l+0x232>
 800a396:	1c69      	adds	r1, r5, #1
 800a398:	4401      	add	r1, r0
 800a39a:	4428      	add	r0, r5
 800a39c:	2808      	cmp	r0, #8
 800a39e:	dc16      	bgt.n	800a3ce <_strtod_l+0x24e>
 800a3a0:	230a      	movs	r3, #10
 800a3a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a3a4:	fb03 2300 	mla	r3, r3, r0, r2
 800a3a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e018      	b.n	800a3e0 <_strtod_l+0x260>
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	e7da      	b.n	800a368 <_strtod_l+0x1e8>
 800a3b2:	2b08      	cmp	r3, #8
 800a3b4:	f103 0301 	add.w	r3, r3, #1
 800a3b8:	dc03      	bgt.n	800a3c2 <_strtod_l+0x242>
 800a3ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a3bc:	434e      	muls	r6, r1
 800a3be:	960a      	str	r6, [sp, #40]	@ 0x28
 800a3c0:	e7e7      	b.n	800a392 <_strtod_l+0x212>
 800a3c2:	2b10      	cmp	r3, #16
 800a3c4:	bfde      	ittt	le
 800a3c6:	9e08      	ldrle	r6, [sp, #32]
 800a3c8:	434e      	mulle	r6, r1
 800a3ca:	9608      	strle	r6, [sp, #32]
 800a3cc:	e7e1      	b.n	800a392 <_strtod_l+0x212>
 800a3ce:	280f      	cmp	r0, #15
 800a3d0:	dceb      	bgt.n	800a3aa <_strtod_l+0x22a>
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	9808      	ldr	r0, [sp, #32]
 800a3d6:	fb03 2300 	mla	r3, r3, r0, r2
 800a3da:	9308      	str	r3, [sp, #32]
 800a3dc:	e7e5      	b.n	800a3aa <_strtod_l+0x22a>
 800a3de:	4629      	mov	r1, r5
 800a3e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3e2:	460d      	mov	r5, r1
 800a3e4:	1c50      	adds	r0, r2, #1
 800a3e6:	9019      	str	r0, [sp, #100]	@ 0x64
 800a3e8:	7852      	ldrb	r2, [r2, #1]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	e7b1      	b.n	800a352 <_strtod_l+0x1d2>
 800a3ee:	f04f 0900 	mov.w	r9, #0
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e77d      	b.n	800a2f2 <_strtod_l+0x172>
 800a3f6:	f04f 0c00 	mov.w	ip, #0
 800a3fa:	1ca2      	adds	r2, r4, #2
 800a3fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3fe:	78a2      	ldrb	r2, [r4, #2]
 800a400:	e785      	b.n	800a30e <_strtod_l+0x18e>
 800a402:	f04f 0c01 	mov.w	ip, #1
 800a406:	e7f8      	b.n	800a3fa <_strtod_l+0x27a>
 800a408:	0800da84 	.word	0x0800da84
 800a40c:	7ff00000 	.word	0x7ff00000
 800a410:	0800da6b 	.word	0x0800da6b
 800a414:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a416:	1c51      	adds	r1, r2, #1
 800a418:	9119      	str	r1, [sp, #100]	@ 0x64
 800a41a:	7852      	ldrb	r2, [r2, #1]
 800a41c:	2a30      	cmp	r2, #48	@ 0x30
 800a41e:	d0f9      	beq.n	800a414 <_strtod_l+0x294>
 800a420:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a424:	2908      	cmp	r1, #8
 800a426:	f63f af78 	bhi.w	800a31a <_strtod_l+0x19a>
 800a42a:	f04f 080a 	mov.w	r8, #10
 800a42e:	3a30      	subs	r2, #48	@ 0x30
 800a430:	920e      	str	r2, [sp, #56]	@ 0x38
 800a432:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a434:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a436:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a438:	1c56      	adds	r6, r2, #1
 800a43a:	9619      	str	r6, [sp, #100]	@ 0x64
 800a43c:	7852      	ldrb	r2, [r2, #1]
 800a43e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a442:	f1be 0f09 	cmp.w	lr, #9
 800a446:	d939      	bls.n	800a4bc <_strtod_l+0x33c>
 800a448:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a44a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a44e:	1a76      	subs	r6, r6, r1
 800a450:	2e08      	cmp	r6, #8
 800a452:	dc03      	bgt.n	800a45c <_strtod_l+0x2dc>
 800a454:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a456:	4588      	cmp	r8, r1
 800a458:	bfa8      	it	ge
 800a45a:	4688      	movge	r8, r1
 800a45c:	f1bc 0f00 	cmp.w	ip, #0
 800a460:	d001      	beq.n	800a466 <_strtod_l+0x2e6>
 800a462:	f1c8 0800 	rsb	r8, r8, #0
 800a466:	2d00      	cmp	r5, #0
 800a468:	d14e      	bne.n	800a508 <_strtod_l+0x388>
 800a46a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a46c:	4308      	orrs	r0, r1
 800a46e:	f47f aec0 	bne.w	800a1f2 <_strtod_l+0x72>
 800a472:	2b00      	cmp	r3, #0
 800a474:	f47f aed6 	bne.w	800a224 <_strtod_l+0xa4>
 800a478:	2a69      	cmp	r2, #105	@ 0x69
 800a47a:	d028      	beq.n	800a4ce <_strtod_l+0x34e>
 800a47c:	dc25      	bgt.n	800a4ca <_strtod_l+0x34a>
 800a47e:	2a49      	cmp	r2, #73	@ 0x49
 800a480:	d025      	beq.n	800a4ce <_strtod_l+0x34e>
 800a482:	2a4e      	cmp	r2, #78	@ 0x4e
 800a484:	f47f aece 	bne.w	800a224 <_strtod_l+0xa4>
 800a488:	499a      	ldr	r1, [pc, #616]	@ (800a6f4 <_strtod_l+0x574>)
 800a48a:	a819      	add	r0, sp, #100	@ 0x64
 800a48c:	f001 fe3e 	bl	800c10c <__match>
 800a490:	2800      	cmp	r0, #0
 800a492:	f43f aec7 	beq.w	800a224 <_strtod_l+0xa4>
 800a496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b28      	cmp	r3, #40	@ 0x28
 800a49c:	d12e      	bne.n	800a4fc <_strtod_l+0x37c>
 800a49e:	4996      	ldr	r1, [pc, #600]	@ (800a6f8 <_strtod_l+0x578>)
 800a4a0:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4a2:	a819      	add	r0, sp, #100	@ 0x64
 800a4a4:	f001 fe46 	bl	800c134 <__hexnan>
 800a4a8:	2805      	cmp	r0, #5
 800a4aa:	d127      	bne.n	800a4fc <_strtod_l+0x37c>
 800a4ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a4b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a4b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a4ba:	e69a      	b.n	800a1f2 <_strtod_l+0x72>
 800a4bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a4be:	fb08 2101 	mla	r1, r8, r1, r2
 800a4c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a4c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4c8:	e7b5      	b.n	800a436 <_strtod_l+0x2b6>
 800a4ca:	2a6e      	cmp	r2, #110	@ 0x6e
 800a4cc:	e7da      	b.n	800a484 <_strtod_l+0x304>
 800a4ce:	498b      	ldr	r1, [pc, #556]	@ (800a6fc <_strtod_l+0x57c>)
 800a4d0:	a819      	add	r0, sp, #100	@ 0x64
 800a4d2:	f001 fe1b 	bl	800c10c <__match>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	f43f aea4 	beq.w	800a224 <_strtod_l+0xa4>
 800a4dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4de:	4988      	ldr	r1, [pc, #544]	@ (800a700 <_strtod_l+0x580>)
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	a819      	add	r0, sp, #100	@ 0x64
 800a4e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4e6:	f001 fe11 	bl	800c10c <__match>
 800a4ea:	b910      	cbnz	r0, 800a4f2 <_strtod_l+0x372>
 800a4ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4f2:	f04f 0a00 	mov.w	sl, #0
 800a4f6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a704 <_strtod_l+0x584>
 800a4fa:	e67a      	b.n	800a1f2 <_strtod_l+0x72>
 800a4fc:	4882      	ldr	r0, [pc, #520]	@ (800a708 <_strtod_l+0x588>)
 800a4fe:	f000 fd1f 	bl	800af40 <nan>
 800a502:	4682      	mov	sl, r0
 800a504:	468b      	mov	fp, r1
 800a506:	e674      	b.n	800a1f2 <_strtod_l+0x72>
 800a508:	eba8 0309 	sub.w	r3, r8, r9
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	bf08      	it	eq
 800a510:	462f      	moveq	r7, r5
 800a512:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a514:	2d10      	cmp	r5, #16
 800a516:	462c      	mov	r4, r5
 800a518:	9309      	str	r3, [sp, #36]	@ 0x24
 800a51a:	bfa8      	it	ge
 800a51c:	2410      	movge	r4, #16
 800a51e:	f7f5 ff61 	bl	80003e4 <__aeabi_ui2d>
 800a522:	2d09      	cmp	r5, #9
 800a524:	4682      	mov	sl, r0
 800a526:	468b      	mov	fp, r1
 800a528:	dc11      	bgt.n	800a54e <_strtod_l+0x3ce>
 800a52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f43f ae60 	beq.w	800a1f2 <_strtod_l+0x72>
 800a532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a534:	dd76      	ble.n	800a624 <_strtod_l+0x4a4>
 800a536:	2b16      	cmp	r3, #22
 800a538:	dc5d      	bgt.n	800a5f6 <_strtod_l+0x476>
 800a53a:	4974      	ldr	r1, [pc, #464]	@ (800a70c <_strtod_l+0x58c>)
 800a53c:	4652      	mov	r2, sl
 800a53e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a542:	465b      	mov	r3, fp
 800a544:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a548:	f7f5 ffc6 	bl	80004d8 <__aeabi_dmul>
 800a54c:	e7d9      	b.n	800a502 <_strtod_l+0x382>
 800a54e:	4b6f      	ldr	r3, [pc, #444]	@ (800a70c <_strtod_l+0x58c>)
 800a550:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a554:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a558:	f7f5 ffbe 	bl	80004d8 <__aeabi_dmul>
 800a55c:	4682      	mov	sl, r0
 800a55e:	9808      	ldr	r0, [sp, #32]
 800a560:	468b      	mov	fp, r1
 800a562:	f7f5 ff3f 	bl	80003e4 <__aeabi_ui2d>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4650      	mov	r0, sl
 800a56c:	4659      	mov	r1, fp
 800a56e:	f7f5 fdfd 	bl	800016c <__adddf3>
 800a572:	2d0f      	cmp	r5, #15
 800a574:	4682      	mov	sl, r0
 800a576:	468b      	mov	fp, r1
 800a578:	ddd7      	ble.n	800a52a <_strtod_l+0x3aa>
 800a57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a57c:	1b2c      	subs	r4, r5, r4
 800a57e:	441c      	add	r4, r3
 800a580:	2c00      	cmp	r4, #0
 800a582:	f340 8096 	ble.w	800a6b2 <_strtod_l+0x532>
 800a586:	f014 030f 	ands.w	r3, r4, #15
 800a58a:	d00a      	beq.n	800a5a2 <_strtod_l+0x422>
 800a58c:	495f      	ldr	r1, [pc, #380]	@ (800a70c <_strtod_l+0x58c>)
 800a58e:	4652      	mov	r2, sl
 800a590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a594:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a598:	465b      	mov	r3, fp
 800a59a:	f7f5 ff9d 	bl	80004d8 <__aeabi_dmul>
 800a59e:	4682      	mov	sl, r0
 800a5a0:	468b      	mov	fp, r1
 800a5a2:	f034 040f 	bics.w	r4, r4, #15
 800a5a6:	d073      	beq.n	800a690 <_strtod_l+0x510>
 800a5a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a5ac:	dd48      	ble.n	800a640 <_strtod_l+0x4c0>
 800a5ae:	2400      	movs	r4, #0
 800a5b0:	46a0      	mov	r8, r4
 800a5b2:	46a1      	mov	r9, r4
 800a5b4:	940a      	str	r4, [sp, #40]	@ 0x28
 800a5b6:	2322      	movs	r3, #34	@ 0x22
 800a5b8:	f04f 0a00 	mov.w	sl, #0
 800a5bc:	9a05      	ldr	r2, [sp, #20]
 800a5be:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a704 <_strtod_l+0x584>
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f43f ae13 	beq.w	800a1f2 <_strtod_l+0x72>
 800a5cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ce:	9805      	ldr	r0, [sp, #20]
 800a5d0:	f002 f952 	bl	800c878 <_Bfree>
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	9805      	ldr	r0, [sp, #20]
 800a5d8:	f002 f94e 	bl	800c878 <_Bfree>
 800a5dc:	4641      	mov	r1, r8
 800a5de:	9805      	ldr	r0, [sp, #20]
 800a5e0:	f002 f94a 	bl	800c878 <_Bfree>
 800a5e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5e6:	9805      	ldr	r0, [sp, #20]
 800a5e8:	f002 f946 	bl	800c878 <_Bfree>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	9805      	ldr	r0, [sp, #20]
 800a5f0:	f002 f942 	bl	800c878 <_Bfree>
 800a5f4:	e5fd      	b.n	800a1f2 <_strtod_l+0x72>
 800a5f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	dbbc      	blt.n	800a57a <_strtod_l+0x3fa>
 800a600:	4c42      	ldr	r4, [pc, #264]	@ (800a70c <_strtod_l+0x58c>)
 800a602:	f1c5 050f 	rsb	r5, r5, #15
 800a606:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a60a:	4652      	mov	r2, sl
 800a60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a610:	465b      	mov	r3, fp
 800a612:	f7f5 ff61 	bl	80004d8 <__aeabi_dmul>
 800a616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a618:	1b5d      	subs	r5, r3, r5
 800a61a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a61e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a622:	e791      	b.n	800a548 <_strtod_l+0x3c8>
 800a624:	3316      	adds	r3, #22
 800a626:	dba8      	blt.n	800a57a <_strtod_l+0x3fa>
 800a628:	4b38      	ldr	r3, [pc, #224]	@ (800a70c <_strtod_l+0x58c>)
 800a62a:	eba9 0808 	sub.w	r8, r9, r8
 800a62e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a632:	4650      	mov	r0, sl
 800a634:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a638:	4659      	mov	r1, fp
 800a63a:	f7f6 f877 	bl	800072c <__aeabi_ddiv>
 800a63e:	e760      	b.n	800a502 <_strtod_l+0x382>
 800a640:	4b33      	ldr	r3, [pc, #204]	@ (800a710 <_strtod_l+0x590>)
 800a642:	4650      	mov	r0, sl
 800a644:	9308      	str	r3, [sp, #32]
 800a646:	2300      	movs	r3, #0
 800a648:	4659      	mov	r1, fp
 800a64a:	461e      	mov	r6, r3
 800a64c:	1124      	asrs	r4, r4, #4
 800a64e:	2c01      	cmp	r4, #1
 800a650:	dc21      	bgt.n	800a696 <_strtod_l+0x516>
 800a652:	b10b      	cbz	r3, 800a658 <_strtod_l+0x4d8>
 800a654:	4682      	mov	sl, r0
 800a656:	468b      	mov	fp, r1
 800a658:	492d      	ldr	r1, [pc, #180]	@ (800a710 <_strtod_l+0x590>)
 800a65a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a65e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a662:	4652      	mov	r2, sl
 800a664:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a668:	465b      	mov	r3, fp
 800a66a:	f7f5 ff35 	bl	80004d8 <__aeabi_dmul>
 800a66e:	4b25      	ldr	r3, [pc, #148]	@ (800a704 <_strtod_l+0x584>)
 800a670:	460a      	mov	r2, r1
 800a672:	400b      	ands	r3, r1
 800a674:	4927      	ldr	r1, [pc, #156]	@ (800a714 <_strtod_l+0x594>)
 800a676:	4682      	mov	sl, r0
 800a678:	428b      	cmp	r3, r1
 800a67a:	d898      	bhi.n	800a5ae <_strtod_l+0x42e>
 800a67c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a680:	428b      	cmp	r3, r1
 800a682:	bf86      	itte	hi
 800a684:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a688:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a718 <_strtod_l+0x598>
 800a68c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a690:	2300      	movs	r3, #0
 800a692:	9308      	str	r3, [sp, #32]
 800a694:	e07a      	b.n	800a78c <_strtod_l+0x60c>
 800a696:	07e2      	lsls	r2, r4, #31
 800a698:	d505      	bpl.n	800a6a6 <_strtod_l+0x526>
 800a69a:	9b08      	ldr	r3, [sp, #32]
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f7f5 ff1a 	bl	80004d8 <__aeabi_dmul>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	9a08      	ldr	r2, [sp, #32]
 800a6a8:	3601      	adds	r6, #1
 800a6aa:	3208      	adds	r2, #8
 800a6ac:	1064      	asrs	r4, r4, #1
 800a6ae:	9208      	str	r2, [sp, #32]
 800a6b0:	e7cd      	b.n	800a64e <_strtod_l+0x4ce>
 800a6b2:	d0ed      	beq.n	800a690 <_strtod_l+0x510>
 800a6b4:	4264      	negs	r4, r4
 800a6b6:	f014 020f 	ands.w	r2, r4, #15
 800a6ba:	d00a      	beq.n	800a6d2 <_strtod_l+0x552>
 800a6bc:	4b13      	ldr	r3, [pc, #76]	@ (800a70c <_strtod_l+0x58c>)
 800a6be:	4650      	mov	r0, sl
 800a6c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6c4:	4659      	mov	r1, fp
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	f7f6 f82f 	bl	800072c <__aeabi_ddiv>
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	468b      	mov	fp, r1
 800a6d2:	1124      	asrs	r4, r4, #4
 800a6d4:	d0dc      	beq.n	800a690 <_strtod_l+0x510>
 800a6d6:	2c1f      	cmp	r4, #31
 800a6d8:	dd20      	ble.n	800a71c <_strtod_l+0x59c>
 800a6da:	2400      	movs	r4, #0
 800a6dc:	46a0      	mov	r8, r4
 800a6de:	46a1      	mov	r9, r4
 800a6e0:	940a      	str	r4, [sp, #40]	@ 0x28
 800a6e2:	2322      	movs	r3, #34	@ 0x22
 800a6e4:	9a05      	ldr	r2, [sp, #20]
 800a6e6:	f04f 0a00 	mov.w	sl, #0
 800a6ea:	f04f 0b00 	mov.w	fp, #0
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	e768      	b.n	800a5c4 <_strtod_l+0x444>
 800a6f2:	bf00      	nop
 800a6f4:	0800da3f 	.word	0x0800da3f
 800a6f8:	0800da70 	.word	0x0800da70
 800a6fc:	0800da37 	.word	0x0800da37
 800a700:	0800dbcc 	.word	0x0800dbcc
 800a704:	7ff00000 	.word	0x7ff00000
 800a708:	0800de5b 	.word	0x0800de5b
 800a70c:	0800dd58 	.word	0x0800dd58
 800a710:	0800dd30 	.word	0x0800dd30
 800a714:	7ca00000 	.word	0x7ca00000
 800a718:	7fefffff 	.word	0x7fefffff
 800a71c:	f014 0310 	ands.w	r3, r4, #16
 800a720:	bf18      	it	ne
 800a722:	236a      	movne	r3, #106	@ 0x6a
 800a724:	4650      	mov	r0, sl
 800a726:	9308      	str	r3, [sp, #32]
 800a728:	4659      	mov	r1, fp
 800a72a:	2300      	movs	r3, #0
 800a72c:	4ea9      	ldr	r6, [pc, #676]	@ (800a9d4 <_strtod_l+0x854>)
 800a72e:	07e2      	lsls	r2, r4, #31
 800a730:	d504      	bpl.n	800a73c <_strtod_l+0x5bc>
 800a732:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a736:	f7f5 fecf 	bl	80004d8 <__aeabi_dmul>
 800a73a:	2301      	movs	r3, #1
 800a73c:	1064      	asrs	r4, r4, #1
 800a73e:	f106 0608 	add.w	r6, r6, #8
 800a742:	d1f4      	bne.n	800a72e <_strtod_l+0x5ae>
 800a744:	b10b      	cbz	r3, 800a74a <_strtod_l+0x5ca>
 800a746:	4682      	mov	sl, r0
 800a748:	468b      	mov	fp, r1
 800a74a:	9b08      	ldr	r3, [sp, #32]
 800a74c:	b1b3      	cbz	r3, 800a77c <_strtod_l+0x5fc>
 800a74e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a752:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a756:	2b00      	cmp	r3, #0
 800a758:	4659      	mov	r1, fp
 800a75a:	dd0f      	ble.n	800a77c <_strtod_l+0x5fc>
 800a75c:	2b1f      	cmp	r3, #31
 800a75e:	dd57      	ble.n	800a810 <_strtod_l+0x690>
 800a760:	2b34      	cmp	r3, #52	@ 0x34
 800a762:	bfd8      	it	le
 800a764:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a768:	f04f 0a00 	mov.w	sl, #0
 800a76c:	bfcf      	iteee	gt
 800a76e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a772:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a776:	4093      	lslle	r3, r2
 800a778:	ea03 0b01 	andle.w	fp, r3, r1
 800a77c:	2200      	movs	r2, #0
 800a77e:	2300      	movs	r3, #0
 800a780:	4650      	mov	r0, sl
 800a782:	4659      	mov	r1, fp
 800a784:	f7f6 f910 	bl	80009a8 <__aeabi_dcmpeq>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1a6      	bne.n	800a6da <_strtod_l+0x55a>
 800a78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a78e:	463a      	mov	r2, r7
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a794:	462b      	mov	r3, r5
 800a796:	9805      	ldr	r0, [sp, #20]
 800a798:	f002 f8d6 	bl	800c948 <__s2b>
 800a79c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f43f af05 	beq.w	800a5ae <_strtod_l+0x42e>
 800a7a4:	2400      	movs	r4, #0
 800a7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7a8:	eba9 0308 	sub.w	r3, r9, r8
 800a7ac:	2a00      	cmp	r2, #0
 800a7ae:	bfa8      	it	ge
 800a7b0:	2300      	movge	r3, #0
 800a7b2:	46a0      	mov	r8, r4
 800a7b4:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800a7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7be:	9805      	ldr	r0, [sp, #20]
 800a7c0:	6859      	ldr	r1, [r3, #4]
 800a7c2:	f002 f819 	bl	800c7f8 <_Balloc>
 800a7c6:	4681      	mov	r9, r0
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	f43f aef4 	beq.w	800a5b6 <_strtod_l+0x436>
 800a7ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d0:	300c      	adds	r0, #12
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	f103 010c 	add.w	r1, r3, #12
 800a7d8:	3202      	adds	r2, #2
 800a7da:	0092      	lsls	r2, r2, #2
 800a7dc:	f000 fba1 	bl	800af22 <memcpy>
 800a7e0:	ab1c      	add	r3, sp, #112	@ 0x70
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	4652      	mov	r2, sl
 800a7ea:	465b      	mov	r3, fp
 800a7ec:	9805      	ldr	r0, [sp, #20]
 800a7ee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a7f2:	f002 fbdb 	bl	800cfac <__d2b>
 800a7f6:	901a      	str	r0, [sp, #104]	@ 0x68
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f43f aedc 	beq.w	800a5b6 <_strtod_l+0x436>
 800a7fe:	2101      	movs	r1, #1
 800a800:	9805      	ldr	r0, [sp, #20]
 800a802:	f002 f937 	bl	800ca74 <__i2b>
 800a806:	4680      	mov	r8, r0
 800a808:	b948      	cbnz	r0, 800a81e <_strtod_l+0x69e>
 800a80a:	f04f 0800 	mov.w	r8, #0
 800a80e:	e6d2      	b.n	800a5b6 <_strtod_l+0x436>
 800a810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a814:	fa02 f303 	lsl.w	r3, r2, r3
 800a818:	ea03 0a0a 	and.w	sl, r3, sl
 800a81c:	e7ae      	b.n	800a77c <_strtod_l+0x5fc>
 800a81e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a820:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a822:	2d00      	cmp	r5, #0
 800a824:	bfab      	itete	ge
 800a826:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a828:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a82a:	18ef      	addge	r7, r5, r3
 800a82c:	1b5e      	sublt	r6, r3, r5
 800a82e:	9b08      	ldr	r3, [sp, #32]
 800a830:	bfa8      	it	ge
 800a832:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a834:	eba5 0503 	sub.w	r5, r5, r3
 800a838:	4415      	add	r5, r2
 800a83a:	4b67      	ldr	r3, [pc, #412]	@ (800a9d8 <_strtod_l+0x858>)
 800a83c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800a840:	bfb8      	it	lt
 800a842:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a844:	429d      	cmp	r5, r3
 800a846:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a84a:	da50      	bge.n	800a8ee <_strtod_l+0x76e>
 800a84c:	1b5b      	subs	r3, r3, r5
 800a84e:	2b1f      	cmp	r3, #31
 800a850:	f04f 0101 	mov.w	r1, #1
 800a854:	eba2 0203 	sub.w	r2, r2, r3
 800a858:	dc3d      	bgt.n	800a8d6 <_strtod_l+0x756>
 800a85a:	fa01 f303 	lsl.w	r3, r1, r3
 800a85e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a860:	2300      	movs	r3, #0
 800a862:	9310      	str	r3, [sp, #64]	@ 0x40
 800a864:	18bd      	adds	r5, r7, r2
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	42af      	cmp	r7, r5
 800a86a:	4416      	add	r6, r2
 800a86c:	441e      	add	r6, r3
 800a86e:	463b      	mov	r3, r7
 800a870:	bfa8      	it	ge
 800a872:	462b      	movge	r3, r5
 800a874:	42b3      	cmp	r3, r6
 800a876:	bfa8      	it	ge
 800a878:	4633      	movge	r3, r6
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	bfc2      	ittt	gt
 800a87e:	1aed      	subgt	r5, r5, r3
 800a880:	1af6      	subgt	r6, r6, r3
 800a882:	1aff      	subgt	r7, r7, r3
 800a884:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd16      	ble.n	800a8b8 <_strtod_l+0x738>
 800a88a:	4641      	mov	r1, r8
 800a88c:	461a      	mov	r2, r3
 800a88e:	9805      	ldr	r0, [sp, #20]
 800a890:	f002 f9ae 	bl	800cbf0 <__pow5mult>
 800a894:	4680      	mov	r8, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	d0b7      	beq.n	800a80a <_strtod_l+0x68a>
 800a89a:	4601      	mov	r1, r0
 800a89c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a89e:	9805      	ldr	r0, [sp, #20]
 800a8a0:	f002 f8fe 	bl	800caa0 <__multiply>
 800a8a4:	900e      	str	r0, [sp, #56]	@ 0x38
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f ae85 	beq.w	800a5b6 <_strtod_l+0x436>
 800a8ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8ae:	9805      	ldr	r0, [sp, #20]
 800a8b0:	f001 ffe2 	bl	800c878 <_Bfree>
 800a8b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	dc1d      	bgt.n	800a8f8 <_strtod_l+0x778>
 800a8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dd23      	ble.n	800a90a <_strtod_l+0x78a>
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a8c6:	9805      	ldr	r0, [sp, #20]
 800a8c8:	f002 f992 	bl	800cbf0 <__pow5mult>
 800a8cc:	4681      	mov	r9, r0
 800a8ce:	b9e0      	cbnz	r0, 800a90a <_strtod_l+0x78a>
 800a8d0:	f04f 0900 	mov.w	r9, #0
 800a8d4:	e66f      	b.n	800a5b6 <_strtod_l+0x436>
 800a8d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a8da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a8de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a8e2:	35e2      	adds	r5, #226	@ 0xe2
 800a8e4:	fa01 f305 	lsl.w	r3, r1, r5
 800a8e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a8ec:	e7ba      	b.n	800a864 <_strtod_l+0x6e4>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8f6:	e7b5      	b.n	800a864 <_strtod_l+0x6e4>
 800a8f8:	462a      	mov	r2, r5
 800a8fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8fc:	9805      	ldr	r0, [sp, #20]
 800a8fe:	f002 f9d1 	bl	800cca4 <__lshift>
 800a902:	901a      	str	r0, [sp, #104]	@ 0x68
 800a904:	2800      	cmp	r0, #0
 800a906:	d1d9      	bne.n	800a8bc <_strtod_l+0x73c>
 800a908:	e655      	b.n	800a5b6 <_strtod_l+0x436>
 800a90a:	2e00      	cmp	r6, #0
 800a90c:	dd07      	ble.n	800a91e <_strtod_l+0x79e>
 800a90e:	4649      	mov	r1, r9
 800a910:	4632      	mov	r2, r6
 800a912:	9805      	ldr	r0, [sp, #20]
 800a914:	f002 f9c6 	bl	800cca4 <__lshift>
 800a918:	4681      	mov	r9, r0
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d0d8      	beq.n	800a8d0 <_strtod_l+0x750>
 800a91e:	2f00      	cmp	r7, #0
 800a920:	dd08      	ble.n	800a934 <_strtod_l+0x7b4>
 800a922:	4641      	mov	r1, r8
 800a924:	463a      	mov	r2, r7
 800a926:	9805      	ldr	r0, [sp, #20]
 800a928:	f002 f9bc 	bl	800cca4 <__lshift>
 800a92c:	4680      	mov	r8, r0
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f ae41 	beq.w	800a5b6 <_strtod_l+0x436>
 800a934:	464a      	mov	r2, r9
 800a936:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a938:	9805      	ldr	r0, [sp, #20]
 800a93a:	f002 fa3b 	bl	800cdb4 <__mdiff>
 800a93e:	4604      	mov	r4, r0
 800a940:	2800      	cmp	r0, #0
 800a942:	f43f ae38 	beq.w	800a5b6 <_strtod_l+0x436>
 800a946:	68c3      	ldr	r3, [r0, #12]
 800a948:	4641      	mov	r1, r8
 800a94a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a94c:	2300      	movs	r3, #0
 800a94e:	60c3      	str	r3, [r0, #12]
 800a950:	f002 fa14 	bl	800cd7c <__mcmp>
 800a954:	2800      	cmp	r0, #0
 800a956:	da45      	bge.n	800a9e4 <_strtod_l+0x864>
 800a958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a95a:	ea53 030a 	orrs.w	r3, r3, sl
 800a95e:	d16b      	bne.n	800aa38 <_strtod_l+0x8b8>
 800a960:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a964:	2b00      	cmp	r3, #0
 800a966:	d167      	bne.n	800aa38 <_strtod_l+0x8b8>
 800a968:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a96c:	0d1b      	lsrs	r3, r3, #20
 800a96e:	051b      	lsls	r3, r3, #20
 800a970:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a974:	d960      	bls.n	800aa38 <_strtod_l+0x8b8>
 800a976:	6963      	ldr	r3, [r4, #20]
 800a978:	b913      	cbnz	r3, 800a980 <_strtod_l+0x800>
 800a97a:	6923      	ldr	r3, [r4, #16]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	dd5b      	ble.n	800aa38 <_strtod_l+0x8b8>
 800a980:	4621      	mov	r1, r4
 800a982:	2201      	movs	r2, #1
 800a984:	9805      	ldr	r0, [sp, #20]
 800a986:	f002 f98d 	bl	800cca4 <__lshift>
 800a98a:	4641      	mov	r1, r8
 800a98c:	4604      	mov	r4, r0
 800a98e:	f002 f9f5 	bl	800cd7c <__mcmp>
 800a992:	2800      	cmp	r0, #0
 800a994:	dd50      	ble.n	800aa38 <_strtod_l+0x8b8>
 800a996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a99a:	9a08      	ldr	r2, [sp, #32]
 800a99c:	0d1b      	lsrs	r3, r3, #20
 800a99e:	051b      	lsls	r3, r3, #20
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	d06a      	beq.n	800aa7a <_strtod_l+0x8fa>
 800a9a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9a8:	d867      	bhi.n	800aa7a <_strtod_l+0x8fa>
 800a9aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a9ae:	f67f ae98 	bls.w	800a6e2 <_strtod_l+0x562>
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	4b09      	ldr	r3, [pc, #36]	@ (800a9dc <_strtod_l+0x85c>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f7f5 fd8d 	bl	80004d8 <__aeabi_dmul>
 800a9be:	4b08      	ldr	r3, [pc, #32]	@ (800a9e0 <_strtod_l+0x860>)
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	400b      	ands	r3, r1
 800a9c4:	468b      	mov	fp, r1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f47f ae00 	bne.w	800a5cc <_strtod_l+0x44c>
 800a9cc:	2322      	movs	r3, #34	@ 0x22
 800a9ce:	9a05      	ldr	r2, [sp, #20]
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	e5fb      	b.n	800a5cc <_strtod_l+0x44c>
 800a9d4:	0800da98 	.word	0x0800da98
 800a9d8:	fffffc02 	.word	0xfffffc02
 800a9dc:	39500000 	.word	0x39500000
 800a9e0:	7ff00000 	.word	0x7ff00000
 800a9e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a9e8:	d165      	bne.n	800aab6 <_strtod_l+0x936>
 800a9ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9f0:	b35a      	cbz	r2, 800aa4a <_strtod_l+0x8ca>
 800a9f2:	4a99      	ldr	r2, [pc, #612]	@ (800ac58 <_strtod_l+0xad8>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d12b      	bne.n	800aa50 <_strtod_l+0x8d0>
 800a9f8:	9b08      	ldr	r3, [sp, #32]
 800a9fa:	4651      	mov	r1, sl
 800a9fc:	b303      	cbz	r3, 800aa40 <_strtod_l+0x8c0>
 800a9fe:	465a      	mov	r2, fp
 800aa00:	4b96      	ldr	r3, [pc, #600]	@ (800ac5c <_strtod_l+0xadc>)
 800aa02:	4013      	ands	r3, r2
 800aa04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aa08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa0c:	d81b      	bhi.n	800aa46 <_strtod_l+0x8c6>
 800aa0e:	0d1b      	lsrs	r3, r3, #20
 800aa10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa14:	fa02 f303 	lsl.w	r3, r2, r3
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	d119      	bne.n	800aa50 <_strtod_l+0x8d0>
 800aa1c:	4b90      	ldr	r3, [pc, #576]	@ (800ac60 <_strtod_l+0xae0>)
 800aa1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d102      	bne.n	800aa2a <_strtod_l+0x8aa>
 800aa24:	3101      	adds	r1, #1
 800aa26:	f43f adc6 	beq.w	800a5b6 <_strtod_l+0x436>
 800aa2a:	f04f 0a00 	mov.w	sl, #0
 800aa2e:	4b8b      	ldr	r3, [pc, #556]	@ (800ac5c <_strtod_l+0xadc>)
 800aa30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa32:	401a      	ands	r2, r3
 800aa34:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa38:	9b08      	ldr	r3, [sp, #32]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1b9      	bne.n	800a9b2 <_strtod_l+0x832>
 800aa3e:	e5c5      	b.n	800a5cc <_strtod_l+0x44c>
 800aa40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa44:	e7e8      	b.n	800aa18 <_strtod_l+0x898>
 800aa46:	4613      	mov	r3, r2
 800aa48:	e7e6      	b.n	800aa18 <_strtod_l+0x898>
 800aa4a:	ea53 030a 	orrs.w	r3, r3, sl
 800aa4e:	d0a2      	beq.n	800a996 <_strtod_l+0x816>
 800aa50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa52:	b1db      	cbz	r3, 800aa8c <_strtod_l+0x90c>
 800aa54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa56:	4213      	tst	r3, r2
 800aa58:	d0ee      	beq.n	800aa38 <_strtod_l+0x8b8>
 800aa5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa5c:	4650      	mov	r0, sl
 800aa5e:	4659      	mov	r1, fp
 800aa60:	9a08      	ldr	r2, [sp, #32]
 800aa62:	b1bb      	cbz	r3, 800aa94 <_strtod_l+0x914>
 800aa64:	f7ff fb6a 	bl	800a13c <sulp>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa70:	f7f5 fb7c 	bl	800016c <__adddf3>
 800aa74:	4682      	mov	sl, r0
 800aa76:	468b      	mov	fp, r1
 800aa78:	e7de      	b.n	800aa38 <_strtod_l+0x8b8>
 800aa7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aa7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa82:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800aa86:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa8a:	e7d5      	b.n	800aa38 <_strtod_l+0x8b8>
 800aa8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa8e:	ea13 0f0a 	tst.w	r3, sl
 800aa92:	e7e1      	b.n	800aa58 <_strtod_l+0x8d8>
 800aa94:	f7ff fb52 	bl	800a13c <sulp>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaa0:	f7f5 fb62 	bl	8000168 <__aeabi_dsub>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	4682      	mov	sl, r0
 800aaaa:	468b      	mov	fp, r1
 800aaac:	f7f5 ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d0c1      	beq.n	800aa38 <_strtod_l+0x8b8>
 800aab4:	e615      	b.n	800a6e2 <_strtod_l+0x562>
 800aab6:	4641      	mov	r1, r8
 800aab8:	4620      	mov	r0, r4
 800aaba:	f002 facf 	bl	800d05c <__ratio>
 800aabe:	2200      	movs	r2, #0
 800aac0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aac4:	4606      	mov	r6, r0
 800aac6:	460f      	mov	r7, r1
 800aac8:	f7f5 ff82 	bl	80009d0 <__aeabi_dcmple>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d06d      	beq.n	800abac <_strtod_l+0xa2c>
 800aad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d178      	bne.n	800abc8 <_strtod_l+0xa48>
 800aad6:	f1ba 0f00 	cmp.w	sl, #0
 800aada:	d156      	bne.n	800ab8a <_strtod_l+0xa0a>
 800aadc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d158      	bne.n	800ab98 <_strtod_l+0xa18>
 800aae6:	2200      	movs	r2, #0
 800aae8:	4630      	mov	r0, r6
 800aaea:	4639      	mov	r1, r7
 800aaec:	4b5d      	ldr	r3, [pc, #372]	@ (800ac64 <_strtod_l+0xae4>)
 800aaee:	f7f5 ff65 	bl	80009bc <__aeabi_dcmplt>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d157      	bne.n	800aba6 <_strtod_l+0xa26>
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	4639      	mov	r1, r7
 800aafa:	2200      	movs	r2, #0
 800aafc:	4b5a      	ldr	r3, [pc, #360]	@ (800ac68 <_strtod_l+0xae8>)
 800aafe:	f7f5 fceb 	bl	80004d8 <__aeabi_dmul>
 800ab02:	4606      	mov	r6, r0
 800ab04:	460f      	mov	r7, r1
 800ab06:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ab0a:	9606      	str	r6, [sp, #24]
 800ab0c:	9307      	str	r3, [sp, #28]
 800ab0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab12:	4d52      	ldr	r5, [pc, #328]	@ (800ac5c <_strtod_l+0xadc>)
 800ab14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab1a:	401d      	ands	r5, r3
 800ab1c:	4b53      	ldr	r3, [pc, #332]	@ (800ac6c <_strtod_l+0xaec>)
 800ab1e:	429d      	cmp	r5, r3
 800ab20:	f040 80aa 	bne.w	800ac78 <_strtod_l+0xaf8>
 800ab24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab26:	4650      	mov	r0, sl
 800ab28:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	f002 f9d5 	bl	800cedc <__ulp>
 800ab32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab36:	f7f5 fccf 	bl	80004d8 <__aeabi_dmul>
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	465b      	mov	r3, fp
 800ab3e:	f7f5 fb15 	bl	800016c <__adddf3>
 800ab42:	460b      	mov	r3, r1
 800ab44:	4945      	ldr	r1, [pc, #276]	@ (800ac5c <_strtod_l+0xadc>)
 800ab46:	4a4a      	ldr	r2, [pc, #296]	@ (800ac70 <_strtod_l+0xaf0>)
 800ab48:	4019      	ands	r1, r3
 800ab4a:	4291      	cmp	r1, r2
 800ab4c:	4682      	mov	sl, r0
 800ab4e:	d942      	bls.n	800abd6 <_strtod_l+0xa56>
 800ab50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab52:	4b43      	ldr	r3, [pc, #268]	@ (800ac60 <_strtod_l+0xae0>)
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d103      	bne.n	800ab60 <_strtod_l+0x9e0>
 800ab58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	f43f ad2b 	beq.w	800a5b6 <_strtod_l+0x436>
 800ab60:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ab64:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800ac60 <_strtod_l+0xae0>
 800ab68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab6a:	9805      	ldr	r0, [sp, #20]
 800ab6c:	f001 fe84 	bl	800c878 <_Bfree>
 800ab70:	4649      	mov	r1, r9
 800ab72:	9805      	ldr	r0, [sp, #20]
 800ab74:	f001 fe80 	bl	800c878 <_Bfree>
 800ab78:	4641      	mov	r1, r8
 800ab7a:	9805      	ldr	r0, [sp, #20]
 800ab7c:	f001 fe7c 	bl	800c878 <_Bfree>
 800ab80:	4621      	mov	r1, r4
 800ab82:	9805      	ldr	r0, [sp, #20]
 800ab84:	f001 fe78 	bl	800c878 <_Bfree>
 800ab88:	e618      	b.n	800a7bc <_strtod_l+0x63c>
 800ab8a:	f1ba 0f01 	cmp.w	sl, #1
 800ab8e:	d103      	bne.n	800ab98 <_strtod_l+0xa18>
 800ab90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f43f ada5 	beq.w	800a6e2 <_strtod_l+0x562>
 800ab98:	2200      	movs	r2, #0
 800ab9a:	4b36      	ldr	r3, [pc, #216]	@ (800ac74 <_strtod_l+0xaf4>)
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aba2:	4f30      	ldr	r7, [pc, #192]	@ (800ac64 <_strtod_l+0xae4>)
 800aba4:	e7b3      	b.n	800ab0e <_strtod_l+0x98e>
 800aba6:	2600      	movs	r6, #0
 800aba8:	4f2f      	ldr	r7, [pc, #188]	@ (800ac68 <_strtod_l+0xae8>)
 800abaa:	e7ac      	b.n	800ab06 <_strtod_l+0x986>
 800abac:	4630      	mov	r0, r6
 800abae:	4639      	mov	r1, r7
 800abb0:	4b2d      	ldr	r3, [pc, #180]	@ (800ac68 <_strtod_l+0xae8>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	f7f5 fc90 	bl	80004d8 <__aeabi_dmul>
 800abb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abba:	4606      	mov	r6, r0
 800abbc:	460f      	mov	r7, r1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0a1      	beq.n	800ab06 <_strtod_l+0x986>
 800abc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abc6:	e7a2      	b.n	800ab0e <_strtod_l+0x98e>
 800abc8:	2200      	movs	r2, #0
 800abca:	4b26      	ldr	r3, [pc, #152]	@ (800ac64 <_strtod_l+0xae4>)
 800abcc:	4616      	mov	r6, r2
 800abce:	461f      	mov	r7, r3
 800abd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abd4:	e79b      	b.n	800ab0e <_strtod_l+0x98e>
 800abd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800abda:	9b08      	ldr	r3, [sp, #32]
 800abdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1c1      	bne.n	800ab68 <_strtod_l+0x9e8>
 800abe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abe8:	0d1b      	lsrs	r3, r3, #20
 800abea:	051b      	lsls	r3, r3, #20
 800abec:	429d      	cmp	r5, r3
 800abee:	d1bb      	bne.n	800ab68 <_strtod_l+0x9e8>
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 ffb8 	bl	8000b68 <__aeabi_d2lz>
 800abf8:	f7f5 fc40 	bl	800047c <__aeabi_l2d>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4630      	mov	r0, r6
 800ac02:	4639      	mov	r1, r7
 800ac04:	f7f5 fab0 	bl	8000168 <__aeabi_dsub>
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ac10:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ac14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac16:	ea46 060a 	orr.w	r6, r6, sl
 800ac1a:	431e      	orrs	r6, r3
 800ac1c:	d069      	beq.n	800acf2 <_strtod_l+0xb72>
 800ac1e:	a30a      	add	r3, pc, #40	@ (adr r3, 800ac48 <_strtod_l+0xac8>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 feca 	bl	80009bc <__aeabi_dcmplt>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	f47f accf 	bne.w	800a5cc <_strtod_l+0x44c>
 800ac2e:	a308      	add	r3, pc, #32	@ (adr r3, 800ac50 <_strtod_l+0xad0>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac38:	f7f5 fede 	bl	80009f8 <__aeabi_dcmpgt>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d093      	beq.n	800ab68 <_strtod_l+0x9e8>
 800ac40:	e4c4      	b.n	800a5cc <_strtod_l+0x44c>
 800ac42:	bf00      	nop
 800ac44:	f3af 8000 	nop.w
 800ac48:	94a03595 	.word	0x94a03595
 800ac4c:	3fdfffff 	.word	0x3fdfffff
 800ac50:	35afe535 	.word	0x35afe535
 800ac54:	3fe00000 	.word	0x3fe00000
 800ac58:	000fffff 	.word	0x000fffff
 800ac5c:	7ff00000 	.word	0x7ff00000
 800ac60:	7fefffff 	.word	0x7fefffff
 800ac64:	3ff00000 	.word	0x3ff00000
 800ac68:	3fe00000 	.word	0x3fe00000
 800ac6c:	7fe00000 	.word	0x7fe00000
 800ac70:	7c9fffff 	.word	0x7c9fffff
 800ac74:	bff00000 	.word	0xbff00000
 800ac78:	9b08      	ldr	r3, [sp, #32]
 800ac7a:	b323      	cbz	r3, 800acc6 <_strtod_l+0xb46>
 800ac7c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ac80:	d821      	bhi.n	800acc6 <_strtod_l+0xb46>
 800ac82:	a327      	add	r3, pc, #156	@ (adr r3, 800ad20 <_strtod_l+0xba0>)
 800ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 fea0 	bl	80009d0 <__aeabi_dcmple>
 800ac90:	b1a0      	cbz	r0, 800acbc <_strtod_l+0xb3c>
 800ac92:	4639      	mov	r1, r7
 800ac94:	4630      	mov	r0, r6
 800ac96:	f7f5 fef7 	bl	8000a88 <__aeabi_d2uiz>
 800ac9a:	2801      	cmp	r0, #1
 800ac9c:	bf38      	it	cc
 800ac9e:	2001      	movcc	r0, #1
 800aca0:	f7f5 fba0 	bl	80003e4 <__aeabi_ui2d>
 800aca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aca6:	4606      	mov	r6, r0
 800aca8:	460f      	mov	r7, r1
 800acaa:	b9fb      	cbnz	r3, 800acec <_strtod_l+0xb6c>
 800acac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acb0:	9014      	str	r0, [sp, #80]	@ 0x50
 800acb2:	9315      	str	r3, [sp, #84]	@ 0x54
 800acb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800acb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800acbc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800acbe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800acc2:	1b5b      	subs	r3, r3, r5
 800acc4:	9311      	str	r3, [sp, #68]	@ 0x44
 800acc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800acce:	f002 f905 	bl	800cedc <__ulp>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4650      	mov	r0, sl
 800acd8:	4659      	mov	r1, fp
 800acda:	f7f5 fbfd 	bl	80004d8 <__aeabi_dmul>
 800acde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ace2:	f7f5 fa43 	bl	800016c <__adddf3>
 800ace6:	4682      	mov	sl, r0
 800ace8:	468b      	mov	fp, r1
 800acea:	e776      	b.n	800abda <_strtod_l+0xa5a>
 800acec:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800acf0:	e7e0      	b.n	800acb4 <_strtod_l+0xb34>
 800acf2:	a30d      	add	r3, pc, #52	@ (adr r3, 800ad28 <_strtod_l+0xba8>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fe60 	bl	80009bc <__aeabi_dcmplt>
 800acfc:	e79e      	b.n	800ac3c <_strtod_l+0xabc>
 800acfe:	2300      	movs	r3, #0
 800ad00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad04:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	f7ff ba77 	b.w	800a1fa <_strtod_l+0x7a>
 800ad0c:	2a65      	cmp	r2, #101	@ 0x65
 800ad0e:	f43f ab6e 	beq.w	800a3ee <_strtod_l+0x26e>
 800ad12:	2a45      	cmp	r2, #69	@ 0x45
 800ad14:	f43f ab6b 	beq.w	800a3ee <_strtod_l+0x26e>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	f7ff bba6 	b.w	800a46a <_strtod_l+0x2ea>
 800ad1e:	bf00      	nop
 800ad20:	ffc00000 	.word	0xffc00000
 800ad24:	41dfffff 	.word	0x41dfffff
 800ad28:	94a03595 	.word	0x94a03595
 800ad2c:	3fcfffff 	.word	0x3fcfffff

0800ad30 <_strtod_r>:
 800ad30:	4b01      	ldr	r3, [pc, #4]	@ (800ad38 <_strtod_r+0x8>)
 800ad32:	f7ff ba25 	b.w	800a180 <_strtod_l>
 800ad36:	bf00      	nop
 800ad38:	20000188 	.word	0x20000188

0800ad3c <_strtol_l.constprop.0>:
 800ad3c:	2b24      	cmp	r3, #36	@ 0x24
 800ad3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad42:	4686      	mov	lr, r0
 800ad44:	4690      	mov	r8, r2
 800ad46:	d801      	bhi.n	800ad4c <_strtol_l.constprop.0+0x10>
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d106      	bne.n	800ad5a <_strtol_l.constprop.0+0x1e>
 800ad4c:	f000 f8ae 	bl	800aeac <__errno>
 800ad50:	2316      	movs	r3, #22
 800ad52:	6003      	str	r3, [r0, #0]
 800ad54:	2000      	movs	r0, #0
 800ad56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5a:	460d      	mov	r5, r1
 800ad5c:	4833      	ldr	r0, [pc, #204]	@ (800ae2c <_strtol_l.constprop.0+0xf0>)
 800ad5e:	462a      	mov	r2, r5
 800ad60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad64:	5d06      	ldrb	r6, [r0, r4]
 800ad66:	f016 0608 	ands.w	r6, r6, #8
 800ad6a:	d1f8      	bne.n	800ad5e <_strtol_l.constprop.0+0x22>
 800ad6c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ad6e:	d12d      	bne.n	800adcc <_strtol_l.constprop.0+0x90>
 800ad70:	2601      	movs	r6, #1
 800ad72:	782c      	ldrb	r4, [r5, #0]
 800ad74:	1c95      	adds	r5, r2, #2
 800ad76:	f033 0210 	bics.w	r2, r3, #16
 800ad7a:	d109      	bne.n	800ad90 <_strtol_l.constprop.0+0x54>
 800ad7c:	2c30      	cmp	r4, #48	@ 0x30
 800ad7e:	d12a      	bne.n	800add6 <_strtol_l.constprop.0+0x9a>
 800ad80:	782a      	ldrb	r2, [r5, #0]
 800ad82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad86:	2a58      	cmp	r2, #88	@ 0x58
 800ad88:	d125      	bne.n	800add6 <_strtol_l.constprop.0+0x9a>
 800ad8a:	2310      	movs	r3, #16
 800ad8c:	786c      	ldrb	r4, [r5, #1]
 800ad8e:	3502      	adds	r5, #2
 800ad90:	2200      	movs	r2, #0
 800ad92:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ad96:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ad9a:	fbbc f9f3 	udiv	r9, ip, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	fb03 ca19 	mls	sl, r3, r9, ip
 800ada4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ada8:	2f09      	cmp	r7, #9
 800adaa:	d81b      	bhi.n	800ade4 <_strtol_l.constprop.0+0xa8>
 800adac:	463c      	mov	r4, r7
 800adae:	42a3      	cmp	r3, r4
 800adb0:	dd27      	ble.n	800ae02 <_strtol_l.constprop.0+0xc6>
 800adb2:	1c57      	adds	r7, r2, #1
 800adb4:	d007      	beq.n	800adc6 <_strtol_l.constprop.0+0x8a>
 800adb6:	4581      	cmp	r9, r0
 800adb8:	d320      	bcc.n	800adfc <_strtol_l.constprop.0+0xc0>
 800adba:	d101      	bne.n	800adc0 <_strtol_l.constprop.0+0x84>
 800adbc:	45a2      	cmp	sl, r4
 800adbe:	db1d      	blt.n	800adfc <_strtol_l.constprop.0+0xc0>
 800adc0:	2201      	movs	r2, #1
 800adc2:	fb00 4003 	mla	r0, r0, r3, r4
 800adc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adca:	e7eb      	b.n	800ada4 <_strtol_l.constprop.0+0x68>
 800adcc:	2c2b      	cmp	r4, #43	@ 0x2b
 800adce:	bf04      	itt	eq
 800add0:	782c      	ldrbeq	r4, [r5, #0]
 800add2:	1c95      	addeq	r5, r2, #2
 800add4:	e7cf      	b.n	800ad76 <_strtol_l.constprop.0+0x3a>
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1da      	bne.n	800ad90 <_strtol_l.constprop.0+0x54>
 800adda:	2c30      	cmp	r4, #48	@ 0x30
 800addc:	bf0c      	ite	eq
 800adde:	2308      	moveq	r3, #8
 800ade0:	230a      	movne	r3, #10
 800ade2:	e7d5      	b.n	800ad90 <_strtol_l.constprop.0+0x54>
 800ade4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ade8:	2f19      	cmp	r7, #25
 800adea:	d801      	bhi.n	800adf0 <_strtol_l.constprop.0+0xb4>
 800adec:	3c37      	subs	r4, #55	@ 0x37
 800adee:	e7de      	b.n	800adae <_strtol_l.constprop.0+0x72>
 800adf0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800adf4:	2f19      	cmp	r7, #25
 800adf6:	d804      	bhi.n	800ae02 <_strtol_l.constprop.0+0xc6>
 800adf8:	3c57      	subs	r4, #87	@ 0x57
 800adfa:	e7d8      	b.n	800adae <_strtol_l.constprop.0+0x72>
 800adfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae00:	e7e1      	b.n	800adc6 <_strtol_l.constprop.0+0x8a>
 800ae02:	1c53      	adds	r3, r2, #1
 800ae04:	d108      	bne.n	800ae18 <_strtol_l.constprop.0+0xdc>
 800ae06:	2322      	movs	r3, #34	@ 0x22
 800ae08:	4660      	mov	r0, ip
 800ae0a:	f8ce 3000 	str.w	r3, [lr]
 800ae0e:	f1b8 0f00 	cmp.w	r8, #0
 800ae12:	d0a0      	beq.n	800ad56 <_strtol_l.constprop.0+0x1a>
 800ae14:	1e69      	subs	r1, r5, #1
 800ae16:	e006      	b.n	800ae26 <_strtol_l.constprop.0+0xea>
 800ae18:	b106      	cbz	r6, 800ae1c <_strtol_l.constprop.0+0xe0>
 800ae1a:	4240      	negs	r0, r0
 800ae1c:	f1b8 0f00 	cmp.w	r8, #0
 800ae20:	d099      	beq.n	800ad56 <_strtol_l.constprop.0+0x1a>
 800ae22:	2a00      	cmp	r2, #0
 800ae24:	d1f6      	bne.n	800ae14 <_strtol_l.constprop.0+0xd8>
 800ae26:	f8c8 1000 	str.w	r1, [r8]
 800ae2a:	e794      	b.n	800ad56 <_strtol_l.constprop.0+0x1a>
 800ae2c:	0800dac9 	.word	0x0800dac9

0800ae30 <_strtol_r>:
 800ae30:	f7ff bf84 	b.w	800ad3c <_strtol_l.constprop.0>

0800ae34 <_fwalk_sglue>:
 800ae34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae38:	4607      	mov	r7, r0
 800ae3a:	4688      	mov	r8, r1
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	2600      	movs	r6, #0
 800ae40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae44:	f1b9 0901 	subs.w	r9, r9, #1
 800ae48:	d505      	bpl.n	800ae56 <_fwalk_sglue+0x22>
 800ae4a:	6824      	ldr	r4, [r4, #0]
 800ae4c:	2c00      	cmp	r4, #0
 800ae4e:	d1f7      	bne.n	800ae40 <_fwalk_sglue+0xc>
 800ae50:	4630      	mov	r0, r6
 800ae52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae56:	89ab      	ldrh	r3, [r5, #12]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d907      	bls.n	800ae6c <_fwalk_sglue+0x38>
 800ae5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae60:	3301      	adds	r3, #1
 800ae62:	d003      	beq.n	800ae6c <_fwalk_sglue+0x38>
 800ae64:	4629      	mov	r1, r5
 800ae66:	4638      	mov	r0, r7
 800ae68:	47c0      	blx	r8
 800ae6a:	4306      	orrs	r6, r0
 800ae6c:	3568      	adds	r5, #104	@ 0x68
 800ae6e:	e7e9      	b.n	800ae44 <_fwalk_sglue+0x10>

0800ae70 <strncmp>:
 800ae70:	b510      	push	{r4, lr}
 800ae72:	b16a      	cbz	r2, 800ae90 <strncmp+0x20>
 800ae74:	3901      	subs	r1, #1
 800ae76:	1884      	adds	r4, r0, r2
 800ae78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d103      	bne.n	800ae8c <strncmp+0x1c>
 800ae84:	42a0      	cmp	r0, r4
 800ae86:	d001      	beq.n	800ae8c <strncmp+0x1c>
 800ae88:	2a00      	cmp	r2, #0
 800ae8a:	d1f5      	bne.n	800ae78 <strncmp+0x8>
 800ae8c:	1ad0      	subs	r0, r2, r3
 800ae8e:	bd10      	pop	{r4, pc}
 800ae90:	4610      	mov	r0, r2
 800ae92:	e7fc      	b.n	800ae8e <strncmp+0x1e>

0800ae94 <memset>:
 800ae94:	4603      	mov	r3, r0
 800ae96:	4402      	add	r2, r0
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d100      	bne.n	800ae9e <memset+0xa>
 800ae9c:	4770      	bx	lr
 800ae9e:	f803 1b01 	strb.w	r1, [r3], #1
 800aea2:	e7f9      	b.n	800ae98 <memset+0x4>

0800aea4 <_localeconv_r>:
 800aea4:	4800      	ldr	r0, [pc, #0]	@ (800aea8 <_localeconv_r+0x4>)
 800aea6:	4770      	bx	lr
 800aea8:	20000278 	.word	0x20000278

0800aeac <__errno>:
 800aeac:	4b01      	ldr	r3, [pc, #4]	@ (800aeb4 <__errno+0x8>)
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	200002f4 	.word	0x200002f4

0800aeb8 <__libc_init_array>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	2600      	movs	r6, #0
 800aebc:	4d0c      	ldr	r5, [pc, #48]	@ (800aef0 <__libc_init_array+0x38>)
 800aebe:	4c0d      	ldr	r4, [pc, #52]	@ (800aef4 <__libc_init_array+0x3c>)
 800aec0:	1b64      	subs	r4, r4, r5
 800aec2:	10a4      	asrs	r4, r4, #2
 800aec4:	42a6      	cmp	r6, r4
 800aec6:	d109      	bne.n	800aedc <__libc_init_array+0x24>
 800aec8:	f002 fd60 	bl	800d98c <_init>
 800aecc:	2600      	movs	r6, #0
 800aece:	4d0a      	ldr	r5, [pc, #40]	@ (800aef8 <__libc_init_array+0x40>)
 800aed0:	4c0a      	ldr	r4, [pc, #40]	@ (800aefc <__libc_init_array+0x44>)
 800aed2:	1b64      	subs	r4, r4, r5
 800aed4:	10a4      	asrs	r4, r4, #2
 800aed6:	42a6      	cmp	r6, r4
 800aed8:	d105      	bne.n	800aee6 <__libc_init_array+0x2e>
 800aeda:	bd70      	pop	{r4, r5, r6, pc}
 800aedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee0:	4798      	blx	r3
 800aee2:	3601      	adds	r6, #1
 800aee4:	e7ee      	b.n	800aec4 <__libc_init_array+0xc>
 800aee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeea:	4798      	blx	r3
 800aeec:	3601      	adds	r6, #1
 800aeee:	e7f2      	b.n	800aed6 <__libc_init_array+0x1e>
 800aef0:	0800de64 	.word	0x0800de64
 800aef4:	0800de64 	.word	0x0800de64
 800aef8:	0800de64 	.word	0x0800de64
 800aefc:	0800de68 	.word	0x0800de68

0800af00 <__retarget_lock_init_recursive>:
 800af00:	4770      	bx	lr

0800af02 <__retarget_lock_acquire_recursive>:
 800af02:	4770      	bx	lr

0800af04 <__retarget_lock_release_recursive>:
 800af04:	4770      	bx	lr

0800af06 <memchr>:
 800af06:	4603      	mov	r3, r0
 800af08:	b510      	push	{r4, lr}
 800af0a:	b2c9      	uxtb	r1, r1
 800af0c:	4402      	add	r2, r0
 800af0e:	4293      	cmp	r3, r2
 800af10:	4618      	mov	r0, r3
 800af12:	d101      	bne.n	800af18 <memchr+0x12>
 800af14:	2000      	movs	r0, #0
 800af16:	e003      	b.n	800af20 <memchr+0x1a>
 800af18:	7804      	ldrb	r4, [r0, #0]
 800af1a:	3301      	adds	r3, #1
 800af1c:	428c      	cmp	r4, r1
 800af1e:	d1f6      	bne.n	800af0e <memchr+0x8>
 800af20:	bd10      	pop	{r4, pc}

0800af22 <memcpy>:
 800af22:	440a      	add	r2, r1
 800af24:	4291      	cmp	r1, r2
 800af26:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800af2a:	d100      	bne.n	800af2e <memcpy+0xc>
 800af2c:	4770      	bx	lr
 800af2e:	b510      	push	{r4, lr}
 800af30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af34:	4291      	cmp	r1, r2
 800af36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af3a:	d1f9      	bne.n	800af30 <memcpy+0xe>
 800af3c:	bd10      	pop	{r4, pc}
	...

0800af40 <nan>:
 800af40:	2000      	movs	r0, #0
 800af42:	4901      	ldr	r1, [pc, #4]	@ (800af48 <nan+0x8>)
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	7ff80000 	.word	0x7ff80000

0800af4c <nanf>:
 800af4c:	4800      	ldr	r0, [pc, #0]	@ (800af50 <nanf+0x4>)
 800af4e:	4770      	bx	lr
 800af50:	7fc00000 	.word	0x7fc00000

0800af54 <quorem>:
 800af54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	6903      	ldr	r3, [r0, #16]
 800af5a:	690c      	ldr	r4, [r1, #16]
 800af5c:	4607      	mov	r7, r0
 800af5e:	42a3      	cmp	r3, r4
 800af60:	db7e      	blt.n	800b060 <quorem+0x10c>
 800af62:	3c01      	subs	r4, #1
 800af64:	00a3      	lsls	r3, r4, #2
 800af66:	f100 0514 	add.w	r5, r0, #20
 800af6a:	f101 0814 	add.w	r8, r1, #20
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af7e:	3301      	adds	r3, #1
 800af80:	429a      	cmp	r2, r3
 800af82:	fbb2 f6f3 	udiv	r6, r2, r3
 800af86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af8a:	d32e      	bcc.n	800afea <quorem+0x96>
 800af8c:	f04f 0a00 	mov.w	sl, #0
 800af90:	46c4      	mov	ip, r8
 800af92:	46ae      	mov	lr, r5
 800af94:	46d3      	mov	fp, sl
 800af96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af9a:	b298      	uxth	r0, r3
 800af9c:	fb06 a000 	mla	r0, r6, r0, sl
 800afa0:	0c1b      	lsrs	r3, r3, #16
 800afa2:	0c02      	lsrs	r2, r0, #16
 800afa4:	fb06 2303 	mla	r3, r6, r3, r2
 800afa8:	f8de 2000 	ldr.w	r2, [lr]
 800afac:	b280      	uxth	r0, r0
 800afae:	b292      	uxth	r2, r2
 800afb0:	1a12      	subs	r2, r2, r0
 800afb2:	445a      	add	r2, fp
 800afb4:	f8de 0000 	ldr.w	r0, [lr]
 800afb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800afc2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800afc6:	b292      	uxth	r2, r2
 800afc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800afcc:	45e1      	cmp	r9, ip
 800afce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800afd2:	f84e 2b04 	str.w	r2, [lr], #4
 800afd6:	d2de      	bcs.n	800af96 <quorem+0x42>
 800afd8:	9b00      	ldr	r3, [sp, #0]
 800afda:	58eb      	ldr	r3, [r5, r3]
 800afdc:	b92b      	cbnz	r3, 800afea <quorem+0x96>
 800afde:	9b01      	ldr	r3, [sp, #4]
 800afe0:	3b04      	subs	r3, #4
 800afe2:	429d      	cmp	r5, r3
 800afe4:	461a      	mov	r2, r3
 800afe6:	d32f      	bcc.n	800b048 <quorem+0xf4>
 800afe8:	613c      	str	r4, [r7, #16]
 800afea:	4638      	mov	r0, r7
 800afec:	f001 fec6 	bl	800cd7c <__mcmp>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	db25      	blt.n	800b040 <quorem+0xec>
 800aff4:	4629      	mov	r1, r5
 800aff6:	2000      	movs	r0, #0
 800aff8:	f858 2b04 	ldr.w	r2, [r8], #4
 800affc:	f8d1 c000 	ldr.w	ip, [r1]
 800b000:	fa1f fe82 	uxth.w	lr, r2
 800b004:	fa1f f38c 	uxth.w	r3, ip
 800b008:	eba3 030e 	sub.w	r3, r3, lr
 800b00c:	4403      	add	r3, r0
 800b00e:	0c12      	lsrs	r2, r2, #16
 800b010:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b014:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b018:	b29b      	uxth	r3, r3
 800b01a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b01e:	45c1      	cmp	r9, r8
 800b020:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b024:	f841 3b04 	str.w	r3, [r1], #4
 800b028:	d2e6      	bcs.n	800aff8 <quorem+0xa4>
 800b02a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b02e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b032:	b922      	cbnz	r2, 800b03e <quorem+0xea>
 800b034:	3b04      	subs	r3, #4
 800b036:	429d      	cmp	r5, r3
 800b038:	461a      	mov	r2, r3
 800b03a:	d30b      	bcc.n	800b054 <quorem+0x100>
 800b03c:	613c      	str	r4, [r7, #16]
 800b03e:	3601      	adds	r6, #1
 800b040:	4630      	mov	r0, r6
 800b042:	b003      	add	sp, #12
 800b044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	3b04      	subs	r3, #4
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	d1cb      	bne.n	800afe8 <quorem+0x94>
 800b050:	3c01      	subs	r4, #1
 800b052:	e7c6      	b.n	800afe2 <quorem+0x8e>
 800b054:	6812      	ldr	r2, [r2, #0]
 800b056:	3b04      	subs	r3, #4
 800b058:	2a00      	cmp	r2, #0
 800b05a:	d1ef      	bne.n	800b03c <quorem+0xe8>
 800b05c:	3c01      	subs	r4, #1
 800b05e:	e7ea      	b.n	800b036 <quorem+0xe2>
 800b060:	2000      	movs	r0, #0
 800b062:	e7ee      	b.n	800b042 <quorem+0xee>
 800b064:	0000      	movs	r0, r0
	...

0800b068 <_dtoa_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	4614      	mov	r4, r2
 800b06e:	461d      	mov	r5, r3
 800b070:	69c7      	ldr	r7, [r0, #28]
 800b072:	b097      	sub	sp, #92	@ 0x5c
 800b074:	4683      	mov	fp, r0
 800b076:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b07a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b07c:	b97f      	cbnz	r7, 800b09e <_dtoa_r+0x36>
 800b07e:	2010      	movs	r0, #16
 800b080:	f001 fa4a 	bl	800c518 <malloc>
 800b084:	4602      	mov	r2, r0
 800b086:	f8cb 001c 	str.w	r0, [fp, #28]
 800b08a:	b920      	cbnz	r0, 800b096 <_dtoa_r+0x2e>
 800b08c:	21ef      	movs	r1, #239	@ 0xef
 800b08e:	4ba8      	ldr	r3, [pc, #672]	@ (800b330 <_dtoa_r+0x2c8>)
 800b090:	48a8      	ldr	r0, [pc, #672]	@ (800b334 <_dtoa_r+0x2cc>)
 800b092:	f002 f945 	bl	800d320 <__assert_func>
 800b096:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b09a:	6007      	str	r7, [r0, #0]
 800b09c:	60c7      	str	r7, [r0, #12]
 800b09e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0a2:	6819      	ldr	r1, [r3, #0]
 800b0a4:	b159      	cbz	r1, 800b0be <_dtoa_r+0x56>
 800b0a6:	685a      	ldr	r2, [r3, #4]
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	4093      	lsls	r3, r2
 800b0ac:	604a      	str	r2, [r1, #4]
 800b0ae:	608b      	str	r3, [r1, #8]
 800b0b0:	4658      	mov	r0, fp
 800b0b2:	f001 fbe1 	bl	800c878 <_Bfree>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	1e2b      	subs	r3, r5, #0
 800b0c0:	bfaf      	iteee	ge
 800b0c2:	2300      	movge	r3, #0
 800b0c4:	2201      	movlt	r2, #1
 800b0c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0ca:	9303      	strlt	r3, [sp, #12]
 800b0cc:	bfa8      	it	ge
 800b0ce:	6033      	strge	r3, [r6, #0]
 800b0d0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b0d4:	4b98      	ldr	r3, [pc, #608]	@ (800b338 <_dtoa_r+0x2d0>)
 800b0d6:	bfb8      	it	lt
 800b0d8:	6032      	strlt	r2, [r6, #0]
 800b0da:	ea33 0308 	bics.w	r3, r3, r8
 800b0de:	d112      	bne.n	800b106 <_dtoa_r+0x9e>
 800b0e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b0e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b0ec:	4323      	orrs	r3, r4
 800b0ee:	f000 8550 	beq.w	800bb92 <_dtoa_r+0xb2a>
 800b0f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b0f4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b33c <_dtoa_r+0x2d4>
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 8552 	beq.w	800bba2 <_dtoa_r+0xb3a>
 800b0fe:	f10a 0303 	add.w	r3, sl, #3
 800b102:	f000 bd4c 	b.w	800bb9e <_dtoa_r+0xb36>
 800b106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b10a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b10e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b112:	2200      	movs	r2, #0
 800b114:	2300      	movs	r3, #0
 800b116:	f7f5 fc47 	bl	80009a8 <__aeabi_dcmpeq>
 800b11a:	4607      	mov	r7, r0
 800b11c:	b158      	cbz	r0, 800b136 <_dtoa_r+0xce>
 800b11e:	2301      	movs	r3, #1
 800b120:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b126:	b113      	cbz	r3, 800b12e <_dtoa_r+0xc6>
 800b128:	4b85      	ldr	r3, [pc, #532]	@ (800b340 <_dtoa_r+0x2d8>)
 800b12a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b344 <_dtoa_r+0x2dc>
 800b132:	f000 bd36 	b.w	800bba2 <_dtoa_r+0xb3a>
 800b136:	ab14      	add	r3, sp, #80	@ 0x50
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	ab15      	add	r3, sp, #84	@ 0x54
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	4658      	mov	r0, fp
 800b140:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b144:	f001 ff32 	bl	800cfac <__d2b>
 800b148:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b14c:	4681      	mov	r9, r0
 800b14e:	2e00      	cmp	r6, #0
 800b150:	d077      	beq.n	800b242 <_dtoa_r+0x1da>
 800b152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b158:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b160:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b164:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b168:	9712      	str	r7, [sp, #72]	@ 0x48
 800b16a:	4619      	mov	r1, r3
 800b16c:	2200      	movs	r2, #0
 800b16e:	4b76      	ldr	r3, [pc, #472]	@ (800b348 <_dtoa_r+0x2e0>)
 800b170:	f7f4 fffa 	bl	8000168 <__aeabi_dsub>
 800b174:	a368      	add	r3, pc, #416	@ (adr r3, 800b318 <_dtoa_r+0x2b0>)
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	f7f5 f9ad 	bl	80004d8 <__aeabi_dmul>
 800b17e:	a368      	add	r3, pc, #416	@ (adr r3, 800b320 <_dtoa_r+0x2b8>)
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f7f4 fff2 	bl	800016c <__adddf3>
 800b188:	4604      	mov	r4, r0
 800b18a:	4630      	mov	r0, r6
 800b18c:	460d      	mov	r5, r1
 800b18e:	f7f5 f939 	bl	8000404 <__aeabi_i2d>
 800b192:	a365      	add	r3, pc, #404	@ (adr r3, 800b328 <_dtoa_r+0x2c0>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f7f5 f99e 	bl	80004d8 <__aeabi_dmul>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	f7f4 ffe2 	bl	800016c <__adddf3>
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	460d      	mov	r5, r1
 800b1ac:	f7f5 fc44 	bl	8000a38 <__aeabi_d2iz>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	f7f5 fbff 	bl	80009bc <__aeabi_dcmplt>
 800b1be:	b140      	cbz	r0, 800b1d2 <_dtoa_r+0x16a>
 800b1c0:	4638      	mov	r0, r7
 800b1c2:	f7f5 f91f 	bl	8000404 <__aeabi_i2d>
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	462b      	mov	r3, r5
 800b1ca:	f7f5 fbed 	bl	80009a8 <__aeabi_dcmpeq>
 800b1ce:	b900      	cbnz	r0, 800b1d2 <_dtoa_r+0x16a>
 800b1d0:	3f01      	subs	r7, #1
 800b1d2:	2f16      	cmp	r7, #22
 800b1d4:	d853      	bhi.n	800b27e <_dtoa_r+0x216>
 800b1d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1da:	4b5c      	ldr	r3, [pc, #368]	@ (800b34c <_dtoa_r+0x2e4>)
 800b1dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f7f5 fbea 	bl	80009bc <__aeabi_dcmplt>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d04a      	beq.n	800b282 <_dtoa_r+0x21a>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	3f01      	subs	r7, #1
 800b1f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b1f4:	1b9b      	subs	r3, r3, r6
 800b1f6:	1e5a      	subs	r2, r3, #1
 800b1f8:	bf46      	itte	mi
 800b1fa:	f1c3 0801 	rsbmi	r8, r3, #1
 800b1fe:	2300      	movmi	r3, #0
 800b200:	f04f 0800 	movpl.w	r8, #0
 800b204:	9209      	str	r2, [sp, #36]	@ 0x24
 800b206:	bf48      	it	mi
 800b208:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b20a:	2f00      	cmp	r7, #0
 800b20c:	db3b      	blt.n	800b286 <_dtoa_r+0x21e>
 800b20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b210:	970e      	str	r7, [sp, #56]	@ 0x38
 800b212:	443b      	add	r3, r7
 800b214:	9309      	str	r3, [sp, #36]	@ 0x24
 800b216:	2300      	movs	r3, #0
 800b218:	930a      	str	r3, [sp, #40]	@ 0x28
 800b21a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b21c:	2b09      	cmp	r3, #9
 800b21e:	d866      	bhi.n	800b2ee <_dtoa_r+0x286>
 800b220:	2b05      	cmp	r3, #5
 800b222:	bfc4      	itt	gt
 800b224:	3b04      	subgt	r3, #4
 800b226:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b228:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b22a:	bfc8      	it	gt
 800b22c:	2400      	movgt	r4, #0
 800b22e:	f1a3 0302 	sub.w	r3, r3, #2
 800b232:	bfd8      	it	le
 800b234:	2401      	movle	r4, #1
 800b236:	2b03      	cmp	r3, #3
 800b238:	d864      	bhi.n	800b304 <_dtoa_r+0x29c>
 800b23a:	e8df f003 	tbb	[pc, r3]
 800b23e:	382b      	.short	0x382b
 800b240:	5636      	.short	0x5636
 800b242:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b246:	441e      	add	r6, r3
 800b248:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	bfc1      	itttt	gt
 800b250:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b254:	fa08 f803 	lslgt.w	r8, r8, r3
 800b258:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b25c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b260:	bfd6      	itet	le
 800b262:	f1c3 0320 	rsble	r3, r3, #32
 800b266:	ea48 0003 	orrgt.w	r0, r8, r3
 800b26a:	fa04 f003 	lslle.w	r0, r4, r3
 800b26e:	f7f5 f8b9 	bl	80003e4 <__aeabi_ui2d>
 800b272:	2201      	movs	r2, #1
 800b274:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b278:	3e01      	subs	r6, #1
 800b27a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b27c:	e775      	b.n	800b16a <_dtoa_r+0x102>
 800b27e:	2301      	movs	r3, #1
 800b280:	e7b6      	b.n	800b1f0 <_dtoa_r+0x188>
 800b282:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b284:	e7b5      	b.n	800b1f2 <_dtoa_r+0x18a>
 800b286:	427b      	negs	r3, r7
 800b288:	930a      	str	r3, [sp, #40]	@ 0x28
 800b28a:	2300      	movs	r3, #0
 800b28c:	eba8 0807 	sub.w	r8, r8, r7
 800b290:	930e      	str	r3, [sp, #56]	@ 0x38
 800b292:	e7c2      	b.n	800b21a <_dtoa_r+0x1b2>
 800b294:	2300      	movs	r3, #0
 800b296:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b298:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	dc35      	bgt.n	800b30a <_dtoa_r+0x2a2>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b2a6:	9221      	str	r2, [sp, #132]	@ 0x84
 800b2a8:	e00b      	b.n	800b2c2 <_dtoa_r+0x25a>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e7f3      	b.n	800b296 <_dtoa_r+0x22e>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2b4:	18fb      	adds	r3, r7, r3
 800b2b6:	9308      	str	r3, [sp, #32]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	9307      	str	r3, [sp, #28]
 800b2be:	bfb8      	it	lt
 800b2c0:	2301      	movlt	r3, #1
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b2ca:	f102 0514 	add.w	r5, r2, #20
 800b2ce:	429d      	cmp	r5, r3
 800b2d0:	d91f      	bls.n	800b312 <_dtoa_r+0x2aa>
 800b2d2:	6041      	str	r1, [r0, #4]
 800b2d4:	4658      	mov	r0, fp
 800b2d6:	f001 fa8f 	bl	800c7f8 <_Balloc>
 800b2da:	4682      	mov	sl, r0
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d139      	bne.n	800b354 <_dtoa_r+0x2ec>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b2e6:	4b1a      	ldr	r3, [pc, #104]	@ (800b350 <_dtoa_r+0x2e8>)
 800b2e8:	e6d2      	b.n	800b090 <_dtoa_r+0x28>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e7e0      	b.n	800b2b0 <_dtoa_r+0x248>
 800b2ee:	2401      	movs	r4, #1
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b2f4:	9320      	str	r3, [sp, #128]	@ 0x80
 800b2f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b300:	2312      	movs	r3, #18
 800b302:	e7d0      	b.n	800b2a6 <_dtoa_r+0x23e>
 800b304:	2301      	movs	r3, #1
 800b306:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b308:	e7f5      	b.n	800b2f6 <_dtoa_r+0x28e>
 800b30a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b30c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b310:	e7d7      	b.n	800b2c2 <_dtoa_r+0x25a>
 800b312:	3101      	adds	r1, #1
 800b314:	0052      	lsls	r2, r2, #1
 800b316:	e7d8      	b.n	800b2ca <_dtoa_r+0x262>
 800b318:	636f4361 	.word	0x636f4361
 800b31c:	3fd287a7 	.word	0x3fd287a7
 800b320:	8b60c8b3 	.word	0x8b60c8b3
 800b324:	3fc68a28 	.word	0x3fc68a28
 800b328:	509f79fb 	.word	0x509f79fb
 800b32c:	3fd34413 	.word	0x3fd34413
 800b330:	0800dbd6 	.word	0x0800dbd6
 800b334:	0800dbed 	.word	0x0800dbed
 800b338:	7ff00000 	.word	0x7ff00000
 800b33c:	0800dbd2 	.word	0x0800dbd2
 800b340:	0800da43 	.word	0x0800da43
 800b344:	0800da42 	.word	0x0800da42
 800b348:	3ff80000 	.word	0x3ff80000
 800b34c:	0800dd58 	.word	0x0800dd58
 800b350:	0800dc45 	.word	0x0800dc45
 800b354:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b358:	6018      	str	r0, [r3, #0]
 800b35a:	9b07      	ldr	r3, [sp, #28]
 800b35c:	2b0e      	cmp	r3, #14
 800b35e:	f200 80a4 	bhi.w	800b4aa <_dtoa_r+0x442>
 800b362:	2c00      	cmp	r4, #0
 800b364:	f000 80a1 	beq.w	800b4aa <_dtoa_r+0x442>
 800b368:	2f00      	cmp	r7, #0
 800b36a:	dd33      	ble.n	800b3d4 <_dtoa_r+0x36c>
 800b36c:	4b86      	ldr	r3, [pc, #536]	@ (800b588 <_dtoa_r+0x520>)
 800b36e:	f007 020f 	and.w	r2, r7, #15
 800b372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b376:	05f8      	lsls	r0, r7, #23
 800b378:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b37c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b380:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b384:	d516      	bpl.n	800b3b4 <_dtoa_r+0x34c>
 800b386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b38a:	4b80      	ldr	r3, [pc, #512]	@ (800b58c <_dtoa_r+0x524>)
 800b38c:	2603      	movs	r6, #3
 800b38e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b392:	f7f5 f9cb 	bl	800072c <__aeabi_ddiv>
 800b396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39a:	f004 040f 	and.w	r4, r4, #15
 800b39e:	4d7b      	ldr	r5, [pc, #492]	@ (800b58c <_dtoa_r+0x524>)
 800b3a0:	b954      	cbnz	r4, 800b3b8 <_dtoa_r+0x350>
 800b3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3aa:	f7f5 f9bf 	bl	800072c <__aeabi_ddiv>
 800b3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3b2:	e028      	b.n	800b406 <_dtoa_r+0x39e>
 800b3b4:	2602      	movs	r6, #2
 800b3b6:	e7f2      	b.n	800b39e <_dtoa_r+0x336>
 800b3b8:	07e1      	lsls	r1, r4, #31
 800b3ba:	d508      	bpl.n	800b3ce <_dtoa_r+0x366>
 800b3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3c4:	f7f5 f888 	bl	80004d8 <__aeabi_dmul>
 800b3c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3cc:	3601      	adds	r6, #1
 800b3ce:	1064      	asrs	r4, r4, #1
 800b3d0:	3508      	adds	r5, #8
 800b3d2:	e7e5      	b.n	800b3a0 <_dtoa_r+0x338>
 800b3d4:	f000 80d2 	beq.w	800b57c <_dtoa_r+0x514>
 800b3d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3dc:	427c      	negs	r4, r7
 800b3de:	4b6a      	ldr	r3, [pc, #424]	@ (800b588 <_dtoa_r+0x520>)
 800b3e0:	f004 020f 	and.w	r2, r4, #15
 800b3e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f7f5 f874 	bl	80004d8 <__aeabi_dmul>
 800b3f0:	2602      	movs	r6, #2
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3f8:	4d64      	ldr	r5, [pc, #400]	@ (800b58c <_dtoa_r+0x524>)
 800b3fa:	1124      	asrs	r4, r4, #4
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	f040 80b2 	bne.w	800b566 <_dtoa_r+0x4fe>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1d3      	bne.n	800b3ae <_dtoa_r+0x346>
 800b406:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 80b7 	beq.w	800b580 <_dtoa_r+0x518>
 800b412:	2200      	movs	r2, #0
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	4b5d      	ldr	r3, [pc, #372]	@ (800b590 <_dtoa_r+0x528>)
 800b41a:	f7f5 facf 	bl	80009bc <__aeabi_dcmplt>
 800b41e:	2800      	cmp	r0, #0
 800b420:	f000 80ae 	beq.w	800b580 <_dtoa_r+0x518>
 800b424:	9b07      	ldr	r3, [sp, #28]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f000 80aa 	beq.w	800b580 <_dtoa_r+0x518>
 800b42c:	9b08      	ldr	r3, [sp, #32]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	dd37      	ble.n	800b4a2 <_dtoa_r+0x43a>
 800b432:	1e7b      	subs	r3, r7, #1
 800b434:	4620      	mov	r0, r4
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	2200      	movs	r2, #0
 800b43a:	4629      	mov	r1, r5
 800b43c:	4b55      	ldr	r3, [pc, #340]	@ (800b594 <_dtoa_r+0x52c>)
 800b43e:	f7f5 f84b 	bl	80004d8 <__aeabi_dmul>
 800b442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b446:	9c08      	ldr	r4, [sp, #32]
 800b448:	3601      	adds	r6, #1
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7f4 ffda 	bl	8000404 <__aeabi_i2d>
 800b450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b454:	f7f5 f840 	bl	80004d8 <__aeabi_dmul>
 800b458:	2200      	movs	r2, #0
 800b45a:	4b4f      	ldr	r3, [pc, #316]	@ (800b598 <_dtoa_r+0x530>)
 800b45c:	f7f4 fe86 	bl	800016c <__adddf3>
 800b460:	4605      	mov	r5, r0
 800b462:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b466:	2c00      	cmp	r4, #0
 800b468:	f040 809a 	bne.w	800b5a0 <_dtoa_r+0x538>
 800b46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b470:	2200      	movs	r2, #0
 800b472:	4b4a      	ldr	r3, [pc, #296]	@ (800b59c <_dtoa_r+0x534>)
 800b474:	f7f4 fe78 	bl	8000168 <__aeabi_dsub>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b480:	462a      	mov	r2, r5
 800b482:	4633      	mov	r3, r6
 800b484:	f7f5 fab8 	bl	80009f8 <__aeabi_dcmpgt>
 800b488:	2800      	cmp	r0, #0
 800b48a:	f040 828e 	bne.w	800b9aa <_dtoa_r+0x942>
 800b48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b492:	462a      	mov	r2, r5
 800b494:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b498:	f7f5 fa90 	bl	80009bc <__aeabi_dcmplt>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f040 8127 	bne.w	800b6f0 <_dtoa_r+0x688>
 800b4a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b4a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b4aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f2c0 8163 	blt.w	800b778 <_dtoa_r+0x710>
 800b4b2:	2f0e      	cmp	r7, #14
 800b4b4:	f300 8160 	bgt.w	800b778 <_dtoa_r+0x710>
 800b4b8:	4b33      	ldr	r3, [pc, #204]	@ (800b588 <_dtoa_r+0x520>)
 800b4ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b4c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	da03      	bge.n	800b4d4 <_dtoa_r+0x46c>
 800b4cc:	9b07      	ldr	r3, [sp, #28]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f340 8100 	ble.w	800b6d4 <_dtoa_r+0x66c>
 800b4d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4d8:	4656      	mov	r6, sl
 800b4da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f5 f923 	bl	800072c <__aeabi_ddiv>
 800b4e6:	f7f5 faa7 	bl	8000a38 <__aeabi_d2iz>
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	f7f4 ff8a 	bl	8000404 <__aeabi_i2d>
 800b4f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4f4:	f7f4 fff0 	bl	80004d8 <__aeabi_dmul>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f4 fe32 	bl	8000168 <__aeabi_dsub>
 800b504:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b508:	9d07      	ldr	r5, [sp, #28]
 800b50a:	f806 4b01 	strb.w	r4, [r6], #1
 800b50e:	eba6 040a 	sub.w	r4, r6, sl
 800b512:	42a5      	cmp	r5, r4
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	f040 8116 	bne.w	800b748 <_dtoa_r+0x6e0>
 800b51c:	f7f4 fe26 	bl	800016c <__adddf3>
 800b520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b524:	4604      	mov	r4, r0
 800b526:	460d      	mov	r5, r1
 800b528:	f7f5 fa66 	bl	80009f8 <__aeabi_dcmpgt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	f040 80f8 	bne.w	800b722 <_dtoa_r+0x6ba>
 800b532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b536:	4620      	mov	r0, r4
 800b538:	4629      	mov	r1, r5
 800b53a:	f7f5 fa35 	bl	80009a8 <__aeabi_dcmpeq>
 800b53e:	b118      	cbz	r0, 800b548 <_dtoa_r+0x4e0>
 800b540:	f018 0f01 	tst.w	r8, #1
 800b544:	f040 80ed 	bne.w	800b722 <_dtoa_r+0x6ba>
 800b548:	4649      	mov	r1, r9
 800b54a:	4658      	mov	r0, fp
 800b54c:	f001 f994 	bl	800c878 <_Bfree>
 800b550:	2300      	movs	r3, #0
 800b552:	7033      	strb	r3, [r6, #0]
 800b554:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b556:	3701      	adds	r7, #1
 800b558:	601f      	str	r7, [r3, #0]
 800b55a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 8320 	beq.w	800bba2 <_dtoa_r+0xb3a>
 800b562:	601e      	str	r6, [r3, #0]
 800b564:	e31d      	b.n	800bba2 <_dtoa_r+0xb3a>
 800b566:	07e2      	lsls	r2, r4, #31
 800b568:	d505      	bpl.n	800b576 <_dtoa_r+0x50e>
 800b56a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b56e:	f7f4 ffb3 	bl	80004d8 <__aeabi_dmul>
 800b572:	2301      	movs	r3, #1
 800b574:	3601      	adds	r6, #1
 800b576:	1064      	asrs	r4, r4, #1
 800b578:	3508      	adds	r5, #8
 800b57a:	e73f      	b.n	800b3fc <_dtoa_r+0x394>
 800b57c:	2602      	movs	r6, #2
 800b57e:	e742      	b.n	800b406 <_dtoa_r+0x39e>
 800b580:	9c07      	ldr	r4, [sp, #28]
 800b582:	9704      	str	r7, [sp, #16]
 800b584:	e761      	b.n	800b44a <_dtoa_r+0x3e2>
 800b586:	bf00      	nop
 800b588:	0800dd58 	.word	0x0800dd58
 800b58c:	0800dd30 	.word	0x0800dd30
 800b590:	3ff00000 	.word	0x3ff00000
 800b594:	40240000 	.word	0x40240000
 800b598:	401c0000 	.word	0x401c0000
 800b59c:	40140000 	.word	0x40140000
 800b5a0:	4b70      	ldr	r3, [pc, #448]	@ (800b764 <_dtoa_r+0x6fc>)
 800b5a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5ac:	4454      	add	r4, sl
 800b5ae:	2900      	cmp	r1, #0
 800b5b0:	d045      	beq.n	800b63e <_dtoa_r+0x5d6>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	496c      	ldr	r1, [pc, #432]	@ (800b768 <_dtoa_r+0x700>)
 800b5b6:	f7f5 f8b9 	bl	800072c <__aeabi_ddiv>
 800b5ba:	4633      	mov	r3, r6
 800b5bc:	462a      	mov	r2, r5
 800b5be:	f7f4 fdd3 	bl	8000168 <__aeabi_dsub>
 800b5c2:	4656      	mov	r6, sl
 800b5c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5cc:	f7f5 fa34 	bl	8000a38 <__aeabi_d2iz>
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	f7f4 ff17 	bl	8000404 <__aeabi_i2d>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5de:	f7f4 fdc3 	bl	8000168 <__aeabi_dsub>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	3530      	adds	r5, #48	@ 0x30
 800b5e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5f0:	f806 5b01 	strb.w	r5, [r6], #1
 800b5f4:	f7f5 f9e2 	bl	80009bc <__aeabi_dcmplt>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d163      	bne.n	800b6c4 <_dtoa_r+0x65c>
 800b5fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b600:	2000      	movs	r0, #0
 800b602:	495a      	ldr	r1, [pc, #360]	@ (800b76c <_dtoa_r+0x704>)
 800b604:	f7f4 fdb0 	bl	8000168 <__aeabi_dsub>
 800b608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b60c:	f7f5 f9d6 	bl	80009bc <__aeabi_dcmplt>
 800b610:	2800      	cmp	r0, #0
 800b612:	f040 8087 	bne.w	800b724 <_dtoa_r+0x6bc>
 800b616:	42a6      	cmp	r6, r4
 800b618:	f43f af43 	beq.w	800b4a2 <_dtoa_r+0x43a>
 800b61c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b620:	2200      	movs	r2, #0
 800b622:	4b53      	ldr	r3, [pc, #332]	@ (800b770 <_dtoa_r+0x708>)
 800b624:	f7f4 ff58 	bl	80004d8 <__aeabi_dmul>
 800b628:	2200      	movs	r2, #0
 800b62a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b632:	4b4f      	ldr	r3, [pc, #316]	@ (800b770 <_dtoa_r+0x708>)
 800b634:	f7f4 ff50 	bl	80004d8 <__aeabi_dmul>
 800b638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b63c:	e7c4      	b.n	800b5c8 <_dtoa_r+0x560>
 800b63e:	4631      	mov	r1, r6
 800b640:	4628      	mov	r0, r5
 800b642:	f7f4 ff49 	bl	80004d8 <__aeabi_dmul>
 800b646:	4656      	mov	r6, sl
 800b648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b64c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b652:	f7f5 f9f1 	bl	8000a38 <__aeabi_d2iz>
 800b656:	4605      	mov	r5, r0
 800b658:	f7f4 fed4 	bl	8000404 <__aeabi_i2d>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b664:	f7f4 fd80 	bl	8000168 <__aeabi_dsub>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	3530      	adds	r5, #48	@ 0x30
 800b66e:	f806 5b01 	strb.w	r5, [r6], #1
 800b672:	42a6      	cmp	r6, r4
 800b674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b678:	f04f 0200 	mov.w	r2, #0
 800b67c:	d124      	bne.n	800b6c8 <_dtoa_r+0x660>
 800b67e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b682:	4b39      	ldr	r3, [pc, #228]	@ (800b768 <_dtoa_r+0x700>)
 800b684:	f7f4 fd72 	bl	800016c <__adddf3>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b690:	f7f5 f9b2 	bl	80009f8 <__aeabi_dcmpgt>
 800b694:	2800      	cmp	r0, #0
 800b696:	d145      	bne.n	800b724 <_dtoa_r+0x6bc>
 800b698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b69c:	2000      	movs	r0, #0
 800b69e:	4932      	ldr	r1, [pc, #200]	@ (800b768 <_dtoa_r+0x700>)
 800b6a0:	f7f4 fd62 	bl	8000168 <__aeabi_dsub>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ac:	f7f5 f986 	bl	80009bc <__aeabi_dcmplt>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	f43f aef6 	beq.w	800b4a2 <_dtoa_r+0x43a>
 800b6b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b6b8:	1e73      	subs	r3, r6, #1
 800b6ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6c0:	2b30      	cmp	r3, #48	@ 0x30
 800b6c2:	d0f8      	beq.n	800b6b6 <_dtoa_r+0x64e>
 800b6c4:	9f04      	ldr	r7, [sp, #16]
 800b6c6:	e73f      	b.n	800b548 <_dtoa_r+0x4e0>
 800b6c8:	4b29      	ldr	r3, [pc, #164]	@ (800b770 <_dtoa_r+0x708>)
 800b6ca:	f7f4 ff05 	bl	80004d8 <__aeabi_dmul>
 800b6ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d2:	e7bc      	b.n	800b64e <_dtoa_r+0x5e6>
 800b6d4:	d10c      	bne.n	800b6f0 <_dtoa_r+0x688>
 800b6d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	4b25      	ldr	r3, [pc, #148]	@ (800b774 <_dtoa_r+0x70c>)
 800b6de:	f7f4 fefb 	bl	80004d8 <__aeabi_dmul>
 800b6e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6e6:	f7f5 f97d 	bl	80009e4 <__aeabi_dcmpge>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f000 815b 	beq.w	800b9a6 <_dtoa_r+0x93e>
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	4625      	mov	r5, r4
 800b6f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6f6:	4656      	mov	r6, sl
 800b6f8:	43db      	mvns	r3, r3
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	2700      	movs	r7, #0
 800b6fe:	4621      	mov	r1, r4
 800b700:	4658      	mov	r0, fp
 800b702:	f001 f8b9 	bl	800c878 <_Bfree>
 800b706:	2d00      	cmp	r5, #0
 800b708:	d0dc      	beq.n	800b6c4 <_dtoa_r+0x65c>
 800b70a:	b12f      	cbz	r7, 800b718 <_dtoa_r+0x6b0>
 800b70c:	42af      	cmp	r7, r5
 800b70e:	d003      	beq.n	800b718 <_dtoa_r+0x6b0>
 800b710:	4639      	mov	r1, r7
 800b712:	4658      	mov	r0, fp
 800b714:	f001 f8b0 	bl	800c878 <_Bfree>
 800b718:	4629      	mov	r1, r5
 800b71a:	4658      	mov	r0, fp
 800b71c:	f001 f8ac 	bl	800c878 <_Bfree>
 800b720:	e7d0      	b.n	800b6c4 <_dtoa_r+0x65c>
 800b722:	9704      	str	r7, [sp, #16]
 800b724:	4633      	mov	r3, r6
 800b726:	461e      	mov	r6, r3
 800b728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b72c:	2a39      	cmp	r2, #57	@ 0x39
 800b72e:	d107      	bne.n	800b740 <_dtoa_r+0x6d8>
 800b730:	459a      	cmp	sl, r3
 800b732:	d1f8      	bne.n	800b726 <_dtoa_r+0x6be>
 800b734:	9a04      	ldr	r2, [sp, #16]
 800b736:	3201      	adds	r2, #1
 800b738:	9204      	str	r2, [sp, #16]
 800b73a:	2230      	movs	r2, #48	@ 0x30
 800b73c:	f88a 2000 	strb.w	r2, [sl]
 800b740:	781a      	ldrb	r2, [r3, #0]
 800b742:	3201      	adds	r2, #1
 800b744:	701a      	strb	r2, [r3, #0]
 800b746:	e7bd      	b.n	800b6c4 <_dtoa_r+0x65c>
 800b748:	2200      	movs	r2, #0
 800b74a:	4b09      	ldr	r3, [pc, #36]	@ (800b770 <_dtoa_r+0x708>)
 800b74c:	f7f4 fec4 	bl	80004d8 <__aeabi_dmul>
 800b750:	2200      	movs	r2, #0
 800b752:	2300      	movs	r3, #0
 800b754:	4604      	mov	r4, r0
 800b756:	460d      	mov	r5, r1
 800b758:	f7f5 f926 	bl	80009a8 <__aeabi_dcmpeq>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f43f aebc 	beq.w	800b4da <_dtoa_r+0x472>
 800b762:	e6f1      	b.n	800b548 <_dtoa_r+0x4e0>
 800b764:	0800dd58 	.word	0x0800dd58
 800b768:	3fe00000 	.word	0x3fe00000
 800b76c:	3ff00000 	.word	0x3ff00000
 800b770:	40240000 	.word	0x40240000
 800b774:	40140000 	.word	0x40140000
 800b778:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b77a:	2a00      	cmp	r2, #0
 800b77c:	f000 80db 	beq.w	800b936 <_dtoa_r+0x8ce>
 800b780:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b782:	2a01      	cmp	r2, #1
 800b784:	f300 80bf 	bgt.w	800b906 <_dtoa_r+0x89e>
 800b788:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b78a:	2a00      	cmp	r2, #0
 800b78c:	f000 80b7 	beq.w	800b8fe <_dtoa_r+0x896>
 800b790:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b794:	4646      	mov	r6, r8
 800b796:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b79a:	2101      	movs	r1, #1
 800b79c:	441a      	add	r2, r3
 800b79e:	4658      	mov	r0, fp
 800b7a0:	4498      	add	r8, r3
 800b7a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7a4:	f001 f966 	bl	800ca74 <__i2b>
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	b15e      	cbz	r6, 800b7c4 <_dtoa_r+0x75c>
 800b7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	dd08      	ble.n	800b7c4 <_dtoa_r+0x75c>
 800b7b2:	42b3      	cmp	r3, r6
 800b7b4:	bfa8      	it	ge
 800b7b6:	4633      	movge	r3, r6
 800b7b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7ba:	eba8 0803 	sub.w	r8, r8, r3
 800b7be:	1af6      	subs	r6, r6, r3
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7c6:	b1f3      	cbz	r3, 800b806 <_dtoa_r+0x79e>
 800b7c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 80b7 	beq.w	800b93e <_dtoa_r+0x8d6>
 800b7d0:	b18c      	cbz	r4, 800b7f6 <_dtoa_r+0x78e>
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	4622      	mov	r2, r4
 800b7d6:	4658      	mov	r0, fp
 800b7d8:	f001 fa0a 	bl	800cbf0 <__pow5mult>
 800b7dc:	464a      	mov	r2, r9
 800b7de:	4601      	mov	r1, r0
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	4658      	mov	r0, fp
 800b7e4:	f001 f95c 	bl	800caa0 <__multiply>
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	9004      	str	r0, [sp, #16]
 800b7ec:	4658      	mov	r0, fp
 800b7ee:	f001 f843 	bl	800c878 <_Bfree>
 800b7f2:	9b04      	ldr	r3, [sp, #16]
 800b7f4:	4699      	mov	r9, r3
 800b7f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7f8:	1b1a      	subs	r2, r3, r4
 800b7fa:	d004      	beq.n	800b806 <_dtoa_r+0x79e>
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4658      	mov	r0, fp
 800b800:	f001 f9f6 	bl	800cbf0 <__pow5mult>
 800b804:	4681      	mov	r9, r0
 800b806:	2101      	movs	r1, #1
 800b808:	4658      	mov	r0, fp
 800b80a:	f001 f933 	bl	800ca74 <__i2b>
 800b80e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b810:	4604      	mov	r4, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 81c9 	beq.w	800bbaa <_dtoa_r+0xb42>
 800b818:	461a      	mov	r2, r3
 800b81a:	4601      	mov	r1, r0
 800b81c:	4658      	mov	r0, fp
 800b81e:	f001 f9e7 	bl	800cbf0 <__pow5mult>
 800b822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b824:	4604      	mov	r4, r0
 800b826:	2b01      	cmp	r3, #1
 800b828:	f300 808f 	bgt.w	800b94a <_dtoa_r+0x8e2>
 800b82c:	9b02      	ldr	r3, [sp, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f040 8087 	bne.w	800b942 <_dtoa_r+0x8da>
 800b834:	9b03      	ldr	r3, [sp, #12]
 800b836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f040 8083 	bne.w	800b946 <_dtoa_r+0x8de>
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b846:	0d1b      	lsrs	r3, r3, #20
 800b848:	051b      	lsls	r3, r3, #20
 800b84a:	b12b      	cbz	r3, 800b858 <_dtoa_r+0x7f0>
 800b84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b84e:	f108 0801 	add.w	r8, r8, #1
 800b852:	3301      	adds	r3, #1
 800b854:	9309      	str	r3, [sp, #36]	@ 0x24
 800b856:	2301      	movs	r3, #1
 800b858:	930a      	str	r3, [sp, #40]	@ 0x28
 800b85a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 81aa 	beq.w	800bbb6 <_dtoa_r+0xb4e>
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b868:	6918      	ldr	r0, [r3, #16]
 800b86a:	f001 f8b7 	bl	800c9dc <__hi0bits>
 800b86e:	f1c0 0020 	rsb	r0, r0, #32
 800b872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b874:	4418      	add	r0, r3
 800b876:	f010 001f 	ands.w	r0, r0, #31
 800b87a:	d071      	beq.n	800b960 <_dtoa_r+0x8f8>
 800b87c:	f1c0 0320 	rsb	r3, r0, #32
 800b880:	2b04      	cmp	r3, #4
 800b882:	dd65      	ble.n	800b950 <_dtoa_r+0x8e8>
 800b884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b886:	f1c0 001c 	rsb	r0, r0, #28
 800b88a:	4403      	add	r3, r0
 800b88c:	4480      	add	r8, r0
 800b88e:	4406      	add	r6, r0
 800b890:	9309      	str	r3, [sp, #36]	@ 0x24
 800b892:	f1b8 0f00 	cmp.w	r8, #0
 800b896:	dd05      	ble.n	800b8a4 <_dtoa_r+0x83c>
 800b898:	4649      	mov	r1, r9
 800b89a:	4642      	mov	r2, r8
 800b89c:	4658      	mov	r0, fp
 800b89e:	f001 fa01 	bl	800cca4 <__lshift>
 800b8a2:	4681      	mov	r9, r0
 800b8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dd05      	ble.n	800b8b6 <_dtoa_r+0x84e>
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	4658      	mov	r0, fp
 800b8b0:	f001 f9f8 	bl	800cca4 <__lshift>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d053      	beq.n	800b964 <_dtoa_r+0x8fc>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4648      	mov	r0, r9
 800b8c0:	f001 fa5c 	bl	800cd7c <__mcmp>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	da4d      	bge.n	800b964 <_dtoa_r+0x8fc>
 800b8c8:	1e7b      	subs	r3, r7, #1
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	9304      	str	r3, [sp, #16]
 800b8ce:	220a      	movs	r2, #10
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	4658      	mov	r0, fp
 800b8d4:	f000 fff2 	bl	800c8bc <__multadd>
 800b8d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8da:	4681      	mov	r9, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f000 816c 	beq.w	800bbba <_dtoa_r+0xb52>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	220a      	movs	r2, #10
 800b8e8:	4658      	mov	r0, fp
 800b8ea:	f000 ffe7 	bl	800c8bc <__multadd>
 800b8ee:	9b08      	ldr	r3, [sp, #32]
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	dc61      	bgt.n	800b9ba <_dtoa_r+0x952>
 800b8f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	dc3b      	bgt.n	800b974 <_dtoa_r+0x90c>
 800b8fc:	e05d      	b.n	800b9ba <_dtoa_r+0x952>
 800b8fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b900:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b904:	e746      	b.n	800b794 <_dtoa_r+0x72c>
 800b906:	9b07      	ldr	r3, [sp, #28]
 800b908:	1e5c      	subs	r4, r3, #1
 800b90a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b90c:	42a3      	cmp	r3, r4
 800b90e:	bfbf      	itttt	lt
 800b910:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b912:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b914:	1ae3      	sublt	r3, r4, r3
 800b916:	18d2      	addlt	r2, r2, r3
 800b918:	bfa8      	it	ge
 800b91a:	1b1c      	subge	r4, r3, r4
 800b91c:	9b07      	ldr	r3, [sp, #28]
 800b91e:	bfbe      	ittt	lt
 800b920:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b922:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b924:	2400      	movlt	r4, #0
 800b926:	2b00      	cmp	r3, #0
 800b928:	bfb5      	itete	lt
 800b92a:	eba8 0603 	sublt.w	r6, r8, r3
 800b92e:	4646      	movge	r6, r8
 800b930:	2300      	movlt	r3, #0
 800b932:	9b07      	ldrge	r3, [sp, #28]
 800b934:	e730      	b.n	800b798 <_dtoa_r+0x730>
 800b936:	4646      	mov	r6, r8
 800b938:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b93a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b93c:	e735      	b.n	800b7aa <_dtoa_r+0x742>
 800b93e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b940:	e75c      	b.n	800b7fc <_dtoa_r+0x794>
 800b942:	2300      	movs	r3, #0
 800b944:	e788      	b.n	800b858 <_dtoa_r+0x7f0>
 800b946:	9b02      	ldr	r3, [sp, #8]
 800b948:	e786      	b.n	800b858 <_dtoa_r+0x7f0>
 800b94a:	2300      	movs	r3, #0
 800b94c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b94e:	e788      	b.n	800b862 <_dtoa_r+0x7fa>
 800b950:	d09f      	beq.n	800b892 <_dtoa_r+0x82a>
 800b952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b954:	331c      	adds	r3, #28
 800b956:	441a      	add	r2, r3
 800b958:	4498      	add	r8, r3
 800b95a:	441e      	add	r6, r3
 800b95c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b95e:	e798      	b.n	800b892 <_dtoa_r+0x82a>
 800b960:	4603      	mov	r3, r0
 800b962:	e7f6      	b.n	800b952 <_dtoa_r+0x8ea>
 800b964:	9b07      	ldr	r3, [sp, #28]
 800b966:	9704      	str	r7, [sp, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	dc20      	bgt.n	800b9ae <_dtoa_r+0x946>
 800b96c:	9308      	str	r3, [sp, #32]
 800b96e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b970:	2b02      	cmp	r3, #2
 800b972:	dd1e      	ble.n	800b9b2 <_dtoa_r+0x94a>
 800b974:	9b08      	ldr	r3, [sp, #32]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f47f aebc 	bne.w	800b6f4 <_dtoa_r+0x68c>
 800b97c:	4621      	mov	r1, r4
 800b97e:	2205      	movs	r2, #5
 800b980:	4658      	mov	r0, fp
 800b982:	f000 ff9b 	bl	800c8bc <__multadd>
 800b986:	4601      	mov	r1, r0
 800b988:	4604      	mov	r4, r0
 800b98a:	4648      	mov	r0, r9
 800b98c:	f001 f9f6 	bl	800cd7c <__mcmp>
 800b990:	2800      	cmp	r0, #0
 800b992:	f77f aeaf 	ble.w	800b6f4 <_dtoa_r+0x68c>
 800b996:	2331      	movs	r3, #49	@ 0x31
 800b998:	4656      	mov	r6, sl
 800b99a:	f806 3b01 	strb.w	r3, [r6], #1
 800b99e:	9b04      	ldr	r3, [sp, #16]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	e6aa      	b.n	800b6fc <_dtoa_r+0x694>
 800b9a6:	9c07      	ldr	r4, [sp, #28]
 800b9a8:	9704      	str	r7, [sp, #16]
 800b9aa:	4625      	mov	r5, r4
 800b9ac:	e7f3      	b.n	800b996 <_dtoa_r+0x92e>
 800b9ae:	9b07      	ldr	r3, [sp, #28]
 800b9b0:	9308      	str	r3, [sp, #32]
 800b9b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 8104 	beq.w	800bbc2 <_dtoa_r+0xb5a>
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	dd05      	ble.n	800b9ca <_dtoa_r+0x962>
 800b9be:	4629      	mov	r1, r5
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	4658      	mov	r0, fp
 800b9c4:	f001 f96e 	bl	800cca4 <__lshift>
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d05a      	beq.n	800ba86 <_dtoa_r+0xa1e>
 800b9d0:	4658      	mov	r0, fp
 800b9d2:	6869      	ldr	r1, [r5, #4]
 800b9d4:	f000 ff10 	bl	800c7f8 <_Balloc>
 800b9d8:	4606      	mov	r6, r0
 800b9da:	b928      	cbnz	r0, 800b9e8 <_dtoa_r+0x980>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b9e2:	4b83      	ldr	r3, [pc, #524]	@ (800bbf0 <_dtoa_r+0xb88>)
 800b9e4:	f7ff bb54 	b.w	800b090 <_dtoa_r+0x28>
 800b9e8:	692a      	ldr	r2, [r5, #16]
 800b9ea:	f105 010c 	add.w	r1, r5, #12
 800b9ee:	3202      	adds	r2, #2
 800b9f0:	0092      	lsls	r2, r2, #2
 800b9f2:	300c      	adds	r0, #12
 800b9f4:	f7ff fa95 	bl	800af22 <memcpy>
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	4631      	mov	r1, r6
 800b9fc:	4658      	mov	r0, fp
 800b9fe:	f001 f951 	bl	800cca4 <__lshift>
 800ba02:	462f      	mov	r7, r5
 800ba04:	4605      	mov	r5, r0
 800ba06:	f10a 0301 	add.w	r3, sl, #1
 800ba0a:	9307      	str	r3, [sp, #28]
 800ba0c:	9b08      	ldr	r3, [sp, #32]
 800ba0e:	4453      	add	r3, sl
 800ba10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba12:	9b02      	ldr	r3, [sp, #8]
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba1a:	9b07      	ldr	r3, [sp, #28]
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	4648      	mov	r0, r9
 800ba22:	9302      	str	r3, [sp, #8]
 800ba24:	f7ff fa96 	bl	800af54 <quorem>
 800ba28:	4639      	mov	r1, r7
 800ba2a:	9008      	str	r0, [sp, #32]
 800ba2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba30:	4648      	mov	r0, r9
 800ba32:	f001 f9a3 	bl	800cd7c <__mcmp>
 800ba36:	462a      	mov	r2, r5
 800ba38:	9009      	str	r0, [sp, #36]	@ 0x24
 800ba3a:	4621      	mov	r1, r4
 800ba3c:	4658      	mov	r0, fp
 800ba3e:	f001 f9b9 	bl	800cdb4 <__mdiff>
 800ba42:	68c2      	ldr	r2, [r0, #12]
 800ba44:	4606      	mov	r6, r0
 800ba46:	bb02      	cbnz	r2, 800ba8a <_dtoa_r+0xa22>
 800ba48:	4601      	mov	r1, r0
 800ba4a:	4648      	mov	r0, r9
 800ba4c:	f001 f996 	bl	800cd7c <__mcmp>
 800ba50:	4602      	mov	r2, r0
 800ba52:	4631      	mov	r1, r6
 800ba54:	4658      	mov	r0, fp
 800ba56:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba58:	f000 ff0e 	bl	800c878 <_Bfree>
 800ba5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba60:	9e07      	ldr	r6, [sp, #28]
 800ba62:	ea43 0102 	orr.w	r1, r3, r2
 800ba66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba68:	4319      	orrs	r1, r3
 800ba6a:	d110      	bne.n	800ba8e <_dtoa_r+0xa26>
 800ba6c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba70:	d029      	beq.n	800bac6 <_dtoa_r+0xa5e>
 800ba72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	dd02      	ble.n	800ba7e <_dtoa_r+0xa16>
 800ba78:	9b08      	ldr	r3, [sp, #32]
 800ba7a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ba7e:	9b02      	ldr	r3, [sp, #8]
 800ba80:	f883 8000 	strb.w	r8, [r3]
 800ba84:	e63b      	b.n	800b6fe <_dtoa_r+0x696>
 800ba86:	4628      	mov	r0, r5
 800ba88:	e7bb      	b.n	800ba02 <_dtoa_r+0x99a>
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	e7e1      	b.n	800ba52 <_dtoa_r+0x9ea>
 800ba8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	db04      	blt.n	800ba9e <_dtoa_r+0xa36>
 800ba94:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800ba96:	430b      	orrs	r3, r1
 800ba98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba9a:	430b      	orrs	r3, r1
 800ba9c:	d120      	bne.n	800bae0 <_dtoa_r+0xa78>
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	dded      	ble.n	800ba7e <_dtoa_r+0xa16>
 800baa2:	4649      	mov	r1, r9
 800baa4:	2201      	movs	r2, #1
 800baa6:	4658      	mov	r0, fp
 800baa8:	f001 f8fc 	bl	800cca4 <__lshift>
 800baac:	4621      	mov	r1, r4
 800baae:	4681      	mov	r9, r0
 800bab0:	f001 f964 	bl	800cd7c <__mcmp>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	dc03      	bgt.n	800bac0 <_dtoa_r+0xa58>
 800bab8:	d1e1      	bne.n	800ba7e <_dtoa_r+0xa16>
 800baba:	f018 0f01 	tst.w	r8, #1
 800babe:	d0de      	beq.n	800ba7e <_dtoa_r+0xa16>
 800bac0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bac4:	d1d8      	bne.n	800ba78 <_dtoa_r+0xa10>
 800bac6:	2339      	movs	r3, #57	@ 0x39
 800bac8:	9a02      	ldr	r2, [sp, #8]
 800baca:	7013      	strb	r3, [r2, #0]
 800bacc:	4633      	mov	r3, r6
 800bace:	461e      	mov	r6, r3
 800bad0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bad4:	3b01      	subs	r3, #1
 800bad6:	2a39      	cmp	r2, #57	@ 0x39
 800bad8:	d052      	beq.n	800bb80 <_dtoa_r+0xb18>
 800bada:	3201      	adds	r2, #1
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	e60e      	b.n	800b6fe <_dtoa_r+0x696>
 800bae0:	2a00      	cmp	r2, #0
 800bae2:	dd07      	ble.n	800baf4 <_dtoa_r+0xa8c>
 800bae4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bae8:	d0ed      	beq.n	800bac6 <_dtoa_r+0xa5e>
 800baea:	9a02      	ldr	r2, [sp, #8]
 800baec:	f108 0301 	add.w	r3, r8, #1
 800baf0:	7013      	strb	r3, [r2, #0]
 800baf2:	e604      	b.n	800b6fe <_dtoa_r+0x696>
 800baf4:	9b07      	ldr	r3, [sp, #28]
 800baf6:	9a07      	ldr	r2, [sp, #28]
 800baf8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bafc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d028      	beq.n	800bb54 <_dtoa_r+0xaec>
 800bb02:	4649      	mov	r1, r9
 800bb04:	2300      	movs	r3, #0
 800bb06:	220a      	movs	r2, #10
 800bb08:	4658      	mov	r0, fp
 800bb0a:	f000 fed7 	bl	800c8bc <__multadd>
 800bb0e:	42af      	cmp	r7, r5
 800bb10:	4681      	mov	r9, r0
 800bb12:	f04f 0300 	mov.w	r3, #0
 800bb16:	f04f 020a 	mov.w	r2, #10
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4658      	mov	r0, fp
 800bb1e:	d107      	bne.n	800bb30 <_dtoa_r+0xac8>
 800bb20:	f000 fecc 	bl	800c8bc <__multadd>
 800bb24:	4607      	mov	r7, r0
 800bb26:	4605      	mov	r5, r0
 800bb28:	9b07      	ldr	r3, [sp, #28]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	9307      	str	r3, [sp, #28]
 800bb2e:	e774      	b.n	800ba1a <_dtoa_r+0x9b2>
 800bb30:	f000 fec4 	bl	800c8bc <__multadd>
 800bb34:	4629      	mov	r1, r5
 800bb36:	4607      	mov	r7, r0
 800bb38:	2300      	movs	r3, #0
 800bb3a:	220a      	movs	r2, #10
 800bb3c:	4658      	mov	r0, fp
 800bb3e:	f000 febd 	bl	800c8bc <__multadd>
 800bb42:	4605      	mov	r5, r0
 800bb44:	e7f0      	b.n	800bb28 <_dtoa_r+0xac0>
 800bb46:	9b08      	ldr	r3, [sp, #32]
 800bb48:	2700      	movs	r7, #0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	bfcc      	ite	gt
 800bb4e:	461e      	movgt	r6, r3
 800bb50:	2601      	movle	r6, #1
 800bb52:	4456      	add	r6, sl
 800bb54:	4649      	mov	r1, r9
 800bb56:	2201      	movs	r2, #1
 800bb58:	4658      	mov	r0, fp
 800bb5a:	f001 f8a3 	bl	800cca4 <__lshift>
 800bb5e:	4621      	mov	r1, r4
 800bb60:	4681      	mov	r9, r0
 800bb62:	f001 f90b 	bl	800cd7c <__mcmp>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	dcb0      	bgt.n	800bacc <_dtoa_r+0xa64>
 800bb6a:	d102      	bne.n	800bb72 <_dtoa_r+0xb0a>
 800bb6c:	f018 0f01 	tst.w	r8, #1
 800bb70:	d1ac      	bne.n	800bacc <_dtoa_r+0xa64>
 800bb72:	4633      	mov	r3, r6
 800bb74:	461e      	mov	r6, r3
 800bb76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb7a:	2a30      	cmp	r2, #48	@ 0x30
 800bb7c:	d0fa      	beq.n	800bb74 <_dtoa_r+0xb0c>
 800bb7e:	e5be      	b.n	800b6fe <_dtoa_r+0x696>
 800bb80:	459a      	cmp	sl, r3
 800bb82:	d1a4      	bne.n	800bace <_dtoa_r+0xa66>
 800bb84:	9b04      	ldr	r3, [sp, #16]
 800bb86:	3301      	adds	r3, #1
 800bb88:	9304      	str	r3, [sp, #16]
 800bb8a:	2331      	movs	r3, #49	@ 0x31
 800bb8c:	f88a 3000 	strb.w	r3, [sl]
 800bb90:	e5b5      	b.n	800b6fe <_dtoa_r+0x696>
 800bb92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bb94:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bbf4 <_dtoa_r+0xb8c>
 800bb98:	b11b      	cbz	r3, 800bba2 <_dtoa_r+0xb3a>
 800bb9a:	f10a 0308 	add.w	r3, sl, #8
 800bb9e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	4650      	mov	r0, sl
 800bba4:	b017      	add	sp, #92	@ 0x5c
 800bba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	f77f ae3d 	ble.w	800b82c <_dtoa_r+0x7c4>
 800bbb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbb4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbb6:	2001      	movs	r0, #1
 800bbb8:	e65b      	b.n	800b872 <_dtoa_r+0x80a>
 800bbba:	9b08      	ldr	r3, [sp, #32]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f77f aed6 	ble.w	800b96e <_dtoa_r+0x906>
 800bbc2:	4656      	mov	r6, sl
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4648      	mov	r0, r9
 800bbc8:	f7ff f9c4 	bl	800af54 <quorem>
 800bbcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bbd0:	9b08      	ldr	r3, [sp, #32]
 800bbd2:	f806 8b01 	strb.w	r8, [r6], #1
 800bbd6:	eba6 020a 	sub.w	r2, r6, sl
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	ddb3      	ble.n	800bb46 <_dtoa_r+0xade>
 800bbde:	4649      	mov	r1, r9
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	220a      	movs	r2, #10
 800bbe4:	4658      	mov	r0, fp
 800bbe6:	f000 fe69 	bl	800c8bc <__multadd>
 800bbea:	4681      	mov	r9, r0
 800bbec:	e7ea      	b.n	800bbc4 <_dtoa_r+0xb5c>
 800bbee:	bf00      	nop
 800bbf0:	0800dc45 	.word	0x0800dc45
 800bbf4:	0800dbc9 	.word	0x0800dbc9

0800bbf8 <rshift>:
 800bbf8:	6903      	ldr	r3, [r0, #16]
 800bbfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc02:	f100 0414 	add.w	r4, r0, #20
 800bc06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc0a:	dd46      	ble.n	800bc9a <rshift+0xa2>
 800bc0c:	f011 011f 	ands.w	r1, r1, #31
 800bc10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc18:	d10c      	bne.n	800bc34 <rshift+0x3c>
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	f100 0710 	add.w	r7, r0, #16
 800bc20:	42b1      	cmp	r1, r6
 800bc22:	d335      	bcc.n	800bc90 <rshift+0x98>
 800bc24:	1a9b      	subs	r3, r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	1eea      	subs	r2, r5, #3
 800bc2a:	4296      	cmp	r6, r2
 800bc2c:	bf38      	it	cc
 800bc2e:	2300      	movcc	r3, #0
 800bc30:	4423      	add	r3, r4
 800bc32:	e015      	b.n	800bc60 <rshift+0x68>
 800bc34:	46a1      	mov	r9, r4
 800bc36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc3a:	f1c1 0820 	rsb	r8, r1, #32
 800bc3e:	40cf      	lsrs	r7, r1
 800bc40:	f105 0e04 	add.w	lr, r5, #4
 800bc44:	4576      	cmp	r6, lr
 800bc46:	46f4      	mov	ip, lr
 800bc48:	d816      	bhi.n	800bc78 <rshift+0x80>
 800bc4a:	1a9a      	subs	r2, r3, r2
 800bc4c:	0092      	lsls	r2, r2, #2
 800bc4e:	3a04      	subs	r2, #4
 800bc50:	3501      	adds	r5, #1
 800bc52:	42ae      	cmp	r6, r5
 800bc54:	bf38      	it	cc
 800bc56:	2200      	movcc	r2, #0
 800bc58:	18a3      	adds	r3, r4, r2
 800bc5a:	50a7      	str	r7, [r4, r2]
 800bc5c:	b107      	cbz	r7, 800bc60 <rshift+0x68>
 800bc5e:	3304      	adds	r3, #4
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	eba3 0204 	sub.w	r2, r3, r4
 800bc66:	bf08      	it	eq
 800bc68:	2300      	moveq	r3, #0
 800bc6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc6e:	6102      	str	r2, [r0, #16]
 800bc70:	bf08      	it	eq
 800bc72:	6143      	streq	r3, [r0, #20]
 800bc74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc78:	f8dc c000 	ldr.w	ip, [ip]
 800bc7c:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc80:	ea4c 0707 	orr.w	r7, ip, r7
 800bc84:	f849 7b04 	str.w	r7, [r9], #4
 800bc88:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc8c:	40cf      	lsrs	r7, r1
 800bc8e:	e7d9      	b.n	800bc44 <rshift+0x4c>
 800bc90:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc94:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc98:	e7c2      	b.n	800bc20 <rshift+0x28>
 800bc9a:	4623      	mov	r3, r4
 800bc9c:	e7e0      	b.n	800bc60 <rshift+0x68>

0800bc9e <__hexdig_fun>:
 800bc9e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bca2:	2b09      	cmp	r3, #9
 800bca4:	d802      	bhi.n	800bcac <__hexdig_fun+0xe>
 800bca6:	3820      	subs	r0, #32
 800bca8:	b2c0      	uxtb	r0, r0
 800bcaa:	4770      	bx	lr
 800bcac:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bcb0:	2b05      	cmp	r3, #5
 800bcb2:	d801      	bhi.n	800bcb8 <__hexdig_fun+0x1a>
 800bcb4:	3847      	subs	r0, #71	@ 0x47
 800bcb6:	e7f7      	b.n	800bca8 <__hexdig_fun+0xa>
 800bcb8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bcbc:	2b05      	cmp	r3, #5
 800bcbe:	d801      	bhi.n	800bcc4 <__hexdig_fun+0x26>
 800bcc0:	3827      	subs	r0, #39	@ 0x27
 800bcc2:	e7f1      	b.n	800bca8 <__hexdig_fun+0xa>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	4770      	bx	lr

0800bcc8 <__gethex>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	468a      	mov	sl, r1
 800bcce:	4690      	mov	r8, r2
 800bcd0:	b085      	sub	sp, #20
 800bcd2:	9302      	str	r3, [sp, #8]
 800bcd4:	680b      	ldr	r3, [r1, #0]
 800bcd6:	9001      	str	r0, [sp, #4]
 800bcd8:	1c9c      	adds	r4, r3, #2
 800bcda:	46a1      	mov	r9, r4
 800bcdc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bce0:	2830      	cmp	r0, #48	@ 0x30
 800bce2:	d0fa      	beq.n	800bcda <__gethex+0x12>
 800bce4:	eba9 0303 	sub.w	r3, r9, r3
 800bce8:	f1a3 0b02 	sub.w	fp, r3, #2
 800bcec:	f7ff ffd7 	bl	800bc9e <__hexdig_fun>
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d168      	bne.n	800bdc8 <__gethex+0x100>
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	4648      	mov	r0, r9
 800bcfa:	499f      	ldr	r1, [pc, #636]	@ (800bf78 <__gethex+0x2b0>)
 800bcfc:	f7ff f8b8 	bl	800ae70 <strncmp>
 800bd00:	4607      	mov	r7, r0
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d167      	bne.n	800bdd6 <__gethex+0x10e>
 800bd06:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bd0a:	4626      	mov	r6, r4
 800bd0c:	f7ff ffc7 	bl	800bc9e <__hexdig_fun>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d062      	beq.n	800bdda <__gethex+0x112>
 800bd14:	4623      	mov	r3, r4
 800bd16:	7818      	ldrb	r0, [r3, #0]
 800bd18:	4699      	mov	r9, r3
 800bd1a:	2830      	cmp	r0, #48	@ 0x30
 800bd1c:	f103 0301 	add.w	r3, r3, #1
 800bd20:	d0f9      	beq.n	800bd16 <__gethex+0x4e>
 800bd22:	f7ff ffbc 	bl	800bc9e <__hexdig_fun>
 800bd26:	fab0 f580 	clz	r5, r0
 800bd2a:	f04f 0b01 	mov.w	fp, #1
 800bd2e:	096d      	lsrs	r5, r5, #5
 800bd30:	464a      	mov	r2, r9
 800bd32:	4616      	mov	r6, r2
 800bd34:	7830      	ldrb	r0, [r6, #0]
 800bd36:	3201      	adds	r2, #1
 800bd38:	f7ff ffb1 	bl	800bc9e <__hexdig_fun>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d1f8      	bne.n	800bd32 <__gethex+0x6a>
 800bd40:	2201      	movs	r2, #1
 800bd42:	4630      	mov	r0, r6
 800bd44:	498c      	ldr	r1, [pc, #560]	@ (800bf78 <__gethex+0x2b0>)
 800bd46:	f7ff f893 	bl	800ae70 <strncmp>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d13f      	bne.n	800bdce <__gethex+0x106>
 800bd4e:	b944      	cbnz	r4, 800bd62 <__gethex+0x9a>
 800bd50:	1c74      	adds	r4, r6, #1
 800bd52:	4622      	mov	r2, r4
 800bd54:	4616      	mov	r6, r2
 800bd56:	7830      	ldrb	r0, [r6, #0]
 800bd58:	3201      	adds	r2, #1
 800bd5a:	f7ff ffa0 	bl	800bc9e <__hexdig_fun>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d1f8      	bne.n	800bd54 <__gethex+0x8c>
 800bd62:	1ba4      	subs	r4, r4, r6
 800bd64:	00a7      	lsls	r7, r4, #2
 800bd66:	7833      	ldrb	r3, [r6, #0]
 800bd68:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bd6c:	2b50      	cmp	r3, #80	@ 0x50
 800bd6e:	d13e      	bne.n	800bdee <__gethex+0x126>
 800bd70:	7873      	ldrb	r3, [r6, #1]
 800bd72:	2b2b      	cmp	r3, #43	@ 0x2b
 800bd74:	d033      	beq.n	800bdde <__gethex+0x116>
 800bd76:	2b2d      	cmp	r3, #45	@ 0x2d
 800bd78:	d034      	beq.n	800bde4 <__gethex+0x11c>
 800bd7a:	2400      	movs	r4, #0
 800bd7c:	1c71      	adds	r1, r6, #1
 800bd7e:	7808      	ldrb	r0, [r1, #0]
 800bd80:	f7ff ff8d 	bl	800bc9e <__hexdig_fun>
 800bd84:	1e43      	subs	r3, r0, #1
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b18      	cmp	r3, #24
 800bd8a:	d830      	bhi.n	800bdee <__gethex+0x126>
 800bd8c:	f1a0 0210 	sub.w	r2, r0, #16
 800bd90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd94:	f7ff ff83 	bl	800bc9e <__hexdig_fun>
 800bd98:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800bd9c:	fa5f fc8c 	uxtb.w	ip, ip
 800bda0:	f1bc 0f18 	cmp.w	ip, #24
 800bda4:	f04f 030a 	mov.w	r3, #10
 800bda8:	d91e      	bls.n	800bde8 <__gethex+0x120>
 800bdaa:	b104      	cbz	r4, 800bdae <__gethex+0xe6>
 800bdac:	4252      	negs	r2, r2
 800bdae:	4417      	add	r7, r2
 800bdb0:	f8ca 1000 	str.w	r1, [sl]
 800bdb4:	b1ed      	cbz	r5, 800bdf2 <__gethex+0x12a>
 800bdb6:	f1bb 0f00 	cmp.w	fp, #0
 800bdba:	bf0c      	ite	eq
 800bdbc:	2506      	moveq	r5, #6
 800bdbe:	2500      	movne	r5, #0
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	b005      	add	sp, #20
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	2500      	movs	r5, #0
 800bdca:	462c      	mov	r4, r5
 800bdcc:	e7b0      	b.n	800bd30 <__gethex+0x68>
 800bdce:	2c00      	cmp	r4, #0
 800bdd0:	d1c7      	bne.n	800bd62 <__gethex+0x9a>
 800bdd2:	4627      	mov	r7, r4
 800bdd4:	e7c7      	b.n	800bd66 <__gethex+0x9e>
 800bdd6:	464e      	mov	r6, r9
 800bdd8:	462f      	mov	r7, r5
 800bdda:	2501      	movs	r5, #1
 800bddc:	e7c3      	b.n	800bd66 <__gethex+0x9e>
 800bdde:	2400      	movs	r4, #0
 800bde0:	1cb1      	adds	r1, r6, #2
 800bde2:	e7cc      	b.n	800bd7e <__gethex+0xb6>
 800bde4:	2401      	movs	r4, #1
 800bde6:	e7fb      	b.n	800bde0 <__gethex+0x118>
 800bde8:	fb03 0002 	mla	r0, r3, r2, r0
 800bdec:	e7ce      	b.n	800bd8c <__gethex+0xc4>
 800bdee:	4631      	mov	r1, r6
 800bdf0:	e7de      	b.n	800bdb0 <__gethex+0xe8>
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	eba6 0309 	sub.w	r3, r6, r9
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	2b07      	cmp	r3, #7
 800bdfc:	dc0a      	bgt.n	800be14 <__gethex+0x14c>
 800bdfe:	9801      	ldr	r0, [sp, #4]
 800be00:	f000 fcfa 	bl	800c7f8 <_Balloc>
 800be04:	4604      	mov	r4, r0
 800be06:	b940      	cbnz	r0, 800be1a <__gethex+0x152>
 800be08:	4602      	mov	r2, r0
 800be0a:	21e4      	movs	r1, #228	@ 0xe4
 800be0c:	4b5b      	ldr	r3, [pc, #364]	@ (800bf7c <__gethex+0x2b4>)
 800be0e:	485c      	ldr	r0, [pc, #368]	@ (800bf80 <__gethex+0x2b8>)
 800be10:	f001 fa86 	bl	800d320 <__assert_func>
 800be14:	3101      	adds	r1, #1
 800be16:	105b      	asrs	r3, r3, #1
 800be18:	e7ef      	b.n	800bdfa <__gethex+0x132>
 800be1a:	2300      	movs	r3, #0
 800be1c:	f100 0a14 	add.w	sl, r0, #20
 800be20:	4655      	mov	r5, sl
 800be22:	469b      	mov	fp, r3
 800be24:	45b1      	cmp	r9, r6
 800be26:	d337      	bcc.n	800be98 <__gethex+0x1d0>
 800be28:	f845 bb04 	str.w	fp, [r5], #4
 800be2c:	eba5 050a 	sub.w	r5, r5, sl
 800be30:	10ad      	asrs	r5, r5, #2
 800be32:	6125      	str	r5, [r4, #16]
 800be34:	4658      	mov	r0, fp
 800be36:	f000 fdd1 	bl	800c9dc <__hi0bits>
 800be3a:	016d      	lsls	r5, r5, #5
 800be3c:	f8d8 6000 	ldr.w	r6, [r8]
 800be40:	1a2d      	subs	r5, r5, r0
 800be42:	42b5      	cmp	r5, r6
 800be44:	dd54      	ble.n	800bef0 <__gethex+0x228>
 800be46:	1bad      	subs	r5, r5, r6
 800be48:	4629      	mov	r1, r5
 800be4a:	4620      	mov	r0, r4
 800be4c:	f001 f959 	bl	800d102 <__any_on>
 800be50:	4681      	mov	r9, r0
 800be52:	b178      	cbz	r0, 800be74 <__gethex+0x1ac>
 800be54:	f04f 0901 	mov.w	r9, #1
 800be58:	1e6b      	subs	r3, r5, #1
 800be5a:	1159      	asrs	r1, r3, #5
 800be5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800be60:	f003 021f 	and.w	r2, r3, #31
 800be64:	fa09 f202 	lsl.w	r2, r9, r2
 800be68:	420a      	tst	r2, r1
 800be6a:	d003      	beq.n	800be74 <__gethex+0x1ac>
 800be6c:	454b      	cmp	r3, r9
 800be6e:	dc36      	bgt.n	800bede <__gethex+0x216>
 800be70:	f04f 0902 	mov.w	r9, #2
 800be74:	4629      	mov	r1, r5
 800be76:	4620      	mov	r0, r4
 800be78:	f7ff febe 	bl	800bbf8 <rshift>
 800be7c:	442f      	add	r7, r5
 800be7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be82:	42bb      	cmp	r3, r7
 800be84:	da42      	bge.n	800bf0c <__gethex+0x244>
 800be86:	4621      	mov	r1, r4
 800be88:	9801      	ldr	r0, [sp, #4]
 800be8a:	f000 fcf5 	bl	800c878 <_Bfree>
 800be8e:	2300      	movs	r3, #0
 800be90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be92:	25a3      	movs	r5, #163	@ 0xa3
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	e793      	b.n	800bdc0 <__gethex+0xf8>
 800be98:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be9c:	2a2e      	cmp	r2, #46	@ 0x2e
 800be9e:	d012      	beq.n	800bec6 <__gethex+0x1fe>
 800bea0:	2b20      	cmp	r3, #32
 800bea2:	d104      	bne.n	800beae <__gethex+0x1e6>
 800bea4:	f845 bb04 	str.w	fp, [r5], #4
 800bea8:	f04f 0b00 	mov.w	fp, #0
 800beac:	465b      	mov	r3, fp
 800beae:	7830      	ldrb	r0, [r6, #0]
 800beb0:	9303      	str	r3, [sp, #12]
 800beb2:	f7ff fef4 	bl	800bc9e <__hexdig_fun>
 800beb6:	9b03      	ldr	r3, [sp, #12]
 800beb8:	f000 000f 	and.w	r0, r0, #15
 800bebc:	4098      	lsls	r0, r3
 800bebe:	ea4b 0b00 	orr.w	fp, fp, r0
 800bec2:	3304      	adds	r3, #4
 800bec4:	e7ae      	b.n	800be24 <__gethex+0x15c>
 800bec6:	45b1      	cmp	r9, r6
 800bec8:	d8ea      	bhi.n	800bea0 <__gethex+0x1d8>
 800beca:	2201      	movs	r2, #1
 800becc:	4630      	mov	r0, r6
 800bece:	492a      	ldr	r1, [pc, #168]	@ (800bf78 <__gethex+0x2b0>)
 800bed0:	9303      	str	r3, [sp, #12]
 800bed2:	f7fe ffcd 	bl	800ae70 <strncmp>
 800bed6:	9b03      	ldr	r3, [sp, #12]
 800bed8:	2800      	cmp	r0, #0
 800beda:	d1e1      	bne.n	800bea0 <__gethex+0x1d8>
 800bedc:	e7a2      	b.n	800be24 <__gethex+0x15c>
 800bede:	4620      	mov	r0, r4
 800bee0:	1ea9      	subs	r1, r5, #2
 800bee2:	f001 f90e 	bl	800d102 <__any_on>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d0c2      	beq.n	800be70 <__gethex+0x1a8>
 800beea:	f04f 0903 	mov.w	r9, #3
 800beee:	e7c1      	b.n	800be74 <__gethex+0x1ac>
 800bef0:	da09      	bge.n	800bf06 <__gethex+0x23e>
 800bef2:	1b75      	subs	r5, r6, r5
 800bef4:	4621      	mov	r1, r4
 800bef6:	462a      	mov	r2, r5
 800bef8:	9801      	ldr	r0, [sp, #4]
 800befa:	f000 fed3 	bl	800cca4 <__lshift>
 800befe:	4604      	mov	r4, r0
 800bf00:	1b7f      	subs	r7, r7, r5
 800bf02:	f100 0a14 	add.w	sl, r0, #20
 800bf06:	f04f 0900 	mov.w	r9, #0
 800bf0a:	e7b8      	b.n	800be7e <__gethex+0x1b6>
 800bf0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bf10:	42bd      	cmp	r5, r7
 800bf12:	dd6f      	ble.n	800bff4 <__gethex+0x32c>
 800bf14:	1bed      	subs	r5, r5, r7
 800bf16:	42ae      	cmp	r6, r5
 800bf18:	dc34      	bgt.n	800bf84 <__gethex+0x2bc>
 800bf1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d022      	beq.n	800bf68 <__gethex+0x2a0>
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d024      	beq.n	800bf70 <__gethex+0x2a8>
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d115      	bne.n	800bf56 <__gethex+0x28e>
 800bf2a:	42ae      	cmp	r6, r5
 800bf2c:	d113      	bne.n	800bf56 <__gethex+0x28e>
 800bf2e:	2e01      	cmp	r6, #1
 800bf30:	d10b      	bne.n	800bf4a <__gethex+0x282>
 800bf32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf36:	9a02      	ldr	r2, [sp, #8]
 800bf38:	2562      	movs	r5, #98	@ 0x62
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	f8ca 3000 	str.w	r3, [sl]
 800bf44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf46:	601c      	str	r4, [r3, #0]
 800bf48:	e73a      	b.n	800bdc0 <__gethex+0xf8>
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	1e71      	subs	r1, r6, #1
 800bf4e:	f001 f8d8 	bl	800d102 <__any_on>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d1ed      	bne.n	800bf32 <__gethex+0x26a>
 800bf56:	4621      	mov	r1, r4
 800bf58:	9801      	ldr	r0, [sp, #4]
 800bf5a:	f000 fc8d 	bl	800c878 <_Bfree>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf62:	2550      	movs	r5, #80	@ 0x50
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	e72b      	b.n	800bdc0 <__gethex+0xf8>
 800bf68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1f3      	bne.n	800bf56 <__gethex+0x28e>
 800bf6e:	e7e0      	b.n	800bf32 <__gethex+0x26a>
 800bf70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1dd      	bne.n	800bf32 <__gethex+0x26a>
 800bf76:	e7ee      	b.n	800bf56 <__gethex+0x28e>
 800bf78:	0800da6b 	.word	0x0800da6b
 800bf7c:	0800dc45 	.word	0x0800dc45
 800bf80:	0800dc56 	.word	0x0800dc56
 800bf84:	1e6f      	subs	r7, r5, #1
 800bf86:	f1b9 0f00 	cmp.w	r9, #0
 800bf8a:	d130      	bne.n	800bfee <__gethex+0x326>
 800bf8c:	b127      	cbz	r7, 800bf98 <__gethex+0x2d0>
 800bf8e:	4639      	mov	r1, r7
 800bf90:	4620      	mov	r0, r4
 800bf92:	f001 f8b6 	bl	800d102 <__any_on>
 800bf96:	4681      	mov	r9, r0
 800bf98:	2301      	movs	r3, #1
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	1b76      	subs	r6, r6, r5
 800bf9e:	2502      	movs	r5, #2
 800bfa0:	117a      	asrs	r2, r7, #5
 800bfa2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bfa6:	f007 071f 	and.w	r7, r7, #31
 800bfaa:	40bb      	lsls	r3, r7
 800bfac:	4213      	tst	r3, r2
 800bfae:	4620      	mov	r0, r4
 800bfb0:	bf18      	it	ne
 800bfb2:	f049 0902 	orrne.w	r9, r9, #2
 800bfb6:	f7ff fe1f 	bl	800bbf8 <rshift>
 800bfba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bfbe:	f1b9 0f00 	cmp.w	r9, #0
 800bfc2:	d047      	beq.n	800c054 <__gethex+0x38c>
 800bfc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	d015      	beq.n	800bff8 <__gethex+0x330>
 800bfcc:	2b03      	cmp	r3, #3
 800bfce:	d017      	beq.n	800c000 <__gethex+0x338>
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d109      	bne.n	800bfe8 <__gethex+0x320>
 800bfd4:	f019 0f02 	tst.w	r9, #2
 800bfd8:	d006      	beq.n	800bfe8 <__gethex+0x320>
 800bfda:	f8da 3000 	ldr.w	r3, [sl]
 800bfde:	ea49 0903 	orr.w	r9, r9, r3
 800bfe2:	f019 0f01 	tst.w	r9, #1
 800bfe6:	d10e      	bne.n	800c006 <__gethex+0x33e>
 800bfe8:	f045 0510 	orr.w	r5, r5, #16
 800bfec:	e032      	b.n	800c054 <__gethex+0x38c>
 800bfee:	f04f 0901 	mov.w	r9, #1
 800bff2:	e7d1      	b.n	800bf98 <__gethex+0x2d0>
 800bff4:	2501      	movs	r5, #1
 800bff6:	e7e2      	b.n	800bfbe <__gethex+0x2f6>
 800bff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bffa:	f1c3 0301 	rsb	r3, r3, #1
 800bffe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c002:	2b00      	cmp	r3, #0
 800c004:	d0f0      	beq.n	800bfe8 <__gethex+0x320>
 800c006:	f04f 0c00 	mov.w	ip, #0
 800c00a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c00e:	f104 0314 	add.w	r3, r4, #20
 800c012:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c016:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c020:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c024:	d01b      	beq.n	800c05e <__gethex+0x396>
 800c026:	3201      	adds	r2, #1
 800c028:	6002      	str	r2, [r0, #0]
 800c02a:	2d02      	cmp	r5, #2
 800c02c:	f104 0314 	add.w	r3, r4, #20
 800c030:	d13c      	bne.n	800c0ac <__gethex+0x3e4>
 800c032:	f8d8 2000 	ldr.w	r2, [r8]
 800c036:	3a01      	subs	r2, #1
 800c038:	42b2      	cmp	r2, r6
 800c03a:	d109      	bne.n	800c050 <__gethex+0x388>
 800c03c:	2201      	movs	r2, #1
 800c03e:	1171      	asrs	r1, r6, #5
 800c040:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c044:	f006 061f 	and.w	r6, r6, #31
 800c048:	fa02 f606 	lsl.w	r6, r2, r6
 800c04c:	421e      	tst	r6, r3
 800c04e:	d13a      	bne.n	800c0c6 <__gethex+0x3fe>
 800c050:	f045 0520 	orr.w	r5, r5, #32
 800c054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c056:	601c      	str	r4, [r3, #0]
 800c058:	9b02      	ldr	r3, [sp, #8]
 800c05a:	601f      	str	r7, [r3, #0]
 800c05c:	e6b0      	b.n	800bdc0 <__gethex+0xf8>
 800c05e:	4299      	cmp	r1, r3
 800c060:	f843 cc04 	str.w	ip, [r3, #-4]
 800c064:	d8d9      	bhi.n	800c01a <__gethex+0x352>
 800c066:	68a3      	ldr	r3, [r4, #8]
 800c068:	459b      	cmp	fp, r3
 800c06a:	db17      	blt.n	800c09c <__gethex+0x3d4>
 800c06c:	6861      	ldr	r1, [r4, #4]
 800c06e:	9801      	ldr	r0, [sp, #4]
 800c070:	3101      	adds	r1, #1
 800c072:	f000 fbc1 	bl	800c7f8 <_Balloc>
 800c076:	4681      	mov	r9, r0
 800c078:	b918      	cbnz	r0, 800c082 <__gethex+0x3ba>
 800c07a:	4602      	mov	r2, r0
 800c07c:	2184      	movs	r1, #132	@ 0x84
 800c07e:	4b19      	ldr	r3, [pc, #100]	@ (800c0e4 <__gethex+0x41c>)
 800c080:	e6c5      	b.n	800be0e <__gethex+0x146>
 800c082:	6922      	ldr	r2, [r4, #16]
 800c084:	f104 010c 	add.w	r1, r4, #12
 800c088:	3202      	adds	r2, #2
 800c08a:	0092      	lsls	r2, r2, #2
 800c08c:	300c      	adds	r0, #12
 800c08e:	f7fe ff48 	bl	800af22 <memcpy>
 800c092:	4621      	mov	r1, r4
 800c094:	9801      	ldr	r0, [sp, #4]
 800c096:	f000 fbef 	bl	800c878 <_Bfree>
 800c09a:	464c      	mov	r4, r9
 800c09c:	6923      	ldr	r3, [r4, #16]
 800c09e:	1c5a      	adds	r2, r3, #1
 800c0a0:	6122      	str	r2, [r4, #16]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0a8:	615a      	str	r2, [r3, #20]
 800c0aa:	e7be      	b.n	800c02a <__gethex+0x362>
 800c0ac:	6922      	ldr	r2, [r4, #16]
 800c0ae:	455a      	cmp	r2, fp
 800c0b0:	dd0b      	ble.n	800c0ca <__gethex+0x402>
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f7ff fd9f 	bl	800bbf8 <rshift>
 800c0ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0be:	3701      	adds	r7, #1
 800c0c0:	42bb      	cmp	r3, r7
 800c0c2:	f6ff aee0 	blt.w	800be86 <__gethex+0x1be>
 800c0c6:	2501      	movs	r5, #1
 800c0c8:	e7c2      	b.n	800c050 <__gethex+0x388>
 800c0ca:	f016 061f 	ands.w	r6, r6, #31
 800c0ce:	d0fa      	beq.n	800c0c6 <__gethex+0x3fe>
 800c0d0:	4453      	add	r3, sl
 800c0d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c0d6:	f000 fc81 	bl	800c9dc <__hi0bits>
 800c0da:	f1c6 0620 	rsb	r6, r6, #32
 800c0de:	42b0      	cmp	r0, r6
 800c0e0:	dbe7      	blt.n	800c0b2 <__gethex+0x3ea>
 800c0e2:	e7f0      	b.n	800c0c6 <__gethex+0x3fe>
 800c0e4:	0800dc45 	.word	0x0800dc45

0800c0e8 <L_shift>:
 800c0e8:	f1c2 0208 	rsb	r2, r2, #8
 800c0ec:	0092      	lsls	r2, r2, #2
 800c0ee:	b570      	push	{r4, r5, r6, lr}
 800c0f0:	f1c2 0620 	rsb	r6, r2, #32
 800c0f4:	6843      	ldr	r3, [r0, #4]
 800c0f6:	6804      	ldr	r4, [r0, #0]
 800c0f8:	fa03 f506 	lsl.w	r5, r3, r6
 800c0fc:	432c      	orrs	r4, r5
 800c0fe:	40d3      	lsrs	r3, r2
 800c100:	6004      	str	r4, [r0, #0]
 800c102:	f840 3f04 	str.w	r3, [r0, #4]!
 800c106:	4288      	cmp	r0, r1
 800c108:	d3f4      	bcc.n	800c0f4 <L_shift+0xc>
 800c10a:	bd70      	pop	{r4, r5, r6, pc}

0800c10c <__match>:
 800c10c:	b530      	push	{r4, r5, lr}
 800c10e:	6803      	ldr	r3, [r0, #0]
 800c110:	3301      	adds	r3, #1
 800c112:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c116:	b914      	cbnz	r4, 800c11e <__match+0x12>
 800c118:	6003      	str	r3, [r0, #0]
 800c11a:	2001      	movs	r0, #1
 800c11c:	bd30      	pop	{r4, r5, pc}
 800c11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c122:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c126:	2d19      	cmp	r5, #25
 800c128:	bf98      	it	ls
 800c12a:	3220      	addls	r2, #32
 800c12c:	42a2      	cmp	r2, r4
 800c12e:	d0f0      	beq.n	800c112 <__match+0x6>
 800c130:	2000      	movs	r0, #0
 800c132:	e7f3      	b.n	800c11c <__match+0x10>

0800c134 <__hexnan>:
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	2500      	movs	r5, #0
 800c13a:	680b      	ldr	r3, [r1, #0]
 800c13c:	4682      	mov	sl, r0
 800c13e:	115e      	asrs	r6, r3, #5
 800c140:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c144:	f013 031f 	ands.w	r3, r3, #31
 800c148:	bf18      	it	ne
 800c14a:	3604      	addne	r6, #4
 800c14c:	1f37      	subs	r7, r6, #4
 800c14e:	4690      	mov	r8, r2
 800c150:	46b9      	mov	r9, r7
 800c152:	463c      	mov	r4, r7
 800c154:	46ab      	mov	fp, r5
 800c156:	b087      	sub	sp, #28
 800c158:	6801      	ldr	r1, [r0, #0]
 800c15a:	9301      	str	r3, [sp, #4]
 800c15c:	f846 5c04 	str.w	r5, [r6, #-4]
 800c160:	9502      	str	r5, [sp, #8]
 800c162:	784a      	ldrb	r2, [r1, #1]
 800c164:	1c4b      	adds	r3, r1, #1
 800c166:	9303      	str	r3, [sp, #12]
 800c168:	b342      	cbz	r2, 800c1bc <__hexnan+0x88>
 800c16a:	4610      	mov	r0, r2
 800c16c:	9105      	str	r1, [sp, #20]
 800c16e:	9204      	str	r2, [sp, #16]
 800c170:	f7ff fd95 	bl	800bc9e <__hexdig_fun>
 800c174:	2800      	cmp	r0, #0
 800c176:	d151      	bne.n	800c21c <__hexnan+0xe8>
 800c178:	9a04      	ldr	r2, [sp, #16]
 800c17a:	9905      	ldr	r1, [sp, #20]
 800c17c:	2a20      	cmp	r2, #32
 800c17e:	d818      	bhi.n	800c1b2 <__hexnan+0x7e>
 800c180:	9b02      	ldr	r3, [sp, #8]
 800c182:	459b      	cmp	fp, r3
 800c184:	dd13      	ble.n	800c1ae <__hexnan+0x7a>
 800c186:	454c      	cmp	r4, r9
 800c188:	d206      	bcs.n	800c198 <__hexnan+0x64>
 800c18a:	2d07      	cmp	r5, #7
 800c18c:	dc04      	bgt.n	800c198 <__hexnan+0x64>
 800c18e:	462a      	mov	r2, r5
 800c190:	4649      	mov	r1, r9
 800c192:	4620      	mov	r0, r4
 800c194:	f7ff ffa8 	bl	800c0e8 <L_shift>
 800c198:	4544      	cmp	r4, r8
 800c19a:	d952      	bls.n	800c242 <__hexnan+0x10e>
 800c19c:	2300      	movs	r3, #0
 800c19e:	f1a4 0904 	sub.w	r9, r4, #4
 800c1a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1a6:	461d      	mov	r5, r3
 800c1a8:	464c      	mov	r4, r9
 800c1aa:	f8cd b008 	str.w	fp, [sp, #8]
 800c1ae:	9903      	ldr	r1, [sp, #12]
 800c1b0:	e7d7      	b.n	800c162 <__hexnan+0x2e>
 800c1b2:	2a29      	cmp	r2, #41	@ 0x29
 800c1b4:	d157      	bne.n	800c266 <__hexnan+0x132>
 800c1b6:	3102      	adds	r1, #2
 800c1b8:	f8ca 1000 	str.w	r1, [sl]
 800c1bc:	f1bb 0f00 	cmp.w	fp, #0
 800c1c0:	d051      	beq.n	800c266 <__hexnan+0x132>
 800c1c2:	454c      	cmp	r4, r9
 800c1c4:	d206      	bcs.n	800c1d4 <__hexnan+0xa0>
 800c1c6:	2d07      	cmp	r5, #7
 800c1c8:	dc04      	bgt.n	800c1d4 <__hexnan+0xa0>
 800c1ca:	462a      	mov	r2, r5
 800c1cc:	4649      	mov	r1, r9
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f7ff ff8a 	bl	800c0e8 <L_shift>
 800c1d4:	4544      	cmp	r4, r8
 800c1d6:	d936      	bls.n	800c246 <__hexnan+0x112>
 800c1d8:	4623      	mov	r3, r4
 800c1da:	f1a8 0204 	sub.w	r2, r8, #4
 800c1de:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1e2:	429f      	cmp	r7, r3
 800c1e4:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1e8:	d2f9      	bcs.n	800c1de <__hexnan+0xaa>
 800c1ea:	1b3b      	subs	r3, r7, r4
 800c1ec:	f023 0303 	bic.w	r3, r3, #3
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	3401      	adds	r4, #1
 800c1f4:	3e03      	subs	r6, #3
 800c1f6:	42b4      	cmp	r4, r6
 800c1f8:	bf88      	it	hi
 800c1fa:	2304      	movhi	r3, #4
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	4443      	add	r3, r8
 800c200:	f843 2b04 	str.w	r2, [r3], #4
 800c204:	429f      	cmp	r7, r3
 800c206:	d2fb      	bcs.n	800c200 <__hexnan+0xcc>
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	b91b      	cbnz	r3, 800c214 <__hexnan+0xe0>
 800c20c:	4547      	cmp	r7, r8
 800c20e:	d128      	bne.n	800c262 <__hexnan+0x12e>
 800c210:	2301      	movs	r3, #1
 800c212:	603b      	str	r3, [r7, #0]
 800c214:	2005      	movs	r0, #5
 800c216:	b007      	add	sp, #28
 800c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21c:	3501      	adds	r5, #1
 800c21e:	2d08      	cmp	r5, #8
 800c220:	f10b 0b01 	add.w	fp, fp, #1
 800c224:	dd06      	ble.n	800c234 <__hexnan+0x100>
 800c226:	4544      	cmp	r4, r8
 800c228:	d9c1      	bls.n	800c1ae <__hexnan+0x7a>
 800c22a:	2300      	movs	r3, #0
 800c22c:	2501      	movs	r5, #1
 800c22e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c232:	3c04      	subs	r4, #4
 800c234:	6822      	ldr	r2, [r4, #0]
 800c236:	f000 000f 	and.w	r0, r0, #15
 800c23a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c23e:	6020      	str	r0, [r4, #0]
 800c240:	e7b5      	b.n	800c1ae <__hexnan+0x7a>
 800c242:	2508      	movs	r5, #8
 800c244:	e7b3      	b.n	800c1ae <__hexnan+0x7a>
 800c246:	9b01      	ldr	r3, [sp, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0dd      	beq.n	800c208 <__hexnan+0xd4>
 800c24c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c250:	f1c3 0320 	rsb	r3, r3, #32
 800c254:	40da      	lsrs	r2, r3
 800c256:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c25a:	4013      	ands	r3, r2
 800c25c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c260:	e7d2      	b.n	800c208 <__hexnan+0xd4>
 800c262:	3f04      	subs	r7, #4
 800c264:	e7d0      	b.n	800c208 <__hexnan+0xd4>
 800c266:	2004      	movs	r0, #4
 800c268:	e7d5      	b.n	800c216 <__hexnan+0xe2>

0800c26a <__ssputs_r>:
 800c26a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c26e:	461f      	mov	r7, r3
 800c270:	688e      	ldr	r6, [r1, #8]
 800c272:	4682      	mov	sl, r0
 800c274:	42be      	cmp	r6, r7
 800c276:	460c      	mov	r4, r1
 800c278:	4690      	mov	r8, r2
 800c27a:	680b      	ldr	r3, [r1, #0]
 800c27c:	d82d      	bhi.n	800c2da <__ssputs_r+0x70>
 800c27e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c282:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c286:	d026      	beq.n	800c2d6 <__ssputs_r+0x6c>
 800c288:	6965      	ldr	r5, [r4, #20]
 800c28a:	6909      	ldr	r1, [r1, #16]
 800c28c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c290:	eba3 0901 	sub.w	r9, r3, r1
 800c294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c298:	1c7b      	adds	r3, r7, #1
 800c29a:	444b      	add	r3, r9
 800c29c:	106d      	asrs	r5, r5, #1
 800c29e:	429d      	cmp	r5, r3
 800c2a0:	bf38      	it	cc
 800c2a2:	461d      	movcc	r5, r3
 800c2a4:	0553      	lsls	r3, r2, #21
 800c2a6:	d527      	bpl.n	800c2f8 <__ssputs_r+0x8e>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f000 f95f 	bl	800c56c <_malloc_r>
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	b360      	cbz	r0, 800c30c <__ssputs_r+0xa2>
 800c2b2:	464a      	mov	r2, r9
 800c2b4:	6921      	ldr	r1, [r4, #16]
 800c2b6:	f7fe fe34 	bl	800af22 <memcpy>
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c2c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c4:	81a3      	strh	r3, [r4, #12]
 800c2c6:	6126      	str	r6, [r4, #16]
 800c2c8:	444e      	add	r6, r9
 800c2ca:	6026      	str	r6, [r4, #0]
 800c2cc:	463e      	mov	r6, r7
 800c2ce:	6165      	str	r5, [r4, #20]
 800c2d0:	eba5 0509 	sub.w	r5, r5, r9
 800c2d4:	60a5      	str	r5, [r4, #8]
 800c2d6:	42be      	cmp	r6, r7
 800c2d8:	d900      	bls.n	800c2dc <__ssputs_r+0x72>
 800c2da:	463e      	mov	r6, r7
 800c2dc:	4632      	mov	r2, r6
 800c2de:	4641      	mov	r1, r8
 800c2e0:	6820      	ldr	r0, [r4, #0]
 800c2e2:	f000 ffad 	bl	800d240 <memmove>
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	68a3      	ldr	r3, [r4, #8]
 800c2ea:	1b9b      	subs	r3, r3, r6
 800c2ec:	60a3      	str	r3, [r4, #8]
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	4433      	add	r3, r6
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	f000 ff66 	bl	800d1ca <_realloc_r>
 800c2fe:	4606      	mov	r6, r0
 800c300:	2800      	cmp	r0, #0
 800c302:	d1e0      	bne.n	800c2c6 <__ssputs_r+0x5c>
 800c304:	4650      	mov	r0, sl
 800c306:	6921      	ldr	r1, [r4, #16]
 800c308:	f001 f83c 	bl	800d384 <_free_r>
 800c30c:	230c      	movs	r3, #12
 800c30e:	f8ca 3000 	str.w	r3, [sl]
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c31c:	81a3      	strh	r3, [r4, #12]
 800c31e:	e7e9      	b.n	800c2f4 <__ssputs_r+0x8a>

0800c320 <_svfiprintf_r>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	4698      	mov	r8, r3
 800c326:	898b      	ldrh	r3, [r1, #12]
 800c328:	4607      	mov	r7, r0
 800c32a:	061b      	lsls	r3, r3, #24
 800c32c:	460d      	mov	r5, r1
 800c32e:	4614      	mov	r4, r2
 800c330:	b09d      	sub	sp, #116	@ 0x74
 800c332:	d510      	bpl.n	800c356 <_svfiprintf_r+0x36>
 800c334:	690b      	ldr	r3, [r1, #16]
 800c336:	b973      	cbnz	r3, 800c356 <_svfiprintf_r+0x36>
 800c338:	2140      	movs	r1, #64	@ 0x40
 800c33a:	f000 f917 	bl	800c56c <_malloc_r>
 800c33e:	6028      	str	r0, [r5, #0]
 800c340:	6128      	str	r0, [r5, #16]
 800c342:	b930      	cbnz	r0, 800c352 <_svfiprintf_r+0x32>
 800c344:	230c      	movs	r3, #12
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c34c:	b01d      	add	sp, #116	@ 0x74
 800c34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c352:	2340      	movs	r3, #64	@ 0x40
 800c354:	616b      	str	r3, [r5, #20]
 800c356:	2300      	movs	r3, #0
 800c358:	9309      	str	r3, [sp, #36]	@ 0x24
 800c35a:	2320      	movs	r3, #32
 800c35c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c360:	2330      	movs	r3, #48	@ 0x30
 800c362:	f04f 0901 	mov.w	r9, #1
 800c366:	f8cd 800c 	str.w	r8, [sp, #12]
 800c36a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c504 <_svfiprintf_r+0x1e4>
 800c36e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c372:	4623      	mov	r3, r4
 800c374:	469a      	mov	sl, r3
 800c376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c37a:	b10a      	cbz	r2, 800c380 <_svfiprintf_r+0x60>
 800c37c:	2a25      	cmp	r2, #37	@ 0x25
 800c37e:	d1f9      	bne.n	800c374 <_svfiprintf_r+0x54>
 800c380:	ebba 0b04 	subs.w	fp, sl, r4
 800c384:	d00b      	beq.n	800c39e <_svfiprintf_r+0x7e>
 800c386:	465b      	mov	r3, fp
 800c388:	4622      	mov	r2, r4
 800c38a:	4629      	mov	r1, r5
 800c38c:	4638      	mov	r0, r7
 800c38e:	f7ff ff6c 	bl	800c26a <__ssputs_r>
 800c392:	3001      	adds	r0, #1
 800c394:	f000 80a7 	beq.w	800c4e6 <_svfiprintf_r+0x1c6>
 800c398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c39a:	445a      	add	r2, fp
 800c39c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c39e:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 809f 	beq.w	800c4e6 <_svfiprintf_r+0x1c6>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3b2:	f10a 0a01 	add.w	sl, sl, #1
 800c3b6:	9304      	str	r3, [sp, #16]
 800c3b8:	9307      	str	r3, [sp, #28]
 800c3ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3be:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3c0:	4654      	mov	r4, sl
 800c3c2:	2205      	movs	r2, #5
 800c3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c8:	484e      	ldr	r0, [pc, #312]	@ (800c504 <_svfiprintf_r+0x1e4>)
 800c3ca:	f7fe fd9c 	bl	800af06 <memchr>
 800c3ce:	9a04      	ldr	r2, [sp, #16]
 800c3d0:	b9d8      	cbnz	r0, 800c40a <_svfiprintf_r+0xea>
 800c3d2:	06d0      	lsls	r0, r2, #27
 800c3d4:	bf44      	itt	mi
 800c3d6:	2320      	movmi	r3, #32
 800c3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3dc:	0711      	lsls	r1, r2, #28
 800c3de:	bf44      	itt	mi
 800c3e0:	232b      	movmi	r3, #43	@ 0x2b
 800c3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ec:	d015      	beq.n	800c41a <_svfiprintf_r+0xfa>
 800c3ee:	4654      	mov	r4, sl
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	f04f 0c0a 	mov.w	ip, #10
 800c3f6:	9a07      	ldr	r2, [sp, #28]
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3fe:	3b30      	subs	r3, #48	@ 0x30
 800c400:	2b09      	cmp	r3, #9
 800c402:	d94b      	bls.n	800c49c <_svfiprintf_r+0x17c>
 800c404:	b1b0      	cbz	r0, 800c434 <_svfiprintf_r+0x114>
 800c406:	9207      	str	r2, [sp, #28]
 800c408:	e014      	b.n	800c434 <_svfiprintf_r+0x114>
 800c40a:	eba0 0308 	sub.w	r3, r0, r8
 800c40e:	fa09 f303 	lsl.w	r3, r9, r3
 800c412:	4313      	orrs	r3, r2
 800c414:	46a2      	mov	sl, r4
 800c416:	9304      	str	r3, [sp, #16]
 800c418:	e7d2      	b.n	800c3c0 <_svfiprintf_r+0xa0>
 800c41a:	9b03      	ldr	r3, [sp, #12]
 800c41c:	1d19      	adds	r1, r3, #4
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	9103      	str	r1, [sp, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	bfbb      	ittet	lt
 800c426:	425b      	neglt	r3, r3
 800c428:	f042 0202 	orrlt.w	r2, r2, #2
 800c42c:	9307      	strge	r3, [sp, #28]
 800c42e:	9307      	strlt	r3, [sp, #28]
 800c430:	bfb8      	it	lt
 800c432:	9204      	strlt	r2, [sp, #16]
 800c434:	7823      	ldrb	r3, [r4, #0]
 800c436:	2b2e      	cmp	r3, #46	@ 0x2e
 800c438:	d10a      	bne.n	800c450 <_svfiprintf_r+0x130>
 800c43a:	7863      	ldrb	r3, [r4, #1]
 800c43c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c43e:	d132      	bne.n	800c4a6 <_svfiprintf_r+0x186>
 800c440:	9b03      	ldr	r3, [sp, #12]
 800c442:	3402      	adds	r4, #2
 800c444:	1d1a      	adds	r2, r3, #4
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	9203      	str	r2, [sp, #12]
 800c44a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c44e:	9305      	str	r3, [sp, #20]
 800c450:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c508 <_svfiprintf_r+0x1e8>
 800c454:	2203      	movs	r2, #3
 800c456:	4650      	mov	r0, sl
 800c458:	7821      	ldrb	r1, [r4, #0]
 800c45a:	f7fe fd54 	bl	800af06 <memchr>
 800c45e:	b138      	cbz	r0, 800c470 <_svfiprintf_r+0x150>
 800c460:	2240      	movs	r2, #64	@ 0x40
 800c462:	9b04      	ldr	r3, [sp, #16]
 800c464:	eba0 000a 	sub.w	r0, r0, sl
 800c468:	4082      	lsls	r2, r0
 800c46a:	4313      	orrs	r3, r2
 800c46c:	3401      	adds	r4, #1
 800c46e:	9304      	str	r3, [sp, #16]
 800c470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c474:	2206      	movs	r2, #6
 800c476:	4825      	ldr	r0, [pc, #148]	@ (800c50c <_svfiprintf_r+0x1ec>)
 800c478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c47c:	f7fe fd43 	bl	800af06 <memchr>
 800c480:	2800      	cmp	r0, #0
 800c482:	d036      	beq.n	800c4f2 <_svfiprintf_r+0x1d2>
 800c484:	4b22      	ldr	r3, [pc, #136]	@ (800c510 <_svfiprintf_r+0x1f0>)
 800c486:	bb1b      	cbnz	r3, 800c4d0 <_svfiprintf_r+0x1b0>
 800c488:	9b03      	ldr	r3, [sp, #12]
 800c48a:	3307      	adds	r3, #7
 800c48c:	f023 0307 	bic.w	r3, r3, #7
 800c490:	3308      	adds	r3, #8
 800c492:	9303      	str	r3, [sp, #12]
 800c494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c496:	4433      	add	r3, r6
 800c498:	9309      	str	r3, [sp, #36]	@ 0x24
 800c49a:	e76a      	b.n	800c372 <_svfiprintf_r+0x52>
 800c49c:	460c      	mov	r4, r1
 800c49e:	2001      	movs	r0, #1
 800c4a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4a4:	e7a8      	b.n	800c3f8 <_svfiprintf_r+0xd8>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	f04f 0c0a 	mov.w	ip, #10
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	3401      	adds	r4, #1
 800c4b0:	9305      	str	r3, [sp, #20]
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b8:	3a30      	subs	r2, #48	@ 0x30
 800c4ba:	2a09      	cmp	r2, #9
 800c4bc:	d903      	bls.n	800c4c6 <_svfiprintf_r+0x1a6>
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d0c6      	beq.n	800c450 <_svfiprintf_r+0x130>
 800c4c2:	9105      	str	r1, [sp, #20]
 800c4c4:	e7c4      	b.n	800c450 <_svfiprintf_r+0x130>
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4ce:	e7f0      	b.n	800c4b2 <_svfiprintf_r+0x192>
 800c4d0:	ab03      	add	r3, sp, #12
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	462a      	mov	r2, r5
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c514 <_svfiprintf_r+0x1f4>)
 800c4da:	a904      	add	r1, sp, #16
 800c4dc:	f7fc ff9c 	bl	8009418 <_printf_float>
 800c4e0:	1c42      	adds	r2, r0, #1
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	d1d6      	bne.n	800c494 <_svfiprintf_r+0x174>
 800c4e6:	89ab      	ldrh	r3, [r5, #12]
 800c4e8:	065b      	lsls	r3, r3, #25
 800c4ea:	f53f af2d 	bmi.w	800c348 <_svfiprintf_r+0x28>
 800c4ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4f0:	e72c      	b.n	800c34c <_svfiprintf_r+0x2c>
 800c4f2:	ab03      	add	r3, sp, #12
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	462a      	mov	r2, r5
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	4b06      	ldr	r3, [pc, #24]	@ (800c514 <_svfiprintf_r+0x1f4>)
 800c4fc:	a904      	add	r1, sp, #16
 800c4fe:	f7fd fa29 	bl	8009954 <_printf_i>
 800c502:	e7ed      	b.n	800c4e0 <_svfiprintf_r+0x1c0>
 800c504:	0800dcb6 	.word	0x0800dcb6
 800c508:	0800dcbc 	.word	0x0800dcbc
 800c50c:	0800dcc0 	.word	0x0800dcc0
 800c510:	08009419 	.word	0x08009419
 800c514:	0800c26b 	.word	0x0800c26b

0800c518 <malloc>:
 800c518:	4b02      	ldr	r3, [pc, #8]	@ (800c524 <malloc+0xc>)
 800c51a:	4601      	mov	r1, r0
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	f000 b825 	b.w	800c56c <_malloc_r>
 800c522:	bf00      	nop
 800c524:	200002f4 	.word	0x200002f4

0800c528 <sbrk_aligned>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	4e0f      	ldr	r6, [pc, #60]	@ (800c568 <sbrk_aligned+0x40>)
 800c52c:	460c      	mov	r4, r1
 800c52e:	6831      	ldr	r1, [r6, #0]
 800c530:	4605      	mov	r5, r0
 800c532:	b911      	cbnz	r1, 800c53a <sbrk_aligned+0x12>
 800c534:	f000 fed2 	bl	800d2dc <_sbrk_r>
 800c538:	6030      	str	r0, [r6, #0]
 800c53a:	4621      	mov	r1, r4
 800c53c:	4628      	mov	r0, r5
 800c53e:	f000 fecd 	bl	800d2dc <_sbrk_r>
 800c542:	1c43      	adds	r3, r0, #1
 800c544:	d103      	bne.n	800c54e <sbrk_aligned+0x26>
 800c546:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c54a:	4620      	mov	r0, r4
 800c54c:	bd70      	pop	{r4, r5, r6, pc}
 800c54e:	1cc4      	adds	r4, r0, #3
 800c550:	f024 0403 	bic.w	r4, r4, #3
 800c554:	42a0      	cmp	r0, r4
 800c556:	d0f8      	beq.n	800c54a <sbrk_aligned+0x22>
 800c558:	1a21      	subs	r1, r4, r0
 800c55a:	4628      	mov	r0, r5
 800c55c:	f000 febe 	bl	800d2dc <_sbrk_r>
 800c560:	3001      	adds	r0, #1
 800c562:	d1f2      	bne.n	800c54a <sbrk_aligned+0x22>
 800c564:	e7ef      	b.n	800c546 <sbrk_aligned+0x1e>
 800c566:	bf00      	nop
 800c568:	2000171c 	.word	0x2000171c

0800c56c <_malloc_r>:
 800c56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c570:	1ccd      	adds	r5, r1, #3
 800c572:	f025 0503 	bic.w	r5, r5, #3
 800c576:	3508      	adds	r5, #8
 800c578:	2d0c      	cmp	r5, #12
 800c57a:	bf38      	it	cc
 800c57c:	250c      	movcc	r5, #12
 800c57e:	2d00      	cmp	r5, #0
 800c580:	4606      	mov	r6, r0
 800c582:	db01      	blt.n	800c588 <_malloc_r+0x1c>
 800c584:	42a9      	cmp	r1, r5
 800c586:	d904      	bls.n	800c592 <_malloc_r+0x26>
 800c588:	230c      	movs	r3, #12
 800c58a:	6033      	str	r3, [r6, #0]
 800c58c:	2000      	movs	r0, #0
 800c58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c668 <_malloc_r+0xfc>
 800c596:	f000 f923 	bl	800c7e0 <__malloc_lock>
 800c59a:	f8d8 3000 	ldr.w	r3, [r8]
 800c59e:	461c      	mov	r4, r3
 800c5a0:	bb44      	cbnz	r4, 800c5f4 <_malloc_r+0x88>
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7ff ffbf 	bl	800c528 <sbrk_aligned>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	d158      	bne.n	800c662 <_malloc_r+0xf6>
 800c5b0:	f8d8 4000 	ldr.w	r4, [r8]
 800c5b4:	4627      	mov	r7, r4
 800c5b6:	2f00      	cmp	r7, #0
 800c5b8:	d143      	bne.n	800c642 <_malloc_r+0xd6>
 800c5ba:	2c00      	cmp	r4, #0
 800c5bc:	d04b      	beq.n	800c656 <_malloc_r+0xea>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	4639      	mov	r1, r7
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	eb04 0903 	add.w	r9, r4, r3
 800c5c8:	f000 fe88 	bl	800d2dc <_sbrk_r>
 800c5cc:	4581      	cmp	r9, r0
 800c5ce:	d142      	bne.n	800c656 <_malloc_r+0xea>
 800c5d0:	6821      	ldr	r1, [r4, #0]
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	1a6d      	subs	r5, r5, r1
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7ff ffa6 	bl	800c528 <sbrk_aligned>
 800c5dc:	3001      	adds	r0, #1
 800c5de:	d03a      	beq.n	800c656 <_malloc_r+0xea>
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	442b      	add	r3, r5
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	bb62      	cbnz	r2, 800c648 <_malloc_r+0xdc>
 800c5ee:	f8c8 7000 	str.w	r7, [r8]
 800c5f2:	e00f      	b.n	800c614 <_malloc_r+0xa8>
 800c5f4:	6822      	ldr	r2, [r4, #0]
 800c5f6:	1b52      	subs	r2, r2, r5
 800c5f8:	d420      	bmi.n	800c63c <_malloc_r+0xd0>
 800c5fa:	2a0b      	cmp	r2, #11
 800c5fc:	d917      	bls.n	800c62e <_malloc_r+0xc2>
 800c5fe:	1961      	adds	r1, r4, r5
 800c600:	42a3      	cmp	r3, r4
 800c602:	6025      	str	r5, [r4, #0]
 800c604:	bf18      	it	ne
 800c606:	6059      	strne	r1, [r3, #4]
 800c608:	6863      	ldr	r3, [r4, #4]
 800c60a:	bf08      	it	eq
 800c60c:	f8c8 1000 	streq.w	r1, [r8]
 800c610:	5162      	str	r2, [r4, r5]
 800c612:	604b      	str	r3, [r1, #4]
 800c614:	4630      	mov	r0, r6
 800c616:	f000 f8e9 	bl	800c7ec <__malloc_unlock>
 800c61a:	f104 000b 	add.w	r0, r4, #11
 800c61e:	1d23      	adds	r3, r4, #4
 800c620:	f020 0007 	bic.w	r0, r0, #7
 800c624:	1ac2      	subs	r2, r0, r3
 800c626:	bf1c      	itt	ne
 800c628:	1a1b      	subne	r3, r3, r0
 800c62a:	50a3      	strne	r3, [r4, r2]
 800c62c:	e7af      	b.n	800c58e <_malloc_r+0x22>
 800c62e:	6862      	ldr	r2, [r4, #4]
 800c630:	42a3      	cmp	r3, r4
 800c632:	bf0c      	ite	eq
 800c634:	f8c8 2000 	streq.w	r2, [r8]
 800c638:	605a      	strne	r2, [r3, #4]
 800c63a:	e7eb      	b.n	800c614 <_malloc_r+0xa8>
 800c63c:	4623      	mov	r3, r4
 800c63e:	6864      	ldr	r4, [r4, #4]
 800c640:	e7ae      	b.n	800c5a0 <_malloc_r+0x34>
 800c642:	463c      	mov	r4, r7
 800c644:	687f      	ldr	r7, [r7, #4]
 800c646:	e7b6      	b.n	800c5b6 <_malloc_r+0x4a>
 800c648:	461a      	mov	r2, r3
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	d1fb      	bne.n	800c648 <_malloc_r+0xdc>
 800c650:	2300      	movs	r3, #0
 800c652:	6053      	str	r3, [r2, #4]
 800c654:	e7de      	b.n	800c614 <_malloc_r+0xa8>
 800c656:	230c      	movs	r3, #12
 800c658:	4630      	mov	r0, r6
 800c65a:	6033      	str	r3, [r6, #0]
 800c65c:	f000 f8c6 	bl	800c7ec <__malloc_unlock>
 800c660:	e794      	b.n	800c58c <_malloc_r+0x20>
 800c662:	6005      	str	r5, [r0, #0]
 800c664:	e7d6      	b.n	800c614 <_malloc_r+0xa8>
 800c666:	bf00      	nop
 800c668:	20001720 	.word	0x20001720

0800c66c <__ascii_mbtowc>:
 800c66c:	b082      	sub	sp, #8
 800c66e:	b901      	cbnz	r1, 800c672 <__ascii_mbtowc+0x6>
 800c670:	a901      	add	r1, sp, #4
 800c672:	b142      	cbz	r2, 800c686 <__ascii_mbtowc+0x1a>
 800c674:	b14b      	cbz	r3, 800c68a <__ascii_mbtowc+0x1e>
 800c676:	7813      	ldrb	r3, [r2, #0]
 800c678:	600b      	str	r3, [r1, #0]
 800c67a:	7812      	ldrb	r2, [r2, #0]
 800c67c:	1e10      	subs	r0, r2, #0
 800c67e:	bf18      	it	ne
 800c680:	2001      	movne	r0, #1
 800c682:	b002      	add	sp, #8
 800c684:	4770      	bx	lr
 800c686:	4610      	mov	r0, r2
 800c688:	e7fb      	b.n	800c682 <__ascii_mbtowc+0x16>
 800c68a:	f06f 0001 	mvn.w	r0, #1
 800c68e:	e7f8      	b.n	800c682 <__ascii_mbtowc+0x16>

0800c690 <__sflush_r>:
 800c690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c696:	0716      	lsls	r6, r2, #28
 800c698:	4605      	mov	r5, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	d454      	bmi.n	800c748 <__sflush_r+0xb8>
 800c69e:	684b      	ldr	r3, [r1, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	dc02      	bgt.n	800c6aa <__sflush_r+0x1a>
 800c6a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	dd48      	ble.n	800c73c <__sflush_r+0xac>
 800c6aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6ac:	2e00      	cmp	r6, #0
 800c6ae:	d045      	beq.n	800c73c <__sflush_r+0xac>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6b6:	682f      	ldr	r7, [r5, #0]
 800c6b8:	6a21      	ldr	r1, [r4, #32]
 800c6ba:	602b      	str	r3, [r5, #0]
 800c6bc:	d030      	beq.n	800c720 <__sflush_r+0x90>
 800c6be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	0759      	lsls	r1, r3, #29
 800c6c4:	d505      	bpl.n	800c6d2 <__sflush_r+0x42>
 800c6c6:	6863      	ldr	r3, [r4, #4]
 800c6c8:	1ad2      	subs	r2, r2, r3
 800c6ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6cc:	b10b      	cbz	r3, 800c6d2 <__sflush_r+0x42>
 800c6ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6d0:	1ad2      	subs	r2, r2, r3
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6d8:	6a21      	ldr	r1, [r4, #32]
 800c6da:	47b0      	blx	r6
 800c6dc:	1c43      	adds	r3, r0, #1
 800c6de:	89a3      	ldrh	r3, [r4, #12]
 800c6e0:	d106      	bne.n	800c6f0 <__sflush_r+0x60>
 800c6e2:	6829      	ldr	r1, [r5, #0]
 800c6e4:	291d      	cmp	r1, #29
 800c6e6:	d82b      	bhi.n	800c740 <__sflush_r+0xb0>
 800c6e8:	4a28      	ldr	r2, [pc, #160]	@ (800c78c <__sflush_r+0xfc>)
 800c6ea:	410a      	asrs	r2, r1
 800c6ec:	07d6      	lsls	r6, r2, #31
 800c6ee:	d427      	bmi.n	800c740 <__sflush_r+0xb0>
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	6062      	str	r2, [r4, #4]
 800c6f4:	6922      	ldr	r2, [r4, #16]
 800c6f6:	04d9      	lsls	r1, r3, #19
 800c6f8:	6022      	str	r2, [r4, #0]
 800c6fa:	d504      	bpl.n	800c706 <__sflush_r+0x76>
 800c6fc:	1c42      	adds	r2, r0, #1
 800c6fe:	d101      	bne.n	800c704 <__sflush_r+0x74>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	b903      	cbnz	r3, 800c706 <__sflush_r+0x76>
 800c704:	6560      	str	r0, [r4, #84]	@ 0x54
 800c706:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c708:	602f      	str	r7, [r5, #0]
 800c70a:	b1b9      	cbz	r1, 800c73c <__sflush_r+0xac>
 800c70c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c710:	4299      	cmp	r1, r3
 800c712:	d002      	beq.n	800c71a <__sflush_r+0x8a>
 800c714:	4628      	mov	r0, r5
 800c716:	f000 fe35 	bl	800d384 <_free_r>
 800c71a:	2300      	movs	r3, #0
 800c71c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c71e:	e00d      	b.n	800c73c <__sflush_r+0xac>
 800c720:	2301      	movs	r3, #1
 800c722:	4628      	mov	r0, r5
 800c724:	47b0      	blx	r6
 800c726:	4602      	mov	r2, r0
 800c728:	1c50      	adds	r0, r2, #1
 800c72a:	d1c9      	bne.n	800c6c0 <__sflush_r+0x30>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d0c6      	beq.n	800c6c0 <__sflush_r+0x30>
 800c732:	2b1d      	cmp	r3, #29
 800c734:	d001      	beq.n	800c73a <__sflush_r+0xaa>
 800c736:	2b16      	cmp	r3, #22
 800c738:	d11d      	bne.n	800c776 <__sflush_r+0xe6>
 800c73a:	602f      	str	r7, [r5, #0]
 800c73c:	2000      	movs	r0, #0
 800c73e:	e021      	b.n	800c784 <__sflush_r+0xf4>
 800c740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c744:	b21b      	sxth	r3, r3
 800c746:	e01a      	b.n	800c77e <__sflush_r+0xee>
 800c748:	690f      	ldr	r7, [r1, #16]
 800c74a:	2f00      	cmp	r7, #0
 800c74c:	d0f6      	beq.n	800c73c <__sflush_r+0xac>
 800c74e:	0793      	lsls	r3, r2, #30
 800c750:	bf18      	it	ne
 800c752:	2300      	movne	r3, #0
 800c754:	680e      	ldr	r6, [r1, #0]
 800c756:	bf08      	it	eq
 800c758:	694b      	ldreq	r3, [r1, #20]
 800c75a:	1bf6      	subs	r6, r6, r7
 800c75c:	600f      	str	r7, [r1, #0]
 800c75e:	608b      	str	r3, [r1, #8]
 800c760:	2e00      	cmp	r6, #0
 800c762:	ddeb      	ble.n	800c73c <__sflush_r+0xac>
 800c764:	4633      	mov	r3, r6
 800c766:	463a      	mov	r2, r7
 800c768:	4628      	mov	r0, r5
 800c76a:	6a21      	ldr	r1, [r4, #32]
 800c76c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c770:	47e0      	blx	ip
 800c772:	2800      	cmp	r0, #0
 800c774:	dc07      	bgt.n	800c786 <__sflush_r+0xf6>
 800c776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c77a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c77e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c782:	81a3      	strh	r3, [r4, #12]
 800c784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c786:	4407      	add	r7, r0
 800c788:	1a36      	subs	r6, r6, r0
 800c78a:	e7e9      	b.n	800c760 <__sflush_r+0xd0>
 800c78c:	dfbffffe 	.word	0xdfbffffe

0800c790 <_fflush_r>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	690b      	ldr	r3, [r1, #16]
 800c794:	4605      	mov	r5, r0
 800c796:	460c      	mov	r4, r1
 800c798:	b913      	cbnz	r3, 800c7a0 <_fflush_r+0x10>
 800c79a:	2500      	movs	r5, #0
 800c79c:	4628      	mov	r0, r5
 800c79e:	bd38      	pop	{r3, r4, r5, pc}
 800c7a0:	b118      	cbz	r0, 800c7aa <_fflush_r+0x1a>
 800c7a2:	6a03      	ldr	r3, [r0, #32]
 800c7a4:	b90b      	cbnz	r3, 800c7aa <_fflush_r+0x1a>
 800c7a6:	f7fd fcb1 	bl	800a10c <__sinit>
 800c7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0f3      	beq.n	800c79a <_fflush_r+0xa>
 800c7b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7b4:	07d0      	lsls	r0, r2, #31
 800c7b6:	d404      	bmi.n	800c7c2 <_fflush_r+0x32>
 800c7b8:	0599      	lsls	r1, r3, #22
 800c7ba:	d402      	bmi.n	800c7c2 <_fflush_r+0x32>
 800c7bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7be:	f7fe fba0 	bl	800af02 <__retarget_lock_acquire_recursive>
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	f7ff ff63 	bl	800c690 <__sflush_r>
 800c7ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	07da      	lsls	r2, r3, #31
 800c7d0:	d4e4      	bmi.n	800c79c <_fflush_r+0xc>
 800c7d2:	89a3      	ldrh	r3, [r4, #12]
 800c7d4:	059b      	lsls	r3, r3, #22
 800c7d6:	d4e1      	bmi.n	800c79c <_fflush_r+0xc>
 800c7d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7da:	f7fe fb93 	bl	800af04 <__retarget_lock_release_recursive>
 800c7de:	e7dd      	b.n	800c79c <_fflush_r+0xc>

0800c7e0 <__malloc_lock>:
 800c7e0:	4801      	ldr	r0, [pc, #4]	@ (800c7e8 <__malloc_lock+0x8>)
 800c7e2:	f7fe bb8e 	b.w	800af02 <__retarget_lock_acquire_recursive>
 800c7e6:	bf00      	nop
 800c7e8:	20001718 	.word	0x20001718

0800c7ec <__malloc_unlock>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	@ (800c7f4 <__malloc_unlock+0x8>)
 800c7ee:	f7fe bb89 	b.w	800af04 <__retarget_lock_release_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	20001718 	.word	0x20001718

0800c7f8 <_Balloc>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	69c6      	ldr	r6, [r0, #28]
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	b976      	cbnz	r6, 800c820 <_Balloc+0x28>
 800c802:	2010      	movs	r0, #16
 800c804:	f7ff fe88 	bl	800c518 <malloc>
 800c808:	4602      	mov	r2, r0
 800c80a:	61e0      	str	r0, [r4, #28]
 800c80c:	b920      	cbnz	r0, 800c818 <_Balloc+0x20>
 800c80e:	216b      	movs	r1, #107	@ 0x6b
 800c810:	4b17      	ldr	r3, [pc, #92]	@ (800c870 <_Balloc+0x78>)
 800c812:	4818      	ldr	r0, [pc, #96]	@ (800c874 <_Balloc+0x7c>)
 800c814:	f000 fd84 	bl	800d320 <__assert_func>
 800c818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c81c:	6006      	str	r6, [r0, #0]
 800c81e:	60c6      	str	r6, [r0, #12]
 800c820:	69e6      	ldr	r6, [r4, #28]
 800c822:	68f3      	ldr	r3, [r6, #12]
 800c824:	b183      	cbz	r3, 800c848 <_Balloc+0x50>
 800c826:	69e3      	ldr	r3, [r4, #28]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c82e:	b9b8      	cbnz	r0, 800c860 <_Balloc+0x68>
 800c830:	2101      	movs	r1, #1
 800c832:	fa01 f605 	lsl.w	r6, r1, r5
 800c836:	1d72      	adds	r2, r6, #5
 800c838:	4620      	mov	r0, r4
 800c83a:	0092      	lsls	r2, r2, #2
 800c83c:	f000 fd8e 	bl	800d35c <_calloc_r>
 800c840:	b160      	cbz	r0, 800c85c <_Balloc+0x64>
 800c842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c846:	e00e      	b.n	800c866 <_Balloc+0x6e>
 800c848:	2221      	movs	r2, #33	@ 0x21
 800c84a:	2104      	movs	r1, #4
 800c84c:	4620      	mov	r0, r4
 800c84e:	f000 fd85 	bl	800d35c <_calloc_r>
 800c852:	69e3      	ldr	r3, [r4, #28]
 800c854:	60f0      	str	r0, [r6, #12]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e4      	bne.n	800c826 <_Balloc+0x2e>
 800c85c:	2000      	movs	r0, #0
 800c85e:	bd70      	pop	{r4, r5, r6, pc}
 800c860:	6802      	ldr	r2, [r0, #0]
 800c862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c866:	2300      	movs	r3, #0
 800c868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c86c:	e7f7      	b.n	800c85e <_Balloc+0x66>
 800c86e:	bf00      	nop
 800c870:	0800dbd6 	.word	0x0800dbd6
 800c874:	0800dcc7 	.word	0x0800dcc7

0800c878 <_Bfree>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	69c6      	ldr	r6, [r0, #28]
 800c87c:	4605      	mov	r5, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	b976      	cbnz	r6, 800c8a0 <_Bfree+0x28>
 800c882:	2010      	movs	r0, #16
 800c884:	f7ff fe48 	bl	800c518 <malloc>
 800c888:	4602      	mov	r2, r0
 800c88a:	61e8      	str	r0, [r5, #28]
 800c88c:	b920      	cbnz	r0, 800c898 <_Bfree+0x20>
 800c88e:	218f      	movs	r1, #143	@ 0x8f
 800c890:	4b08      	ldr	r3, [pc, #32]	@ (800c8b4 <_Bfree+0x3c>)
 800c892:	4809      	ldr	r0, [pc, #36]	@ (800c8b8 <_Bfree+0x40>)
 800c894:	f000 fd44 	bl	800d320 <__assert_func>
 800c898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c89c:	6006      	str	r6, [r0, #0]
 800c89e:	60c6      	str	r6, [r0, #12]
 800c8a0:	b13c      	cbz	r4, 800c8b2 <_Bfree+0x3a>
 800c8a2:	69eb      	ldr	r3, [r5, #28]
 800c8a4:	6862      	ldr	r2, [r4, #4]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8ac:	6021      	str	r1, [r4, #0]
 800c8ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
 800c8b4:	0800dbd6 	.word	0x0800dbd6
 800c8b8:	0800dcc7 	.word	0x0800dcc7

0800c8bc <__multadd>:
 800c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	461e      	mov	r6, r3
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	690d      	ldr	r5, [r1, #16]
 800c8ca:	f101 0c14 	add.w	ip, r1, #20
 800c8ce:	f8dc 3000 	ldr.w	r3, [ip]
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	b299      	uxth	r1, r3
 800c8d6:	fb02 6101 	mla	r1, r2, r1, r6
 800c8da:	0c1e      	lsrs	r6, r3, #16
 800c8dc:	0c0b      	lsrs	r3, r1, #16
 800c8de:	fb02 3306 	mla	r3, r2, r6, r3
 800c8e2:	b289      	uxth	r1, r1
 800c8e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8e8:	4285      	cmp	r5, r0
 800c8ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8ee:	f84c 1b04 	str.w	r1, [ip], #4
 800c8f2:	dcec      	bgt.n	800c8ce <__multadd+0x12>
 800c8f4:	b30e      	cbz	r6, 800c93a <__multadd+0x7e>
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	42ab      	cmp	r3, r5
 800c8fa:	dc19      	bgt.n	800c930 <__multadd+0x74>
 800c8fc:	6861      	ldr	r1, [r4, #4]
 800c8fe:	4638      	mov	r0, r7
 800c900:	3101      	adds	r1, #1
 800c902:	f7ff ff79 	bl	800c7f8 <_Balloc>
 800c906:	4680      	mov	r8, r0
 800c908:	b928      	cbnz	r0, 800c916 <__multadd+0x5a>
 800c90a:	4602      	mov	r2, r0
 800c90c:	21ba      	movs	r1, #186	@ 0xba
 800c90e:	4b0c      	ldr	r3, [pc, #48]	@ (800c940 <__multadd+0x84>)
 800c910:	480c      	ldr	r0, [pc, #48]	@ (800c944 <__multadd+0x88>)
 800c912:	f000 fd05 	bl	800d320 <__assert_func>
 800c916:	6922      	ldr	r2, [r4, #16]
 800c918:	f104 010c 	add.w	r1, r4, #12
 800c91c:	3202      	adds	r2, #2
 800c91e:	0092      	lsls	r2, r2, #2
 800c920:	300c      	adds	r0, #12
 800c922:	f7fe fafe 	bl	800af22 <memcpy>
 800c926:	4621      	mov	r1, r4
 800c928:	4638      	mov	r0, r7
 800c92a:	f7ff ffa5 	bl	800c878 <_Bfree>
 800c92e:	4644      	mov	r4, r8
 800c930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c934:	3501      	adds	r5, #1
 800c936:	615e      	str	r6, [r3, #20]
 800c938:	6125      	str	r5, [r4, #16]
 800c93a:	4620      	mov	r0, r4
 800c93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c940:	0800dc45 	.word	0x0800dc45
 800c944:	0800dcc7 	.word	0x0800dcc7

0800c948 <__s2b>:
 800c948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c94c:	4615      	mov	r5, r2
 800c94e:	2209      	movs	r2, #9
 800c950:	461f      	mov	r7, r3
 800c952:	3308      	adds	r3, #8
 800c954:	460c      	mov	r4, r1
 800c956:	fb93 f3f2 	sdiv	r3, r3, r2
 800c95a:	4606      	mov	r6, r0
 800c95c:	2201      	movs	r2, #1
 800c95e:	2100      	movs	r1, #0
 800c960:	429a      	cmp	r2, r3
 800c962:	db09      	blt.n	800c978 <__s2b+0x30>
 800c964:	4630      	mov	r0, r6
 800c966:	f7ff ff47 	bl	800c7f8 <_Balloc>
 800c96a:	b940      	cbnz	r0, 800c97e <__s2b+0x36>
 800c96c:	4602      	mov	r2, r0
 800c96e:	21d3      	movs	r1, #211	@ 0xd3
 800c970:	4b18      	ldr	r3, [pc, #96]	@ (800c9d4 <__s2b+0x8c>)
 800c972:	4819      	ldr	r0, [pc, #100]	@ (800c9d8 <__s2b+0x90>)
 800c974:	f000 fcd4 	bl	800d320 <__assert_func>
 800c978:	0052      	lsls	r2, r2, #1
 800c97a:	3101      	adds	r1, #1
 800c97c:	e7f0      	b.n	800c960 <__s2b+0x18>
 800c97e:	9b08      	ldr	r3, [sp, #32]
 800c980:	2d09      	cmp	r5, #9
 800c982:	6143      	str	r3, [r0, #20]
 800c984:	f04f 0301 	mov.w	r3, #1
 800c988:	6103      	str	r3, [r0, #16]
 800c98a:	dd16      	ble.n	800c9ba <__s2b+0x72>
 800c98c:	f104 0909 	add.w	r9, r4, #9
 800c990:	46c8      	mov	r8, r9
 800c992:	442c      	add	r4, r5
 800c994:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c998:	4601      	mov	r1, r0
 800c99a:	220a      	movs	r2, #10
 800c99c:	4630      	mov	r0, r6
 800c99e:	3b30      	subs	r3, #48	@ 0x30
 800c9a0:	f7ff ff8c 	bl	800c8bc <__multadd>
 800c9a4:	45a0      	cmp	r8, r4
 800c9a6:	d1f5      	bne.n	800c994 <__s2b+0x4c>
 800c9a8:	f1a5 0408 	sub.w	r4, r5, #8
 800c9ac:	444c      	add	r4, r9
 800c9ae:	1b2d      	subs	r5, r5, r4
 800c9b0:	1963      	adds	r3, r4, r5
 800c9b2:	42bb      	cmp	r3, r7
 800c9b4:	db04      	blt.n	800c9c0 <__s2b+0x78>
 800c9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ba:	2509      	movs	r5, #9
 800c9bc:	340a      	adds	r4, #10
 800c9be:	e7f6      	b.n	800c9ae <__s2b+0x66>
 800c9c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9c4:	4601      	mov	r1, r0
 800c9c6:	220a      	movs	r2, #10
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	3b30      	subs	r3, #48	@ 0x30
 800c9cc:	f7ff ff76 	bl	800c8bc <__multadd>
 800c9d0:	e7ee      	b.n	800c9b0 <__s2b+0x68>
 800c9d2:	bf00      	nop
 800c9d4:	0800dc45 	.word	0x0800dc45
 800c9d8:	0800dcc7 	.word	0x0800dcc7

0800c9dc <__hi0bits>:
 800c9dc:	4603      	mov	r3, r0
 800c9de:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c9e2:	bf3a      	itte	cc
 800c9e4:	0403      	lslcc	r3, r0, #16
 800c9e6:	2010      	movcc	r0, #16
 800c9e8:	2000      	movcs	r0, #0
 800c9ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9ee:	bf3c      	itt	cc
 800c9f0:	021b      	lslcc	r3, r3, #8
 800c9f2:	3008      	addcc	r0, #8
 800c9f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9f8:	bf3c      	itt	cc
 800c9fa:	011b      	lslcc	r3, r3, #4
 800c9fc:	3004      	addcc	r0, #4
 800c9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca02:	bf3c      	itt	cc
 800ca04:	009b      	lslcc	r3, r3, #2
 800ca06:	3002      	addcc	r0, #2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	db05      	blt.n	800ca18 <__hi0bits+0x3c>
 800ca0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ca10:	f100 0001 	add.w	r0, r0, #1
 800ca14:	bf08      	it	eq
 800ca16:	2020      	moveq	r0, #32
 800ca18:	4770      	bx	lr

0800ca1a <__lo0bits>:
 800ca1a:	6803      	ldr	r3, [r0, #0]
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	f013 0007 	ands.w	r0, r3, #7
 800ca22:	d00b      	beq.n	800ca3c <__lo0bits+0x22>
 800ca24:	07d9      	lsls	r1, r3, #31
 800ca26:	d421      	bmi.n	800ca6c <__lo0bits+0x52>
 800ca28:	0798      	lsls	r0, r3, #30
 800ca2a:	bf49      	itett	mi
 800ca2c:	085b      	lsrmi	r3, r3, #1
 800ca2e:	089b      	lsrpl	r3, r3, #2
 800ca30:	2001      	movmi	r0, #1
 800ca32:	6013      	strmi	r3, [r2, #0]
 800ca34:	bf5c      	itt	pl
 800ca36:	2002      	movpl	r0, #2
 800ca38:	6013      	strpl	r3, [r2, #0]
 800ca3a:	4770      	bx	lr
 800ca3c:	b299      	uxth	r1, r3
 800ca3e:	b909      	cbnz	r1, 800ca44 <__lo0bits+0x2a>
 800ca40:	2010      	movs	r0, #16
 800ca42:	0c1b      	lsrs	r3, r3, #16
 800ca44:	b2d9      	uxtb	r1, r3
 800ca46:	b909      	cbnz	r1, 800ca4c <__lo0bits+0x32>
 800ca48:	3008      	adds	r0, #8
 800ca4a:	0a1b      	lsrs	r3, r3, #8
 800ca4c:	0719      	lsls	r1, r3, #28
 800ca4e:	bf04      	itt	eq
 800ca50:	091b      	lsreq	r3, r3, #4
 800ca52:	3004      	addeq	r0, #4
 800ca54:	0799      	lsls	r1, r3, #30
 800ca56:	bf04      	itt	eq
 800ca58:	089b      	lsreq	r3, r3, #2
 800ca5a:	3002      	addeq	r0, #2
 800ca5c:	07d9      	lsls	r1, r3, #31
 800ca5e:	d403      	bmi.n	800ca68 <__lo0bits+0x4e>
 800ca60:	085b      	lsrs	r3, r3, #1
 800ca62:	f100 0001 	add.w	r0, r0, #1
 800ca66:	d003      	beq.n	800ca70 <__lo0bits+0x56>
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	4770      	bx	lr
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	4770      	bx	lr
 800ca70:	2020      	movs	r0, #32
 800ca72:	4770      	bx	lr

0800ca74 <__i2b>:
 800ca74:	b510      	push	{r4, lr}
 800ca76:	460c      	mov	r4, r1
 800ca78:	2101      	movs	r1, #1
 800ca7a:	f7ff febd 	bl	800c7f8 <_Balloc>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	b928      	cbnz	r0, 800ca8e <__i2b+0x1a>
 800ca82:	f240 1145 	movw	r1, #325	@ 0x145
 800ca86:	4b04      	ldr	r3, [pc, #16]	@ (800ca98 <__i2b+0x24>)
 800ca88:	4804      	ldr	r0, [pc, #16]	@ (800ca9c <__i2b+0x28>)
 800ca8a:	f000 fc49 	bl	800d320 <__assert_func>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	6144      	str	r4, [r0, #20]
 800ca92:	6103      	str	r3, [r0, #16]
 800ca94:	bd10      	pop	{r4, pc}
 800ca96:	bf00      	nop
 800ca98:	0800dc45 	.word	0x0800dc45
 800ca9c:	0800dcc7 	.word	0x0800dcc7

0800caa0 <__multiply>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	4614      	mov	r4, r2
 800caa6:	690a      	ldr	r2, [r1, #16]
 800caa8:	6923      	ldr	r3, [r4, #16]
 800caaa:	460f      	mov	r7, r1
 800caac:	429a      	cmp	r2, r3
 800caae:	bfa2      	ittt	ge
 800cab0:	4623      	movge	r3, r4
 800cab2:	460c      	movge	r4, r1
 800cab4:	461f      	movge	r7, r3
 800cab6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800caba:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cabe:	68a3      	ldr	r3, [r4, #8]
 800cac0:	6861      	ldr	r1, [r4, #4]
 800cac2:	eb0a 0609 	add.w	r6, sl, r9
 800cac6:	42b3      	cmp	r3, r6
 800cac8:	b085      	sub	sp, #20
 800caca:	bfb8      	it	lt
 800cacc:	3101      	addlt	r1, #1
 800cace:	f7ff fe93 	bl	800c7f8 <_Balloc>
 800cad2:	b930      	cbnz	r0, 800cae2 <__multiply+0x42>
 800cad4:	4602      	mov	r2, r0
 800cad6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cada:	4b43      	ldr	r3, [pc, #268]	@ (800cbe8 <__multiply+0x148>)
 800cadc:	4843      	ldr	r0, [pc, #268]	@ (800cbec <__multiply+0x14c>)
 800cade:	f000 fc1f 	bl	800d320 <__assert_func>
 800cae2:	f100 0514 	add.w	r5, r0, #20
 800cae6:	462b      	mov	r3, r5
 800cae8:	2200      	movs	r2, #0
 800caea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800caee:	4543      	cmp	r3, r8
 800caf0:	d321      	bcc.n	800cb36 <__multiply+0x96>
 800caf2:	f107 0114 	add.w	r1, r7, #20
 800caf6:	f104 0214 	add.w	r2, r4, #20
 800cafa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cafe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cb02:	9302      	str	r3, [sp, #8]
 800cb04:	1b13      	subs	r3, r2, r4
 800cb06:	3b15      	subs	r3, #21
 800cb08:	f023 0303 	bic.w	r3, r3, #3
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	f104 0715 	add.w	r7, r4, #21
 800cb12:	42ba      	cmp	r2, r7
 800cb14:	bf38      	it	cc
 800cb16:	2304      	movcc	r3, #4
 800cb18:	9301      	str	r3, [sp, #4]
 800cb1a:	9b02      	ldr	r3, [sp, #8]
 800cb1c:	9103      	str	r1, [sp, #12]
 800cb1e:	428b      	cmp	r3, r1
 800cb20:	d80c      	bhi.n	800cb3c <__multiply+0x9c>
 800cb22:	2e00      	cmp	r6, #0
 800cb24:	dd03      	ble.n	800cb2e <__multiply+0x8e>
 800cb26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d05a      	beq.n	800cbe4 <__multiply+0x144>
 800cb2e:	6106      	str	r6, [r0, #16]
 800cb30:	b005      	add	sp, #20
 800cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb36:	f843 2b04 	str.w	r2, [r3], #4
 800cb3a:	e7d8      	b.n	800caee <__multiply+0x4e>
 800cb3c:	f8b1 a000 	ldrh.w	sl, [r1]
 800cb40:	f1ba 0f00 	cmp.w	sl, #0
 800cb44:	d023      	beq.n	800cb8e <__multiply+0xee>
 800cb46:	46a9      	mov	r9, r5
 800cb48:	f04f 0c00 	mov.w	ip, #0
 800cb4c:	f104 0e14 	add.w	lr, r4, #20
 800cb50:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb54:	f8d9 3000 	ldr.w	r3, [r9]
 800cb58:	fa1f fb87 	uxth.w	fp, r7
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	fb0a 330b 	mla	r3, sl, fp, r3
 800cb62:	4463      	add	r3, ip
 800cb64:	f8d9 c000 	ldr.w	ip, [r9]
 800cb68:	0c3f      	lsrs	r7, r7, #16
 800cb6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cb6e:	fb0a c707 	mla	r7, sl, r7, ip
 800cb72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb7c:	4572      	cmp	r2, lr
 800cb7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cb82:	f849 3b04 	str.w	r3, [r9], #4
 800cb86:	d8e3      	bhi.n	800cb50 <__multiply+0xb0>
 800cb88:	9b01      	ldr	r3, [sp, #4]
 800cb8a:	f845 c003 	str.w	ip, [r5, r3]
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	3104      	adds	r1, #4
 800cb92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb96:	f1b9 0f00 	cmp.w	r9, #0
 800cb9a:	d021      	beq.n	800cbe0 <__multiply+0x140>
 800cb9c:	46ae      	mov	lr, r5
 800cb9e:	f04f 0a00 	mov.w	sl, #0
 800cba2:	682b      	ldr	r3, [r5, #0]
 800cba4:	f104 0c14 	add.w	ip, r4, #20
 800cba8:	f8bc b000 	ldrh.w	fp, [ip]
 800cbac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	fb09 770b 	mla	r7, r9, fp, r7
 800cbb6:	4457      	add	r7, sl
 800cbb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cbbc:	f84e 3b04 	str.w	r3, [lr], #4
 800cbc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cbc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbc8:	f8be 3000 	ldrh.w	r3, [lr]
 800cbcc:	4562      	cmp	r2, ip
 800cbce:	fb09 330a 	mla	r3, r9, sl, r3
 800cbd2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cbd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbda:	d8e5      	bhi.n	800cba8 <__multiply+0x108>
 800cbdc:	9f01      	ldr	r7, [sp, #4]
 800cbde:	51eb      	str	r3, [r5, r7]
 800cbe0:	3504      	adds	r5, #4
 800cbe2:	e79a      	b.n	800cb1a <__multiply+0x7a>
 800cbe4:	3e01      	subs	r6, #1
 800cbe6:	e79c      	b.n	800cb22 <__multiply+0x82>
 800cbe8:	0800dc45 	.word	0x0800dc45
 800cbec:	0800dcc7 	.word	0x0800dcc7

0800cbf0 <__pow5mult>:
 800cbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf4:	4615      	mov	r5, r2
 800cbf6:	f012 0203 	ands.w	r2, r2, #3
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	460e      	mov	r6, r1
 800cbfe:	d007      	beq.n	800cc10 <__pow5mult+0x20>
 800cc00:	4c25      	ldr	r4, [pc, #148]	@ (800cc98 <__pow5mult+0xa8>)
 800cc02:	3a01      	subs	r2, #1
 800cc04:	2300      	movs	r3, #0
 800cc06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc0a:	f7ff fe57 	bl	800c8bc <__multadd>
 800cc0e:	4606      	mov	r6, r0
 800cc10:	10ad      	asrs	r5, r5, #2
 800cc12:	d03d      	beq.n	800cc90 <__pow5mult+0xa0>
 800cc14:	69fc      	ldr	r4, [r7, #28]
 800cc16:	b97c      	cbnz	r4, 800cc38 <__pow5mult+0x48>
 800cc18:	2010      	movs	r0, #16
 800cc1a:	f7ff fc7d 	bl	800c518 <malloc>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	61f8      	str	r0, [r7, #28]
 800cc22:	b928      	cbnz	r0, 800cc30 <__pow5mult+0x40>
 800cc24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cc28:	4b1c      	ldr	r3, [pc, #112]	@ (800cc9c <__pow5mult+0xac>)
 800cc2a:	481d      	ldr	r0, [pc, #116]	@ (800cca0 <__pow5mult+0xb0>)
 800cc2c:	f000 fb78 	bl	800d320 <__assert_func>
 800cc30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc34:	6004      	str	r4, [r0, #0]
 800cc36:	60c4      	str	r4, [r0, #12]
 800cc38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cc3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc40:	b94c      	cbnz	r4, 800cc56 <__pow5mult+0x66>
 800cc42:	f240 2171 	movw	r1, #625	@ 0x271
 800cc46:	4638      	mov	r0, r7
 800cc48:	f7ff ff14 	bl	800ca74 <__i2b>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	4604      	mov	r4, r0
 800cc50:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc54:	6003      	str	r3, [r0, #0]
 800cc56:	f04f 0900 	mov.w	r9, #0
 800cc5a:	07eb      	lsls	r3, r5, #31
 800cc5c:	d50a      	bpl.n	800cc74 <__pow5mult+0x84>
 800cc5e:	4631      	mov	r1, r6
 800cc60:	4622      	mov	r2, r4
 800cc62:	4638      	mov	r0, r7
 800cc64:	f7ff ff1c 	bl	800caa0 <__multiply>
 800cc68:	4680      	mov	r8, r0
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	f7ff fe03 	bl	800c878 <_Bfree>
 800cc72:	4646      	mov	r6, r8
 800cc74:	106d      	asrs	r5, r5, #1
 800cc76:	d00b      	beq.n	800cc90 <__pow5mult+0xa0>
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	b938      	cbnz	r0, 800cc8c <__pow5mult+0x9c>
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4638      	mov	r0, r7
 800cc82:	f7ff ff0d 	bl	800caa0 <__multiply>
 800cc86:	6020      	str	r0, [r4, #0]
 800cc88:	f8c0 9000 	str.w	r9, [r0]
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	e7e4      	b.n	800cc5a <__pow5mult+0x6a>
 800cc90:	4630      	mov	r0, r6
 800cc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc96:	bf00      	nop
 800cc98:	0800dd20 	.word	0x0800dd20
 800cc9c:	0800dbd6 	.word	0x0800dbd6
 800cca0:	0800dcc7 	.word	0x0800dcc7

0800cca4 <__lshift>:
 800cca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	460c      	mov	r4, r1
 800ccaa:	4607      	mov	r7, r0
 800ccac:	4691      	mov	r9, r2
 800ccae:	6923      	ldr	r3, [r4, #16]
 800ccb0:	6849      	ldr	r1, [r1, #4]
 800ccb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ccb6:	68a3      	ldr	r3, [r4, #8]
 800ccb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ccbc:	f108 0601 	add.w	r6, r8, #1
 800ccc0:	42b3      	cmp	r3, r6
 800ccc2:	db0b      	blt.n	800ccdc <__lshift+0x38>
 800ccc4:	4638      	mov	r0, r7
 800ccc6:	f7ff fd97 	bl	800c7f8 <_Balloc>
 800ccca:	4605      	mov	r5, r0
 800cccc:	b948      	cbnz	r0, 800cce2 <__lshift+0x3e>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ccd4:	4b27      	ldr	r3, [pc, #156]	@ (800cd74 <__lshift+0xd0>)
 800ccd6:	4828      	ldr	r0, [pc, #160]	@ (800cd78 <__lshift+0xd4>)
 800ccd8:	f000 fb22 	bl	800d320 <__assert_func>
 800ccdc:	3101      	adds	r1, #1
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	e7ee      	b.n	800ccc0 <__lshift+0x1c>
 800cce2:	2300      	movs	r3, #0
 800cce4:	f100 0114 	add.w	r1, r0, #20
 800cce8:	f100 0210 	add.w	r2, r0, #16
 800ccec:	4618      	mov	r0, r3
 800ccee:	4553      	cmp	r3, sl
 800ccf0:	db33      	blt.n	800cd5a <__lshift+0xb6>
 800ccf2:	6920      	ldr	r0, [r4, #16]
 800ccf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccf8:	f104 0314 	add.w	r3, r4, #20
 800ccfc:	f019 091f 	ands.w	r9, r9, #31
 800cd00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd08:	d02b      	beq.n	800cd62 <__lshift+0xbe>
 800cd0a:	468a      	mov	sl, r1
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f1c9 0e20 	rsb	lr, r9, #32
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	fa00 f009 	lsl.w	r0, r0, r9
 800cd18:	4310      	orrs	r0, r2
 800cd1a:	f84a 0b04 	str.w	r0, [sl], #4
 800cd1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd22:	459c      	cmp	ip, r3
 800cd24:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd28:	d8f3      	bhi.n	800cd12 <__lshift+0x6e>
 800cd2a:	ebac 0304 	sub.w	r3, ip, r4
 800cd2e:	3b15      	subs	r3, #21
 800cd30:	f023 0303 	bic.w	r3, r3, #3
 800cd34:	3304      	adds	r3, #4
 800cd36:	f104 0015 	add.w	r0, r4, #21
 800cd3a:	4584      	cmp	ip, r0
 800cd3c:	bf38      	it	cc
 800cd3e:	2304      	movcc	r3, #4
 800cd40:	50ca      	str	r2, [r1, r3]
 800cd42:	b10a      	cbz	r2, 800cd48 <__lshift+0xa4>
 800cd44:	f108 0602 	add.w	r6, r8, #2
 800cd48:	3e01      	subs	r6, #1
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	612e      	str	r6, [r5, #16]
 800cd50:	f7ff fd92 	bl	800c878 <_Bfree>
 800cd54:	4628      	mov	r0, r5
 800cd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd5e:	3301      	adds	r3, #1
 800cd60:	e7c5      	b.n	800ccee <__lshift+0x4a>
 800cd62:	3904      	subs	r1, #4
 800cd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd68:	459c      	cmp	ip, r3
 800cd6a:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd6e:	d8f9      	bhi.n	800cd64 <__lshift+0xc0>
 800cd70:	e7ea      	b.n	800cd48 <__lshift+0xa4>
 800cd72:	bf00      	nop
 800cd74:	0800dc45 	.word	0x0800dc45
 800cd78:	0800dcc7 	.word	0x0800dcc7

0800cd7c <__mcmp>:
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	690a      	ldr	r2, [r1, #16]
 800cd80:	6900      	ldr	r0, [r0, #16]
 800cd82:	b530      	push	{r4, r5, lr}
 800cd84:	1a80      	subs	r0, r0, r2
 800cd86:	d10e      	bne.n	800cda6 <__mcmp+0x2a>
 800cd88:	3314      	adds	r3, #20
 800cd8a:	3114      	adds	r1, #20
 800cd8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd9c:	4295      	cmp	r5, r2
 800cd9e:	d003      	beq.n	800cda8 <__mcmp+0x2c>
 800cda0:	d205      	bcs.n	800cdae <__mcmp+0x32>
 800cda2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cda6:	bd30      	pop	{r4, r5, pc}
 800cda8:	42a3      	cmp	r3, r4
 800cdaa:	d3f3      	bcc.n	800cd94 <__mcmp+0x18>
 800cdac:	e7fb      	b.n	800cda6 <__mcmp+0x2a>
 800cdae:	2001      	movs	r0, #1
 800cdb0:	e7f9      	b.n	800cda6 <__mcmp+0x2a>
	...

0800cdb4 <__mdiff>:
 800cdb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	4689      	mov	r9, r1
 800cdba:	4606      	mov	r6, r0
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	4648      	mov	r0, r9
 800cdc0:	4614      	mov	r4, r2
 800cdc2:	f7ff ffdb 	bl	800cd7c <__mcmp>
 800cdc6:	1e05      	subs	r5, r0, #0
 800cdc8:	d112      	bne.n	800cdf0 <__mdiff+0x3c>
 800cdca:	4629      	mov	r1, r5
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f7ff fd13 	bl	800c7f8 <_Balloc>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	b928      	cbnz	r0, 800cde2 <__mdiff+0x2e>
 800cdd6:	f240 2137 	movw	r1, #567	@ 0x237
 800cdda:	4b3e      	ldr	r3, [pc, #248]	@ (800ced4 <__mdiff+0x120>)
 800cddc:	483e      	ldr	r0, [pc, #248]	@ (800ced8 <__mdiff+0x124>)
 800cdde:	f000 fa9f 	bl	800d320 <__assert_func>
 800cde2:	2301      	movs	r3, #1
 800cde4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cde8:	4610      	mov	r0, r2
 800cdea:	b003      	add	sp, #12
 800cdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf0:	bfbc      	itt	lt
 800cdf2:	464b      	movlt	r3, r9
 800cdf4:	46a1      	movlt	r9, r4
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cdfc:	bfba      	itte	lt
 800cdfe:	461c      	movlt	r4, r3
 800ce00:	2501      	movlt	r5, #1
 800ce02:	2500      	movge	r5, #0
 800ce04:	f7ff fcf8 	bl	800c7f8 <_Balloc>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	b918      	cbnz	r0, 800ce14 <__mdiff+0x60>
 800ce0c:	f240 2145 	movw	r1, #581	@ 0x245
 800ce10:	4b30      	ldr	r3, [pc, #192]	@ (800ced4 <__mdiff+0x120>)
 800ce12:	e7e3      	b.n	800cddc <__mdiff+0x28>
 800ce14:	f100 0b14 	add.w	fp, r0, #20
 800ce18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ce1c:	f109 0310 	add.w	r3, r9, #16
 800ce20:	60c5      	str	r5, [r0, #12]
 800ce22:	f04f 0c00 	mov.w	ip, #0
 800ce26:	f109 0514 	add.w	r5, r9, #20
 800ce2a:	46d9      	mov	r9, fp
 800ce2c:	6926      	ldr	r6, [r4, #16]
 800ce2e:	f104 0e14 	add.w	lr, r4, #20
 800ce32:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ce36:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ce3a:	9301      	str	r3, [sp, #4]
 800ce3c:	9b01      	ldr	r3, [sp, #4]
 800ce3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ce42:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ce46:	b281      	uxth	r1, r0
 800ce48:	9301      	str	r3, [sp, #4]
 800ce4a:	fa1f f38a 	uxth.w	r3, sl
 800ce4e:	1a5b      	subs	r3, r3, r1
 800ce50:	0c00      	lsrs	r0, r0, #16
 800ce52:	4463      	add	r3, ip
 800ce54:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ce58:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ce62:	4576      	cmp	r6, lr
 800ce64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce68:	f849 3b04 	str.w	r3, [r9], #4
 800ce6c:	d8e6      	bhi.n	800ce3c <__mdiff+0x88>
 800ce6e:	1b33      	subs	r3, r6, r4
 800ce70:	3b15      	subs	r3, #21
 800ce72:	f023 0303 	bic.w	r3, r3, #3
 800ce76:	3415      	adds	r4, #21
 800ce78:	3304      	adds	r3, #4
 800ce7a:	42a6      	cmp	r6, r4
 800ce7c:	bf38      	it	cc
 800ce7e:	2304      	movcc	r3, #4
 800ce80:	441d      	add	r5, r3
 800ce82:	445b      	add	r3, fp
 800ce84:	461e      	mov	r6, r3
 800ce86:	462c      	mov	r4, r5
 800ce88:	4544      	cmp	r4, r8
 800ce8a:	d30e      	bcc.n	800ceaa <__mdiff+0xf6>
 800ce8c:	f108 0103 	add.w	r1, r8, #3
 800ce90:	1b49      	subs	r1, r1, r5
 800ce92:	f021 0103 	bic.w	r1, r1, #3
 800ce96:	3d03      	subs	r5, #3
 800ce98:	45a8      	cmp	r8, r5
 800ce9a:	bf38      	it	cc
 800ce9c:	2100      	movcc	r1, #0
 800ce9e:	440b      	add	r3, r1
 800cea0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cea4:	b199      	cbz	r1, 800cece <__mdiff+0x11a>
 800cea6:	6117      	str	r7, [r2, #16]
 800cea8:	e79e      	b.n	800cde8 <__mdiff+0x34>
 800ceaa:	46e6      	mov	lr, ip
 800ceac:	f854 1b04 	ldr.w	r1, [r4], #4
 800ceb0:	fa1f fc81 	uxth.w	ip, r1
 800ceb4:	44f4      	add	ip, lr
 800ceb6:	0c08      	lsrs	r0, r1, #16
 800ceb8:	4471      	add	r1, lr
 800ceba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cebe:	b289      	uxth	r1, r1
 800cec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cec4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cec8:	f846 1b04 	str.w	r1, [r6], #4
 800cecc:	e7dc      	b.n	800ce88 <__mdiff+0xd4>
 800cece:	3f01      	subs	r7, #1
 800ced0:	e7e6      	b.n	800cea0 <__mdiff+0xec>
 800ced2:	bf00      	nop
 800ced4:	0800dc45 	.word	0x0800dc45
 800ced8:	0800dcc7 	.word	0x0800dcc7

0800cedc <__ulp>:
 800cedc:	4b0e      	ldr	r3, [pc, #56]	@ (800cf18 <__ulp+0x3c>)
 800cede:	400b      	ands	r3, r1
 800cee0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	dc08      	bgt.n	800cefa <__ulp+0x1e>
 800cee8:	425b      	negs	r3, r3
 800ceea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ceee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cef2:	da04      	bge.n	800cefe <__ulp+0x22>
 800cef4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cef8:	4113      	asrs	r3, r2
 800cefa:	2200      	movs	r2, #0
 800cefc:	e008      	b.n	800cf10 <__ulp+0x34>
 800cefe:	f1a2 0314 	sub.w	r3, r2, #20
 800cf02:	2b1e      	cmp	r3, #30
 800cf04:	bfd6      	itet	le
 800cf06:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cf0a:	2201      	movgt	r2, #1
 800cf0c:	40da      	lsrle	r2, r3
 800cf0e:	2300      	movs	r3, #0
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	7ff00000 	.word	0x7ff00000

0800cf1c <__b2d>:
 800cf1c:	6902      	ldr	r2, [r0, #16]
 800cf1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf20:	f100 0614 	add.w	r6, r0, #20
 800cf24:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800cf28:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800cf2c:	4f1e      	ldr	r7, [pc, #120]	@ (800cfa8 <__b2d+0x8c>)
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7ff fd54 	bl	800c9dc <__hi0bits>
 800cf34:	4603      	mov	r3, r0
 800cf36:	f1c0 0020 	rsb	r0, r0, #32
 800cf3a:	2b0a      	cmp	r3, #10
 800cf3c:	f1a2 0504 	sub.w	r5, r2, #4
 800cf40:	6008      	str	r0, [r1, #0]
 800cf42:	dc12      	bgt.n	800cf6a <__b2d+0x4e>
 800cf44:	42ae      	cmp	r6, r5
 800cf46:	bf2c      	ite	cs
 800cf48:	2200      	movcs	r2, #0
 800cf4a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800cf4e:	f1c3 0c0b 	rsb	ip, r3, #11
 800cf52:	3315      	adds	r3, #21
 800cf54:	fa24 fe0c 	lsr.w	lr, r4, ip
 800cf58:	fa04 f303 	lsl.w	r3, r4, r3
 800cf5c:	fa22 f20c 	lsr.w	r2, r2, ip
 800cf60:	ea4e 0107 	orr.w	r1, lr, r7
 800cf64:	431a      	orrs	r2, r3
 800cf66:	4610      	mov	r0, r2
 800cf68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf6a:	42ae      	cmp	r6, r5
 800cf6c:	bf36      	itet	cc
 800cf6e:	f1a2 0508 	subcc.w	r5, r2, #8
 800cf72:	2200      	movcs	r2, #0
 800cf74:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800cf78:	3b0b      	subs	r3, #11
 800cf7a:	d012      	beq.n	800cfa2 <__b2d+0x86>
 800cf7c:	f1c3 0720 	rsb	r7, r3, #32
 800cf80:	fa22 f107 	lsr.w	r1, r2, r7
 800cf84:	409c      	lsls	r4, r3
 800cf86:	430c      	orrs	r4, r1
 800cf88:	42b5      	cmp	r5, r6
 800cf8a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800cf8e:	bf94      	ite	ls
 800cf90:	2400      	movls	r4, #0
 800cf92:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800cf96:	409a      	lsls	r2, r3
 800cf98:	40fc      	lsrs	r4, r7
 800cf9a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cf9e:	4322      	orrs	r2, r4
 800cfa0:	e7e1      	b.n	800cf66 <__b2d+0x4a>
 800cfa2:	ea44 0107 	orr.w	r1, r4, r7
 800cfa6:	e7de      	b.n	800cf66 <__b2d+0x4a>
 800cfa8:	3ff00000 	.word	0x3ff00000

0800cfac <__d2b>:
 800cfac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	4690      	mov	r8, r2
 800cfb4:	4699      	mov	r9, r3
 800cfb6:	9e08      	ldr	r6, [sp, #32]
 800cfb8:	f7ff fc1e 	bl	800c7f8 <_Balloc>
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	b930      	cbnz	r0, 800cfce <__d2b+0x22>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	f240 310f 	movw	r1, #783	@ 0x30f
 800cfc6:	4b23      	ldr	r3, [pc, #140]	@ (800d054 <__d2b+0xa8>)
 800cfc8:	4823      	ldr	r0, [pc, #140]	@ (800d058 <__d2b+0xac>)
 800cfca:	f000 f9a9 	bl	800d320 <__assert_func>
 800cfce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cfd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfd6:	b10d      	cbz	r5, 800cfdc <__d2b+0x30>
 800cfd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	f1b8 0300 	subs.w	r3, r8, #0
 800cfe2:	d024      	beq.n	800d02e <__d2b+0x82>
 800cfe4:	4668      	mov	r0, sp
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	f7ff fd17 	bl	800ca1a <__lo0bits>
 800cfec:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cff0:	b1d8      	cbz	r0, 800d02a <__d2b+0x7e>
 800cff2:	f1c0 0320 	rsb	r3, r0, #32
 800cff6:	fa02 f303 	lsl.w	r3, r2, r3
 800cffa:	430b      	orrs	r3, r1
 800cffc:	40c2      	lsrs	r2, r0
 800cffe:	6163      	str	r3, [r4, #20]
 800d000:	9201      	str	r2, [sp, #4]
 800d002:	9b01      	ldr	r3, [sp, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	bf0c      	ite	eq
 800d008:	2201      	moveq	r2, #1
 800d00a:	2202      	movne	r2, #2
 800d00c:	61a3      	str	r3, [r4, #24]
 800d00e:	6122      	str	r2, [r4, #16]
 800d010:	b1ad      	cbz	r5, 800d03e <__d2b+0x92>
 800d012:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d016:	4405      	add	r5, r0
 800d018:	6035      	str	r5, [r6, #0]
 800d01a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d020:	6018      	str	r0, [r3, #0]
 800d022:	4620      	mov	r0, r4
 800d024:	b002      	add	sp, #8
 800d026:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d02a:	6161      	str	r1, [r4, #20]
 800d02c:	e7e9      	b.n	800d002 <__d2b+0x56>
 800d02e:	a801      	add	r0, sp, #4
 800d030:	f7ff fcf3 	bl	800ca1a <__lo0bits>
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	6163      	str	r3, [r4, #20]
 800d03a:	3020      	adds	r0, #32
 800d03c:	e7e7      	b.n	800d00e <__d2b+0x62>
 800d03e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d042:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d046:	6030      	str	r0, [r6, #0]
 800d048:	6918      	ldr	r0, [r3, #16]
 800d04a:	f7ff fcc7 	bl	800c9dc <__hi0bits>
 800d04e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d052:	e7e4      	b.n	800d01e <__d2b+0x72>
 800d054:	0800dc45 	.word	0x0800dc45
 800d058:	0800dcc7 	.word	0x0800dcc7

0800d05c <__ratio>:
 800d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	b085      	sub	sp, #20
 800d062:	e9cd 1000 	strd	r1, r0, [sp]
 800d066:	a902      	add	r1, sp, #8
 800d068:	f7ff ff58 	bl	800cf1c <__b2d>
 800d06c:	468b      	mov	fp, r1
 800d06e:	4606      	mov	r6, r0
 800d070:	460f      	mov	r7, r1
 800d072:	9800      	ldr	r0, [sp, #0]
 800d074:	a903      	add	r1, sp, #12
 800d076:	f7ff ff51 	bl	800cf1c <__b2d>
 800d07a:	460d      	mov	r5, r1
 800d07c:	9b01      	ldr	r3, [sp, #4]
 800d07e:	4689      	mov	r9, r1
 800d080:	6919      	ldr	r1, [r3, #16]
 800d082:	9b00      	ldr	r3, [sp, #0]
 800d084:	4604      	mov	r4, r0
 800d086:	691b      	ldr	r3, [r3, #16]
 800d088:	4630      	mov	r0, r6
 800d08a:	1ac9      	subs	r1, r1, r3
 800d08c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d090:	1a9b      	subs	r3, r3, r2
 800d092:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d096:	2b00      	cmp	r3, #0
 800d098:	bfcd      	iteet	gt
 800d09a:	463a      	movgt	r2, r7
 800d09c:	462a      	movle	r2, r5
 800d09e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d0a2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d0a6:	bfd8      	it	le
 800d0a8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d0ac:	464b      	mov	r3, r9
 800d0ae:	4622      	mov	r2, r4
 800d0b0:	4659      	mov	r1, fp
 800d0b2:	f7f3 fb3b 	bl	800072c <__aeabi_ddiv>
 800d0b6:	b005      	add	sp, #20
 800d0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0bc <__copybits>:
 800d0bc:	3901      	subs	r1, #1
 800d0be:	b570      	push	{r4, r5, r6, lr}
 800d0c0:	1149      	asrs	r1, r1, #5
 800d0c2:	6914      	ldr	r4, [r2, #16]
 800d0c4:	3101      	adds	r1, #1
 800d0c6:	f102 0314 	add.w	r3, r2, #20
 800d0ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0d2:	1f05      	subs	r5, r0, #4
 800d0d4:	42a3      	cmp	r3, r4
 800d0d6:	d30c      	bcc.n	800d0f2 <__copybits+0x36>
 800d0d8:	1aa3      	subs	r3, r4, r2
 800d0da:	3b11      	subs	r3, #17
 800d0dc:	f023 0303 	bic.w	r3, r3, #3
 800d0e0:	3211      	adds	r2, #17
 800d0e2:	42a2      	cmp	r2, r4
 800d0e4:	bf88      	it	hi
 800d0e6:	2300      	movhi	r3, #0
 800d0e8:	4418      	add	r0, r3
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	4288      	cmp	r0, r1
 800d0ee:	d305      	bcc.n	800d0fc <__copybits+0x40>
 800d0f0:	bd70      	pop	{r4, r5, r6, pc}
 800d0f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d0f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d0fa:	e7eb      	b.n	800d0d4 <__copybits+0x18>
 800d0fc:	f840 3b04 	str.w	r3, [r0], #4
 800d100:	e7f4      	b.n	800d0ec <__copybits+0x30>

0800d102 <__any_on>:
 800d102:	f100 0214 	add.w	r2, r0, #20
 800d106:	6900      	ldr	r0, [r0, #16]
 800d108:	114b      	asrs	r3, r1, #5
 800d10a:	4298      	cmp	r0, r3
 800d10c:	b510      	push	{r4, lr}
 800d10e:	db11      	blt.n	800d134 <__any_on+0x32>
 800d110:	dd0a      	ble.n	800d128 <__any_on+0x26>
 800d112:	f011 011f 	ands.w	r1, r1, #31
 800d116:	d007      	beq.n	800d128 <__any_on+0x26>
 800d118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d11c:	fa24 f001 	lsr.w	r0, r4, r1
 800d120:	fa00 f101 	lsl.w	r1, r0, r1
 800d124:	428c      	cmp	r4, r1
 800d126:	d10b      	bne.n	800d140 <__any_on+0x3e>
 800d128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d803      	bhi.n	800d138 <__any_on+0x36>
 800d130:	2000      	movs	r0, #0
 800d132:	bd10      	pop	{r4, pc}
 800d134:	4603      	mov	r3, r0
 800d136:	e7f7      	b.n	800d128 <__any_on+0x26>
 800d138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d13c:	2900      	cmp	r1, #0
 800d13e:	d0f5      	beq.n	800d12c <__any_on+0x2a>
 800d140:	2001      	movs	r0, #1
 800d142:	e7f6      	b.n	800d132 <__any_on+0x30>

0800d144 <__sread>:
 800d144:	b510      	push	{r4, lr}
 800d146:	460c      	mov	r4, r1
 800d148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d14c:	f000 f8b4 	bl	800d2b8 <_read_r>
 800d150:	2800      	cmp	r0, #0
 800d152:	bfab      	itete	ge
 800d154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d156:	89a3      	ldrhlt	r3, [r4, #12]
 800d158:	181b      	addge	r3, r3, r0
 800d15a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d15e:	bfac      	ite	ge
 800d160:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d162:	81a3      	strhlt	r3, [r4, #12]
 800d164:	bd10      	pop	{r4, pc}

0800d166 <__swrite>:
 800d166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d16a:	461f      	mov	r7, r3
 800d16c:	898b      	ldrh	r3, [r1, #12]
 800d16e:	4605      	mov	r5, r0
 800d170:	05db      	lsls	r3, r3, #23
 800d172:	460c      	mov	r4, r1
 800d174:	4616      	mov	r6, r2
 800d176:	d505      	bpl.n	800d184 <__swrite+0x1e>
 800d178:	2302      	movs	r3, #2
 800d17a:	2200      	movs	r2, #0
 800d17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d180:	f000 f888 	bl	800d294 <_lseek_r>
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	4632      	mov	r2, r6
 800d188:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d18c:	81a3      	strh	r3, [r4, #12]
 800d18e:	4628      	mov	r0, r5
 800d190:	463b      	mov	r3, r7
 800d192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d19a:	f000 b8af 	b.w	800d2fc <_write_r>

0800d19e <__sseek>:
 800d19e:	b510      	push	{r4, lr}
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a6:	f000 f875 	bl	800d294 <_lseek_r>
 800d1aa:	1c43      	adds	r3, r0, #1
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	bf15      	itete	ne
 800d1b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d1b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d1b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1ba:	81a3      	strheq	r3, [r4, #12]
 800d1bc:	bf18      	it	ne
 800d1be:	81a3      	strhne	r3, [r4, #12]
 800d1c0:	bd10      	pop	{r4, pc}

0800d1c2 <__sclose>:
 800d1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c6:	f000 b855 	b.w	800d274 <_close_r>

0800d1ca <_realloc_r>:
 800d1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ce:	4680      	mov	r8, r0
 800d1d0:	4615      	mov	r5, r2
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	b921      	cbnz	r1, 800d1e0 <_realloc_r+0x16>
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	f7ff b9c6 	b.w	800c56c <_malloc_r>
 800d1e0:	b92a      	cbnz	r2, 800d1ee <_realloc_r+0x24>
 800d1e2:	f000 f8cf 	bl	800d384 <_free_r>
 800d1e6:	2400      	movs	r4, #0
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ee:	f000 f911 	bl	800d414 <_malloc_usable_size_r>
 800d1f2:	4285      	cmp	r5, r0
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	d802      	bhi.n	800d1fe <_realloc_r+0x34>
 800d1f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d1fc:	d8f4      	bhi.n	800d1e8 <_realloc_r+0x1e>
 800d1fe:	4629      	mov	r1, r5
 800d200:	4640      	mov	r0, r8
 800d202:	f7ff f9b3 	bl	800c56c <_malloc_r>
 800d206:	4607      	mov	r7, r0
 800d208:	2800      	cmp	r0, #0
 800d20a:	d0ec      	beq.n	800d1e6 <_realloc_r+0x1c>
 800d20c:	42b5      	cmp	r5, r6
 800d20e:	462a      	mov	r2, r5
 800d210:	4621      	mov	r1, r4
 800d212:	bf28      	it	cs
 800d214:	4632      	movcs	r2, r6
 800d216:	f7fd fe84 	bl	800af22 <memcpy>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4640      	mov	r0, r8
 800d21e:	f000 f8b1 	bl	800d384 <_free_r>
 800d222:	463c      	mov	r4, r7
 800d224:	e7e0      	b.n	800d1e8 <_realloc_r+0x1e>

0800d226 <__ascii_wctomb>:
 800d226:	4603      	mov	r3, r0
 800d228:	4608      	mov	r0, r1
 800d22a:	b141      	cbz	r1, 800d23e <__ascii_wctomb+0x18>
 800d22c:	2aff      	cmp	r2, #255	@ 0xff
 800d22e:	d904      	bls.n	800d23a <__ascii_wctomb+0x14>
 800d230:	228a      	movs	r2, #138	@ 0x8a
 800d232:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	4770      	bx	lr
 800d23a:	2001      	movs	r0, #1
 800d23c:	700a      	strb	r2, [r1, #0]
 800d23e:	4770      	bx	lr

0800d240 <memmove>:
 800d240:	4288      	cmp	r0, r1
 800d242:	b510      	push	{r4, lr}
 800d244:	eb01 0402 	add.w	r4, r1, r2
 800d248:	d902      	bls.n	800d250 <memmove+0x10>
 800d24a:	4284      	cmp	r4, r0
 800d24c:	4623      	mov	r3, r4
 800d24e:	d807      	bhi.n	800d260 <memmove+0x20>
 800d250:	1e43      	subs	r3, r0, #1
 800d252:	42a1      	cmp	r1, r4
 800d254:	d008      	beq.n	800d268 <memmove+0x28>
 800d256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d25a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d25e:	e7f8      	b.n	800d252 <memmove+0x12>
 800d260:	4601      	mov	r1, r0
 800d262:	4402      	add	r2, r0
 800d264:	428a      	cmp	r2, r1
 800d266:	d100      	bne.n	800d26a <memmove+0x2a>
 800d268:	bd10      	pop	{r4, pc}
 800d26a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d26e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d272:	e7f7      	b.n	800d264 <memmove+0x24>

0800d274 <_close_r>:
 800d274:	b538      	push	{r3, r4, r5, lr}
 800d276:	2300      	movs	r3, #0
 800d278:	4d05      	ldr	r5, [pc, #20]	@ (800d290 <_close_r+0x1c>)
 800d27a:	4604      	mov	r4, r0
 800d27c:	4608      	mov	r0, r1
 800d27e:	602b      	str	r3, [r5, #0]
 800d280:	f7f3 fed7 	bl	8001032 <_close>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	d102      	bne.n	800d28e <_close_r+0x1a>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	b103      	cbz	r3, 800d28e <_close_r+0x1a>
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	20001724 	.word	0x20001724

0800d294 <_lseek_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4604      	mov	r4, r0
 800d298:	4608      	mov	r0, r1
 800d29a:	4611      	mov	r1, r2
 800d29c:	2200      	movs	r2, #0
 800d29e:	4d05      	ldr	r5, [pc, #20]	@ (800d2b4 <_lseek_r+0x20>)
 800d2a0:	602a      	str	r2, [r5, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	f7f3 fee9 	bl	800107a <_lseek>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_lseek_r+0x1e>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_lseek_r+0x1e>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	20001724 	.word	0x20001724

0800d2b8 <_read_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	4608      	mov	r0, r1
 800d2be:	4611      	mov	r1, r2
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	4d05      	ldr	r5, [pc, #20]	@ (800d2d8 <_read_r+0x20>)
 800d2c4:	602a      	str	r2, [r5, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	f7f3 fe7a 	bl	8000fc0 <_read>
 800d2cc:	1c43      	adds	r3, r0, #1
 800d2ce:	d102      	bne.n	800d2d6 <_read_r+0x1e>
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	b103      	cbz	r3, 800d2d6 <_read_r+0x1e>
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	bd38      	pop	{r3, r4, r5, pc}
 800d2d8:	20001724 	.word	0x20001724

0800d2dc <_sbrk_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	2300      	movs	r3, #0
 800d2e0:	4d05      	ldr	r5, [pc, #20]	@ (800d2f8 <_sbrk_r+0x1c>)
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	602b      	str	r3, [r5, #0]
 800d2e8:	f7f3 fed4 	bl	8001094 <_sbrk>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_sbrk_r+0x1a>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_sbrk_r+0x1a>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	20001724 	.word	0x20001724

0800d2fc <_write_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4604      	mov	r4, r0
 800d300:	4608      	mov	r0, r1
 800d302:	4611      	mov	r1, r2
 800d304:	2200      	movs	r2, #0
 800d306:	4d05      	ldr	r5, [pc, #20]	@ (800d31c <_write_r+0x20>)
 800d308:	602a      	str	r2, [r5, #0]
 800d30a:	461a      	mov	r2, r3
 800d30c:	f7f3 fe75 	bl	8000ffa <_write>
 800d310:	1c43      	adds	r3, r0, #1
 800d312:	d102      	bne.n	800d31a <_write_r+0x1e>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	b103      	cbz	r3, 800d31a <_write_r+0x1e>
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	bd38      	pop	{r3, r4, r5, pc}
 800d31c:	20001724 	.word	0x20001724

0800d320 <__assert_func>:
 800d320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d322:	4614      	mov	r4, r2
 800d324:	461a      	mov	r2, r3
 800d326:	4b09      	ldr	r3, [pc, #36]	@ (800d34c <__assert_func+0x2c>)
 800d328:	4605      	mov	r5, r0
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	68d8      	ldr	r0, [r3, #12]
 800d32e:	b954      	cbnz	r4, 800d346 <__assert_func+0x26>
 800d330:	4b07      	ldr	r3, [pc, #28]	@ (800d350 <__assert_func+0x30>)
 800d332:	461c      	mov	r4, r3
 800d334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d338:	9100      	str	r1, [sp, #0]
 800d33a:	462b      	mov	r3, r5
 800d33c:	4905      	ldr	r1, [pc, #20]	@ (800d354 <__assert_func+0x34>)
 800d33e:	f000 f871 	bl	800d424 <fiprintf>
 800d342:	f000 f881 	bl	800d448 <abort>
 800d346:	4b04      	ldr	r3, [pc, #16]	@ (800d358 <__assert_func+0x38>)
 800d348:	e7f4      	b.n	800d334 <__assert_func+0x14>
 800d34a:	bf00      	nop
 800d34c:	200002f4 	.word	0x200002f4
 800d350:	0800de5b 	.word	0x0800de5b
 800d354:	0800de2d 	.word	0x0800de2d
 800d358:	0800de20 	.word	0x0800de20

0800d35c <_calloc_r>:
 800d35c:	b570      	push	{r4, r5, r6, lr}
 800d35e:	fba1 5402 	umull	r5, r4, r1, r2
 800d362:	b93c      	cbnz	r4, 800d374 <_calloc_r+0x18>
 800d364:	4629      	mov	r1, r5
 800d366:	f7ff f901 	bl	800c56c <_malloc_r>
 800d36a:	4606      	mov	r6, r0
 800d36c:	b928      	cbnz	r0, 800d37a <_calloc_r+0x1e>
 800d36e:	2600      	movs	r6, #0
 800d370:	4630      	mov	r0, r6
 800d372:	bd70      	pop	{r4, r5, r6, pc}
 800d374:	220c      	movs	r2, #12
 800d376:	6002      	str	r2, [r0, #0]
 800d378:	e7f9      	b.n	800d36e <_calloc_r+0x12>
 800d37a:	462a      	mov	r2, r5
 800d37c:	4621      	mov	r1, r4
 800d37e:	f7fd fd89 	bl	800ae94 <memset>
 800d382:	e7f5      	b.n	800d370 <_calloc_r+0x14>

0800d384 <_free_r>:
 800d384:	b538      	push	{r3, r4, r5, lr}
 800d386:	4605      	mov	r5, r0
 800d388:	2900      	cmp	r1, #0
 800d38a:	d040      	beq.n	800d40e <_free_r+0x8a>
 800d38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d390:	1f0c      	subs	r4, r1, #4
 800d392:	2b00      	cmp	r3, #0
 800d394:	bfb8      	it	lt
 800d396:	18e4      	addlt	r4, r4, r3
 800d398:	f7ff fa22 	bl	800c7e0 <__malloc_lock>
 800d39c:	4a1c      	ldr	r2, [pc, #112]	@ (800d410 <_free_r+0x8c>)
 800d39e:	6813      	ldr	r3, [r2, #0]
 800d3a0:	b933      	cbnz	r3, 800d3b0 <_free_r+0x2c>
 800d3a2:	6063      	str	r3, [r4, #4]
 800d3a4:	6014      	str	r4, [r2, #0]
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ac:	f7ff ba1e 	b.w	800c7ec <__malloc_unlock>
 800d3b0:	42a3      	cmp	r3, r4
 800d3b2:	d908      	bls.n	800d3c6 <_free_r+0x42>
 800d3b4:	6820      	ldr	r0, [r4, #0]
 800d3b6:	1821      	adds	r1, r4, r0
 800d3b8:	428b      	cmp	r3, r1
 800d3ba:	bf01      	itttt	eq
 800d3bc:	6819      	ldreq	r1, [r3, #0]
 800d3be:	685b      	ldreq	r3, [r3, #4]
 800d3c0:	1809      	addeq	r1, r1, r0
 800d3c2:	6021      	streq	r1, [r4, #0]
 800d3c4:	e7ed      	b.n	800d3a2 <_free_r+0x1e>
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	b10b      	cbz	r3, 800d3d0 <_free_r+0x4c>
 800d3cc:	42a3      	cmp	r3, r4
 800d3ce:	d9fa      	bls.n	800d3c6 <_free_r+0x42>
 800d3d0:	6811      	ldr	r1, [r2, #0]
 800d3d2:	1850      	adds	r0, r2, r1
 800d3d4:	42a0      	cmp	r0, r4
 800d3d6:	d10b      	bne.n	800d3f0 <_free_r+0x6c>
 800d3d8:	6820      	ldr	r0, [r4, #0]
 800d3da:	4401      	add	r1, r0
 800d3dc:	1850      	adds	r0, r2, r1
 800d3de:	4283      	cmp	r3, r0
 800d3e0:	6011      	str	r1, [r2, #0]
 800d3e2:	d1e0      	bne.n	800d3a6 <_free_r+0x22>
 800d3e4:	6818      	ldr	r0, [r3, #0]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	4408      	add	r0, r1
 800d3ea:	6010      	str	r0, [r2, #0]
 800d3ec:	6053      	str	r3, [r2, #4]
 800d3ee:	e7da      	b.n	800d3a6 <_free_r+0x22>
 800d3f0:	d902      	bls.n	800d3f8 <_free_r+0x74>
 800d3f2:	230c      	movs	r3, #12
 800d3f4:	602b      	str	r3, [r5, #0]
 800d3f6:	e7d6      	b.n	800d3a6 <_free_r+0x22>
 800d3f8:	6820      	ldr	r0, [r4, #0]
 800d3fa:	1821      	adds	r1, r4, r0
 800d3fc:	428b      	cmp	r3, r1
 800d3fe:	bf01      	itttt	eq
 800d400:	6819      	ldreq	r1, [r3, #0]
 800d402:	685b      	ldreq	r3, [r3, #4]
 800d404:	1809      	addeq	r1, r1, r0
 800d406:	6021      	streq	r1, [r4, #0]
 800d408:	6063      	str	r3, [r4, #4]
 800d40a:	6054      	str	r4, [r2, #4]
 800d40c:	e7cb      	b.n	800d3a6 <_free_r+0x22>
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	20001720 	.word	0x20001720

0800d414 <_malloc_usable_size_r>:
 800d414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d418:	1f18      	subs	r0, r3, #4
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	bfbc      	itt	lt
 800d41e:	580b      	ldrlt	r3, [r1, r0]
 800d420:	18c0      	addlt	r0, r0, r3
 800d422:	4770      	bx	lr

0800d424 <fiprintf>:
 800d424:	b40e      	push	{r1, r2, r3}
 800d426:	b503      	push	{r0, r1, lr}
 800d428:	4601      	mov	r1, r0
 800d42a:	ab03      	add	r3, sp, #12
 800d42c:	4805      	ldr	r0, [pc, #20]	@ (800d444 <fiprintf+0x20>)
 800d42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d432:	6800      	ldr	r0, [r0, #0]
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	f000 f835 	bl	800d4a4 <_vfiprintf_r>
 800d43a:	b002      	add	sp, #8
 800d43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d440:	b003      	add	sp, #12
 800d442:	4770      	bx	lr
 800d444:	200002f4 	.word	0x200002f4

0800d448 <abort>:
 800d448:	2006      	movs	r0, #6
 800d44a:	b508      	push	{r3, lr}
 800d44c:	f000 fa82 	bl	800d954 <raise>
 800d450:	2001      	movs	r0, #1
 800d452:	f7f3 fdaa 	bl	8000faa <_exit>

0800d456 <__sfputc_r>:
 800d456:	6893      	ldr	r3, [r2, #8]
 800d458:	b410      	push	{r4}
 800d45a:	3b01      	subs	r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	6093      	str	r3, [r2, #8]
 800d460:	da07      	bge.n	800d472 <__sfputc_r+0x1c>
 800d462:	6994      	ldr	r4, [r2, #24]
 800d464:	42a3      	cmp	r3, r4
 800d466:	db01      	blt.n	800d46c <__sfputc_r+0x16>
 800d468:	290a      	cmp	r1, #10
 800d46a:	d102      	bne.n	800d472 <__sfputc_r+0x1c>
 800d46c:	bc10      	pop	{r4}
 800d46e:	f000 b931 	b.w	800d6d4 <__swbuf_r>
 800d472:	6813      	ldr	r3, [r2, #0]
 800d474:	1c58      	adds	r0, r3, #1
 800d476:	6010      	str	r0, [r2, #0]
 800d478:	7019      	strb	r1, [r3, #0]
 800d47a:	4608      	mov	r0, r1
 800d47c:	bc10      	pop	{r4}
 800d47e:	4770      	bx	lr

0800d480 <__sfputs_r>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	4606      	mov	r6, r0
 800d484:	460f      	mov	r7, r1
 800d486:	4614      	mov	r4, r2
 800d488:	18d5      	adds	r5, r2, r3
 800d48a:	42ac      	cmp	r4, r5
 800d48c:	d101      	bne.n	800d492 <__sfputs_r+0x12>
 800d48e:	2000      	movs	r0, #0
 800d490:	e007      	b.n	800d4a2 <__sfputs_r+0x22>
 800d492:	463a      	mov	r2, r7
 800d494:	4630      	mov	r0, r6
 800d496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d49a:	f7ff ffdc 	bl	800d456 <__sfputc_r>
 800d49e:	1c43      	adds	r3, r0, #1
 800d4a0:	d1f3      	bne.n	800d48a <__sfputs_r+0xa>
 800d4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4a4 <_vfiprintf_r>:
 800d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a8:	460d      	mov	r5, r1
 800d4aa:	4614      	mov	r4, r2
 800d4ac:	4698      	mov	r8, r3
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	b09d      	sub	sp, #116	@ 0x74
 800d4b2:	b118      	cbz	r0, 800d4bc <_vfiprintf_r+0x18>
 800d4b4:	6a03      	ldr	r3, [r0, #32]
 800d4b6:	b90b      	cbnz	r3, 800d4bc <_vfiprintf_r+0x18>
 800d4b8:	f7fc fe28 	bl	800a10c <__sinit>
 800d4bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4be:	07d9      	lsls	r1, r3, #31
 800d4c0:	d405      	bmi.n	800d4ce <_vfiprintf_r+0x2a>
 800d4c2:	89ab      	ldrh	r3, [r5, #12]
 800d4c4:	059a      	lsls	r2, r3, #22
 800d4c6:	d402      	bmi.n	800d4ce <_vfiprintf_r+0x2a>
 800d4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ca:	f7fd fd1a 	bl	800af02 <__retarget_lock_acquire_recursive>
 800d4ce:	89ab      	ldrh	r3, [r5, #12]
 800d4d0:	071b      	lsls	r3, r3, #28
 800d4d2:	d501      	bpl.n	800d4d8 <_vfiprintf_r+0x34>
 800d4d4:	692b      	ldr	r3, [r5, #16]
 800d4d6:	b99b      	cbnz	r3, 800d500 <_vfiprintf_r+0x5c>
 800d4d8:	4629      	mov	r1, r5
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f000 f938 	bl	800d750 <__swsetup_r>
 800d4e0:	b170      	cbz	r0, 800d500 <_vfiprintf_r+0x5c>
 800d4e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4e4:	07dc      	lsls	r4, r3, #31
 800d4e6:	d504      	bpl.n	800d4f2 <_vfiprintf_r+0x4e>
 800d4e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4ec:	b01d      	add	sp, #116	@ 0x74
 800d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f2:	89ab      	ldrh	r3, [r5, #12]
 800d4f4:	0598      	lsls	r0, r3, #22
 800d4f6:	d4f7      	bmi.n	800d4e8 <_vfiprintf_r+0x44>
 800d4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4fa:	f7fd fd03 	bl	800af04 <__retarget_lock_release_recursive>
 800d4fe:	e7f3      	b.n	800d4e8 <_vfiprintf_r+0x44>
 800d500:	2300      	movs	r3, #0
 800d502:	9309      	str	r3, [sp, #36]	@ 0x24
 800d504:	2320      	movs	r3, #32
 800d506:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d50a:	2330      	movs	r3, #48	@ 0x30
 800d50c:	f04f 0901 	mov.w	r9, #1
 800d510:	f8cd 800c 	str.w	r8, [sp, #12]
 800d514:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d6c0 <_vfiprintf_r+0x21c>
 800d518:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d51c:	4623      	mov	r3, r4
 800d51e:	469a      	mov	sl, r3
 800d520:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d524:	b10a      	cbz	r2, 800d52a <_vfiprintf_r+0x86>
 800d526:	2a25      	cmp	r2, #37	@ 0x25
 800d528:	d1f9      	bne.n	800d51e <_vfiprintf_r+0x7a>
 800d52a:	ebba 0b04 	subs.w	fp, sl, r4
 800d52e:	d00b      	beq.n	800d548 <_vfiprintf_r+0xa4>
 800d530:	465b      	mov	r3, fp
 800d532:	4622      	mov	r2, r4
 800d534:	4629      	mov	r1, r5
 800d536:	4630      	mov	r0, r6
 800d538:	f7ff ffa2 	bl	800d480 <__sfputs_r>
 800d53c:	3001      	adds	r0, #1
 800d53e:	f000 80a7 	beq.w	800d690 <_vfiprintf_r+0x1ec>
 800d542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d544:	445a      	add	r2, fp
 800d546:	9209      	str	r2, [sp, #36]	@ 0x24
 800d548:	f89a 3000 	ldrb.w	r3, [sl]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 809f 	beq.w	800d690 <_vfiprintf_r+0x1ec>
 800d552:	2300      	movs	r3, #0
 800d554:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d55c:	f10a 0a01 	add.w	sl, sl, #1
 800d560:	9304      	str	r3, [sp, #16]
 800d562:	9307      	str	r3, [sp, #28]
 800d564:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d568:	931a      	str	r3, [sp, #104]	@ 0x68
 800d56a:	4654      	mov	r4, sl
 800d56c:	2205      	movs	r2, #5
 800d56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d572:	4853      	ldr	r0, [pc, #332]	@ (800d6c0 <_vfiprintf_r+0x21c>)
 800d574:	f7fd fcc7 	bl	800af06 <memchr>
 800d578:	9a04      	ldr	r2, [sp, #16]
 800d57a:	b9d8      	cbnz	r0, 800d5b4 <_vfiprintf_r+0x110>
 800d57c:	06d1      	lsls	r1, r2, #27
 800d57e:	bf44      	itt	mi
 800d580:	2320      	movmi	r3, #32
 800d582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d586:	0713      	lsls	r3, r2, #28
 800d588:	bf44      	itt	mi
 800d58a:	232b      	movmi	r3, #43	@ 0x2b
 800d58c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d590:	f89a 3000 	ldrb.w	r3, [sl]
 800d594:	2b2a      	cmp	r3, #42	@ 0x2a
 800d596:	d015      	beq.n	800d5c4 <_vfiprintf_r+0x120>
 800d598:	4654      	mov	r4, sl
 800d59a:	2000      	movs	r0, #0
 800d59c:	f04f 0c0a 	mov.w	ip, #10
 800d5a0:	9a07      	ldr	r2, [sp, #28]
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5a8:	3b30      	subs	r3, #48	@ 0x30
 800d5aa:	2b09      	cmp	r3, #9
 800d5ac:	d94b      	bls.n	800d646 <_vfiprintf_r+0x1a2>
 800d5ae:	b1b0      	cbz	r0, 800d5de <_vfiprintf_r+0x13a>
 800d5b0:	9207      	str	r2, [sp, #28]
 800d5b2:	e014      	b.n	800d5de <_vfiprintf_r+0x13a>
 800d5b4:	eba0 0308 	sub.w	r3, r0, r8
 800d5b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	46a2      	mov	sl, r4
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	e7d2      	b.n	800d56a <_vfiprintf_r+0xc6>
 800d5c4:	9b03      	ldr	r3, [sp, #12]
 800d5c6:	1d19      	adds	r1, r3, #4
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	9103      	str	r1, [sp, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	bfbb      	ittet	lt
 800d5d0:	425b      	neglt	r3, r3
 800d5d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d5d6:	9307      	strge	r3, [sp, #28]
 800d5d8:	9307      	strlt	r3, [sp, #28]
 800d5da:	bfb8      	it	lt
 800d5dc:	9204      	strlt	r2, [sp, #16]
 800d5de:	7823      	ldrb	r3, [r4, #0]
 800d5e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5e2:	d10a      	bne.n	800d5fa <_vfiprintf_r+0x156>
 800d5e4:	7863      	ldrb	r3, [r4, #1]
 800d5e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5e8:	d132      	bne.n	800d650 <_vfiprintf_r+0x1ac>
 800d5ea:	9b03      	ldr	r3, [sp, #12]
 800d5ec:	3402      	adds	r4, #2
 800d5ee:	1d1a      	adds	r2, r3, #4
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	9203      	str	r2, [sp, #12]
 800d5f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5f8:	9305      	str	r3, [sp, #20]
 800d5fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d6c4 <_vfiprintf_r+0x220>
 800d5fe:	2203      	movs	r2, #3
 800d600:	4650      	mov	r0, sl
 800d602:	7821      	ldrb	r1, [r4, #0]
 800d604:	f7fd fc7f 	bl	800af06 <memchr>
 800d608:	b138      	cbz	r0, 800d61a <_vfiprintf_r+0x176>
 800d60a:	2240      	movs	r2, #64	@ 0x40
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	eba0 000a 	sub.w	r0, r0, sl
 800d612:	4082      	lsls	r2, r0
 800d614:	4313      	orrs	r3, r2
 800d616:	3401      	adds	r4, #1
 800d618:	9304      	str	r3, [sp, #16]
 800d61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d61e:	2206      	movs	r2, #6
 800d620:	4829      	ldr	r0, [pc, #164]	@ (800d6c8 <_vfiprintf_r+0x224>)
 800d622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d626:	f7fd fc6e 	bl	800af06 <memchr>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d03f      	beq.n	800d6ae <_vfiprintf_r+0x20a>
 800d62e:	4b27      	ldr	r3, [pc, #156]	@ (800d6cc <_vfiprintf_r+0x228>)
 800d630:	bb1b      	cbnz	r3, 800d67a <_vfiprintf_r+0x1d6>
 800d632:	9b03      	ldr	r3, [sp, #12]
 800d634:	3307      	adds	r3, #7
 800d636:	f023 0307 	bic.w	r3, r3, #7
 800d63a:	3308      	adds	r3, #8
 800d63c:	9303      	str	r3, [sp, #12]
 800d63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d640:	443b      	add	r3, r7
 800d642:	9309      	str	r3, [sp, #36]	@ 0x24
 800d644:	e76a      	b.n	800d51c <_vfiprintf_r+0x78>
 800d646:	460c      	mov	r4, r1
 800d648:	2001      	movs	r0, #1
 800d64a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d64e:	e7a8      	b.n	800d5a2 <_vfiprintf_r+0xfe>
 800d650:	2300      	movs	r3, #0
 800d652:	f04f 0c0a 	mov.w	ip, #10
 800d656:	4619      	mov	r1, r3
 800d658:	3401      	adds	r4, #1
 800d65a:	9305      	str	r3, [sp, #20]
 800d65c:	4620      	mov	r0, r4
 800d65e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d662:	3a30      	subs	r2, #48	@ 0x30
 800d664:	2a09      	cmp	r2, #9
 800d666:	d903      	bls.n	800d670 <_vfiprintf_r+0x1cc>
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d0c6      	beq.n	800d5fa <_vfiprintf_r+0x156>
 800d66c:	9105      	str	r1, [sp, #20]
 800d66e:	e7c4      	b.n	800d5fa <_vfiprintf_r+0x156>
 800d670:	4604      	mov	r4, r0
 800d672:	2301      	movs	r3, #1
 800d674:	fb0c 2101 	mla	r1, ip, r1, r2
 800d678:	e7f0      	b.n	800d65c <_vfiprintf_r+0x1b8>
 800d67a:	ab03      	add	r3, sp, #12
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	462a      	mov	r2, r5
 800d680:	4630      	mov	r0, r6
 800d682:	4b13      	ldr	r3, [pc, #76]	@ (800d6d0 <_vfiprintf_r+0x22c>)
 800d684:	a904      	add	r1, sp, #16
 800d686:	f7fb fec7 	bl	8009418 <_printf_float>
 800d68a:	4607      	mov	r7, r0
 800d68c:	1c78      	adds	r0, r7, #1
 800d68e:	d1d6      	bne.n	800d63e <_vfiprintf_r+0x19a>
 800d690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d692:	07d9      	lsls	r1, r3, #31
 800d694:	d405      	bmi.n	800d6a2 <_vfiprintf_r+0x1fe>
 800d696:	89ab      	ldrh	r3, [r5, #12]
 800d698:	059a      	lsls	r2, r3, #22
 800d69a:	d402      	bmi.n	800d6a2 <_vfiprintf_r+0x1fe>
 800d69c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d69e:	f7fd fc31 	bl	800af04 <__retarget_lock_release_recursive>
 800d6a2:	89ab      	ldrh	r3, [r5, #12]
 800d6a4:	065b      	lsls	r3, r3, #25
 800d6a6:	f53f af1f 	bmi.w	800d4e8 <_vfiprintf_r+0x44>
 800d6aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6ac:	e71e      	b.n	800d4ec <_vfiprintf_r+0x48>
 800d6ae:	ab03      	add	r3, sp, #12
 800d6b0:	9300      	str	r3, [sp, #0]
 800d6b2:	462a      	mov	r2, r5
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	4b06      	ldr	r3, [pc, #24]	@ (800d6d0 <_vfiprintf_r+0x22c>)
 800d6b8:	a904      	add	r1, sp, #16
 800d6ba:	f7fc f94b 	bl	8009954 <_printf_i>
 800d6be:	e7e4      	b.n	800d68a <_vfiprintf_r+0x1e6>
 800d6c0:	0800dcb6 	.word	0x0800dcb6
 800d6c4:	0800dcbc 	.word	0x0800dcbc
 800d6c8:	0800dcc0 	.word	0x0800dcc0
 800d6cc:	08009419 	.word	0x08009419
 800d6d0:	0800d481 	.word	0x0800d481

0800d6d4 <__swbuf_r>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	460e      	mov	r6, r1
 800d6d8:	4614      	mov	r4, r2
 800d6da:	4605      	mov	r5, r0
 800d6dc:	b118      	cbz	r0, 800d6e6 <__swbuf_r+0x12>
 800d6de:	6a03      	ldr	r3, [r0, #32]
 800d6e0:	b90b      	cbnz	r3, 800d6e6 <__swbuf_r+0x12>
 800d6e2:	f7fc fd13 	bl	800a10c <__sinit>
 800d6e6:	69a3      	ldr	r3, [r4, #24]
 800d6e8:	60a3      	str	r3, [r4, #8]
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	071a      	lsls	r2, r3, #28
 800d6ee:	d501      	bpl.n	800d6f4 <__swbuf_r+0x20>
 800d6f0:	6923      	ldr	r3, [r4, #16]
 800d6f2:	b943      	cbnz	r3, 800d706 <__swbuf_r+0x32>
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f000 f82a 	bl	800d750 <__swsetup_r>
 800d6fc:	b118      	cbz	r0, 800d706 <__swbuf_r+0x32>
 800d6fe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d702:	4638      	mov	r0, r7
 800d704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	6922      	ldr	r2, [r4, #16]
 800d70a:	b2f6      	uxtb	r6, r6
 800d70c:	1a98      	subs	r0, r3, r2
 800d70e:	6963      	ldr	r3, [r4, #20]
 800d710:	4637      	mov	r7, r6
 800d712:	4283      	cmp	r3, r0
 800d714:	dc05      	bgt.n	800d722 <__swbuf_r+0x4e>
 800d716:	4621      	mov	r1, r4
 800d718:	4628      	mov	r0, r5
 800d71a:	f7ff f839 	bl	800c790 <_fflush_r>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d1ed      	bne.n	800d6fe <__swbuf_r+0x2a>
 800d722:	68a3      	ldr	r3, [r4, #8]
 800d724:	3b01      	subs	r3, #1
 800d726:	60a3      	str	r3, [r4, #8]
 800d728:	6823      	ldr	r3, [r4, #0]
 800d72a:	1c5a      	adds	r2, r3, #1
 800d72c:	6022      	str	r2, [r4, #0]
 800d72e:	701e      	strb	r6, [r3, #0]
 800d730:	6962      	ldr	r2, [r4, #20]
 800d732:	1c43      	adds	r3, r0, #1
 800d734:	429a      	cmp	r2, r3
 800d736:	d004      	beq.n	800d742 <__swbuf_r+0x6e>
 800d738:	89a3      	ldrh	r3, [r4, #12]
 800d73a:	07db      	lsls	r3, r3, #31
 800d73c:	d5e1      	bpl.n	800d702 <__swbuf_r+0x2e>
 800d73e:	2e0a      	cmp	r6, #10
 800d740:	d1df      	bne.n	800d702 <__swbuf_r+0x2e>
 800d742:	4621      	mov	r1, r4
 800d744:	4628      	mov	r0, r5
 800d746:	f7ff f823 	bl	800c790 <_fflush_r>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d0d9      	beq.n	800d702 <__swbuf_r+0x2e>
 800d74e:	e7d6      	b.n	800d6fe <__swbuf_r+0x2a>

0800d750 <__swsetup_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	4b29      	ldr	r3, [pc, #164]	@ (800d7f8 <__swsetup_r+0xa8>)
 800d754:	4605      	mov	r5, r0
 800d756:	6818      	ldr	r0, [r3, #0]
 800d758:	460c      	mov	r4, r1
 800d75a:	b118      	cbz	r0, 800d764 <__swsetup_r+0x14>
 800d75c:	6a03      	ldr	r3, [r0, #32]
 800d75e:	b90b      	cbnz	r3, 800d764 <__swsetup_r+0x14>
 800d760:	f7fc fcd4 	bl	800a10c <__sinit>
 800d764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d768:	0719      	lsls	r1, r3, #28
 800d76a:	d422      	bmi.n	800d7b2 <__swsetup_r+0x62>
 800d76c:	06da      	lsls	r2, r3, #27
 800d76e:	d407      	bmi.n	800d780 <__swsetup_r+0x30>
 800d770:	2209      	movs	r2, #9
 800d772:	602a      	str	r2, [r5, #0]
 800d774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	e033      	b.n	800d7e8 <__swsetup_r+0x98>
 800d780:	0758      	lsls	r0, r3, #29
 800d782:	d512      	bpl.n	800d7aa <__swsetup_r+0x5a>
 800d784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d786:	b141      	cbz	r1, 800d79a <__swsetup_r+0x4a>
 800d788:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d78c:	4299      	cmp	r1, r3
 800d78e:	d002      	beq.n	800d796 <__swsetup_r+0x46>
 800d790:	4628      	mov	r0, r5
 800d792:	f7ff fdf7 	bl	800d384 <_free_r>
 800d796:	2300      	movs	r3, #0
 800d798:	6363      	str	r3, [r4, #52]	@ 0x34
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d7a0:	81a3      	strh	r3, [r4, #12]
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	6063      	str	r3, [r4, #4]
 800d7a6:	6923      	ldr	r3, [r4, #16]
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	89a3      	ldrh	r3, [r4, #12]
 800d7ac:	f043 0308 	orr.w	r3, r3, #8
 800d7b0:	81a3      	strh	r3, [r4, #12]
 800d7b2:	6923      	ldr	r3, [r4, #16]
 800d7b4:	b94b      	cbnz	r3, 800d7ca <__swsetup_r+0x7a>
 800d7b6:	89a3      	ldrh	r3, [r4, #12]
 800d7b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d7bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7c0:	d003      	beq.n	800d7ca <__swsetup_r+0x7a>
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	f000 f83e 	bl	800d846 <__smakebuf_r>
 800d7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ce:	f013 0201 	ands.w	r2, r3, #1
 800d7d2:	d00a      	beq.n	800d7ea <__swsetup_r+0x9a>
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	60a2      	str	r2, [r4, #8]
 800d7d8:	6962      	ldr	r2, [r4, #20]
 800d7da:	4252      	negs	r2, r2
 800d7dc:	61a2      	str	r2, [r4, #24]
 800d7de:	6922      	ldr	r2, [r4, #16]
 800d7e0:	b942      	cbnz	r2, 800d7f4 <__swsetup_r+0xa4>
 800d7e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d7e6:	d1c5      	bne.n	800d774 <__swsetup_r+0x24>
 800d7e8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ea:	0799      	lsls	r1, r3, #30
 800d7ec:	bf58      	it	pl
 800d7ee:	6962      	ldrpl	r2, [r4, #20]
 800d7f0:	60a2      	str	r2, [r4, #8]
 800d7f2:	e7f4      	b.n	800d7de <__swsetup_r+0x8e>
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	e7f7      	b.n	800d7e8 <__swsetup_r+0x98>
 800d7f8:	200002f4 	.word	0x200002f4

0800d7fc <__swhatbuf_r>:
 800d7fc:	b570      	push	{r4, r5, r6, lr}
 800d7fe:	460c      	mov	r4, r1
 800d800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d804:	4615      	mov	r5, r2
 800d806:	2900      	cmp	r1, #0
 800d808:	461e      	mov	r6, r3
 800d80a:	b096      	sub	sp, #88	@ 0x58
 800d80c:	da0c      	bge.n	800d828 <__swhatbuf_r+0x2c>
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	2100      	movs	r1, #0
 800d812:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d816:	bf14      	ite	ne
 800d818:	2340      	movne	r3, #64	@ 0x40
 800d81a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d81e:	2000      	movs	r0, #0
 800d820:	6031      	str	r1, [r6, #0]
 800d822:	602b      	str	r3, [r5, #0]
 800d824:	b016      	add	sp, #88	@ 0x58
 800d826:	bd70      	pop	{r4, r5, r6, pc}
 800d828:	466a      	mov	r2, sp
 800d82a:	f000 f849 	bl	800d8c0 <_fstat_r>
 800d82e:	2800      	cmp	r0, #0
 800d830:	dbed      	blt.n	800d80e <__swhatbuf_r+0x12>
 800d832:	9901      	ldr	r1, [sp, #4]
 800d834:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d838:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d83c:	4259      	negs	r1, r3
 800d83e:	4159      	adcs	r1, r3
 800d840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d844:	e7eb      	b.n	800d81e <__swhatbuf_r+0x22>

0800d846 <__smakebuf_r>:
 800d846:	898b      	ldrh	r3, [r1, #12]
 800d848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d84a:	079d      	lsls	r5, r3, #30
 800d84c:	4606      	mov	r6, r0
 800d84e:	460c      	mov	r4, r1
 800d850:	d507      	bpl.n	800d862 <__smakebuf_r+0x1c>
 800d852:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d856:	6023      	str	r3, [r4, #0]
 800d858:	6123      	str	r3, [r4, #16]
 800d85a:	2301      	movs	r3, #1
 800d85c:	6163      	str	r3, [r4, #20]
 800d85e:	b003      	add	sp, #12
 800d860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d862:	466a      	mov	r2, sp
 800d864:	ab01      	add	r3, sp, #4
 800d866:	f7ff ffc9 	bl	800d7fc <__swhatbuf_r>
 800d86a:	9f00      	ldr	r7, [sp, #0]
 800d86c:	4605      	mov	r5, r0
 800d86e:	4639      	mov	r1, r7
 800d870:	4630      	mov	r0, r6
 800d872:	f7fe fe7b 	bl	800c56c <_malloc_r>
 800d876:	b948      	cbnz	r0, 800d88c <__smakebuf_r+0x46>
 800d878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d87c:	059a      	lsls	r2, r3, #22
 800d87e:	d4ee      	bmi.n	800d85e <__smakebuf_r+0x18>
 800d880:	f023 0303 	bic.w	r3, r3, #3
 800d884:	f043 0302 	orr.w	r3, r3, #2
 800d888:	81a3      	strh	r3, [r4, #12]
 800d88a:	e7e2      	b.n	800d852 <__smakebuf_r+0xc>
 800d88c:	89a3      	ldrh	r3, [r4, #12]
 800d88e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d896:	81a3      	strh	r3, [r4, #12]
 800d898:	9b01      	ldr	r3, [sp, #4]
 800d89a:	6020      	str	r0, [r4, #0]
 800d89c:	b15b      	cbz	r3, 800d8b6 <__smakebuf_r+0x70>
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8a4:	f000 f81e 	bl	800d8e4 <_isatty_r>
 800d8a8:	b128      	cbz	r0, 800d8b6 <__smakebuf_r+0x70>
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f023 0303 	bic.w	r3, r3, #3
 800d8b0:	f043 0301 	orr.w	r3, r3, #1
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	89a3      	ldrh	r3, [r4, #12]
 800d8b8:	431d      	orrs	r5, r3
 800d8ba:	81a5      	strh	r5, [r4, #12]
 800d8bc:	e7cf      	b.n	800d85e <__smakebuf_r+0x18>
	...

0800d8c0 <_fstat_r>:
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	4d06      	ldr	r5, [pc, #24]	@ (800d8e0 <_fstat_r+0x20>)
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	4608      	mov	r0, r1
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	602b      	str	r3, [r5, #0]
 800d8ce:	f7f3 fbbb 	bl	8001048 <_fstat>
 800d8d2:	1c43      	adds	r3, r0, #1
 800d8d4:	d102      	bne.n	800d8dc <_fstat_r+0x1c>
 800d8d6:	682b      	ldr	r3, [r5, #0]
 800d8d8:	b103      	cbz	r3, 800d8dc <_fstat_r+0x1c>
 800d8da:	6023      	str	r3, [r4, #0]
 800d8dc:	bd38      	pop	{r3, r4, r5, pc}
 800d8de:	bf00      	nop
 800d8e0:	20001724 	.word	0x20001724

0800d8e4 <_isatty_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	4d05      	ldr	r5, [pc, #20]	@ (800d900 <_isatty_r+0x1c>)
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	602b      	str	r3, [r5, #0]
 800d8f0:	f7f3 fbb9 	bl	8001066 <_isatty>
 800d8f4:	1c43      	adds	r3, r0, #1
 800d8f6:	d102      	bne.n	800d8fe <_isatty_r+0x1a>
 800d8f8:	682b      	ldr	r3, [r5, #0]
 800d8fa:	b103      	cbz	r3, 800d8fe <_isatty_r+0x1a>
 800d8fc:	6023      	str	r3, [r4, #0]
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}
 800d900:	20001724 	.word	0x20001724

0800d904 <_raise_r>:
 800d904:	291f      	cmp	r1, #31
 800d906:	b538      	push	{r3, r4, r5, lr}
 800d908:	4605      	mov	r5, r0
 800d90a:	460c      	mov	r4, r1
 800d90c:	d904      	bls.n	800d918 <_raise_r+0x14>
 800d90e:	2316      	movs	r3, #22
 800d910:	6003      	str	r3, [r0, #0]
 800d912:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d916:	bd38      	pop	{r3, r4, r5, pc}
 800d918:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d91a:	b112      	cbz	r2, 800d922 <_raise_r+0x1e>
 800d91c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d920:	b94b      	cbnz	r3, 800d936 <_raise_r+0x32>
 800d922:	4628      	mov	r0, r5
 800d924:	f000 f830 	bl	800d988 <_getpid_r>
 800d928:	4622      	mov	r2, r4
 800d92a:	4601      	mov	r1, r0
 800d92c:	4628      	mov	r0, r5
 800d92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d932:	f000 b817 	b.w	800d964 <_kill_r>
 800d936:	2b01      	cmp	r3, #1
 800d938:	d00a      	beq.n	800d950 <_raise_r+0x4c>
 800d93a:	1c59      	adds	r1, r3, #1
 800d93c:	d103      	bne.n	800d946 <_raise_r+0x42>
 800d93e:	2316      	movs	r3, #22
 800d940:	6003      	str	r3, [r0, #0]
 800d942:	2001      	movs	r0, #1
 800d944:	e7e7      	b.n	800d916 <_raise_r+0x12>
 800d946:	2100      	movs	r1, #0
 800d948:	4620      	mov	r0, r4
 800d94a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d94e:	4798      	blx	r3
 800d950:	2000      	movs	r0, #0
 800d952:	e7e0      	b.n	800d916 <_raise_r+0x12>

0800d954 <raise>:
 800d954:	4b02      	ldr	r3, [pc, #8]	@ (800d960 <raise+0xc>)
 800d956:	4601      	mov	r1, r0
 800d958:	6818      	ldr	r0, [r3, #0]
 800d95a:	f7ff bfd3 	b.w	800d904 <_raise_r>
 800d95e:	bf00      	nop
 800d960:	200002f4 	.word	0x200002f4

0800d964 <_kill_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	2300      	movs	r3, #0
 800d968:	4d06      	ldr	r5, [pc, #24]	@ (800d984 <_kill_r+0x20>)
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	4611      	mov	r1, r2
 800d970:	602b      	str	r3, [r5, #0]
 800d972:	f7f3 fb0a 	bl	8000f8a <_kill>
 800d976:	1c43      	adds	r3, r0, #1
 800d978:	d102      	bne.n	800d980 <_kill_r+0x1c>
 800d97a:	682b      	ldr	r3, [r5, #0]
 800d97c:	b103      	cbz	r3, 800d980 <_kill_r+0x1c>
 800d97e:	6023      	str	r3, [r4, #0]
 800d980:	bd38      	pop	{r3, r4, r5, pc}
 800d982:	bf00      	nop
 800d984:	20001724 	.word	0x20001724

0800d988 <_getpid_r>:
 800d988:	f7f3 baf8 	b.w	8000f7c <_getpid>

0800d98c <_init>:
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	bf00      	nop
 800d990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d992:	bc08      	pop	{r3}
 800d994:	469e      	mov	lr, r3
 800d996:	4770      	bx	lr

0800d998 <_fini>:
 800d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99a:	bf00      	nop
 800d99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d99e:	bc08      	pop	{r3}
 800d9a0:	469e      	mov	lr, r3
 800d9a2:	4770      	bx	lr
